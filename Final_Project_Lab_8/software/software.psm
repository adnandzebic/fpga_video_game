;;============================================================================
;; File: software.psm
;; This is the PicoBlaze program for EE178 Lab #7.
;;============================================================================

;;============================================================================
;; Port address declarations.
;;============================================================================

CONSTANT switches_lo     , 00 ; port for 8-bit switch input
CONSTANT switches_hi     , 01 ; port for 8-bit switch input
CONSTANT leds_lo         , 02 ; port for 8-bit led data out
CONSTANT leds_hi         , 03 ; port for 8-bit led data out

;;============================================================================
;; NEW STUFF
;;============================================================================

CONSTANT buttons         , 04 ; port for 2-bit button input
CONSTANT seven_segments  , 05 ; port for 8-bit seven segment data out
CONSTANT anodes          , 06 ; port for 4-bit seven segment anode data out

CONSTANT my_sid_lo       , 46 ; lo byte of student id (put yours here)
CONSTANT my_sid_hi       , 44 ; hi byte of student id (put yours here)

CONSTANT zero            , 00 ; zero
CONSTANT one             , 01 ; one
CONSTANT two             , 02 ; two
CONSTANT three           , 03 ; three
CONSTANT four            , 04 ; four
CONSTANT five            , 05 ; five
CONSTANT six             , 06 ; six
CONSTANT seven           , 07 ; seven
CONSTANT eight           , 08 ; eight
CONSTANT nine            , 09 ; nine

;;============================================================================
;; Infinite loop.
;;============================================================================

        main: INPUT s0, buttons               ; get button values

              OUTPUT sC, anodes;   NOTE: SC = zero (this turns on the display)
              OUTPUT sB, seven_segments;


              DEBOUNCING_WAIT1:
                    ADD s5, one;
                    COMPARE s5, 11111111'b;
                    JUMP Z, DEBOUNCING_WAIT2;
                    JUMP DEBOUNCING_WAIT1;

              DEBOUNCING_WAIT2:
                    LOAD s5, 00000000'b;
                    ADD s6, one;
                    COMPARE s6, 11111111'b;
                    JUMP Z, DEBOUNCING_WAIT3;
                    JUMP DEBOUNCING_WAIT1;

              DEBOUNCING_WAIT3:
                    LOAD s6, 00000000'b;
                    ADD s7, one;
                    COMPARE s7, 00001111'b;
                    JUMP Z, compare1;
                    JUMP DEBOUNCING_WAIT2;

              compare1:
                    COMPARE s0, 00000001'b;
                    JUMP Z, up_button_pressed;
                    JUMP compare2;

              compare2:
                    COMPARE s0, 00000010'b;
                    JUMP Z, down_button_pressed;
                    JUMP main;

              up_button_pressed:
                    ADD sA, one;
                    JUMP display_number;

              down_button_pressed:
                    SUB sA, one;
                    JUMP display_number;


              display_number:
                    COMPARE sA, zero;
                    JUMP Z, display_zero;
                    JUMP display_number1;

                    display_number1:
                    COMPARE sA, one;
                    JUMP Z, display_one;
                    JUMP display_number2;

                    display_number2:
                    COMPARE sA, two;
                    JUMP Z, display_two;
                    JUMP display_number3;

                    display_number3:
                    COMPARE sA, three;
                    JUMP Z, display_three;
                    JUMP display_number4;

                    display_number4:
                    COMPARE sA, four;
                    JUMP Z, display_four;
                    JUMP display_number5;

                    display_number5:
                    COMPARE sA, five;
                    JUMP Z, display_five;
                    JUMP display_number6;

                    display_number6:
                    COMPARE sA, six;
                    JUMP Z, display_six;
                    JUMP display_number7;

                    display_number7:
                    COMPARE sA, seven;
                    JUMP Z, display_seven;
                    JUMP display_number8;

                    display_number8:
                    COMPARE sA, eight;
                    JUMP Z, display_eight;
                    JUMP display_number9;

                    display_number9:
                    COMPARE sA, nine;
                    JUMP Z, display_nine;
                    JUMP reset;

              display_zero:
                    LOAD sB, 00000011'b;
                    JUMP main;

              display_one:
                    LOAD sB, 10011111'b;
                    JUMP main;

              display_two:
                    LOAD sB, 00100101'b;
                    JUMP main;

              display_three:
                    LOAD sB, 00001101'b;
                    JUMP main;

              display_four:
                    LOAD sB, 10011001'b;
                    JUMP main;

              display_five:
                    LOAD sB, 01001001'b;
                    JUMP main;

              display_six:
                    LOAD sB, 01000001'b;
                    JUMP main;

              display_seven:
                    LOAD sB, 00011111'b;
                    JUMP main;

              display_eight:
                    LOAD sB, 00000001'b;
                    JUMP main;

              display_nine:
                    LOAD sB, 00001001'b;
                    JUMP main;

              reset:
                    LOAD sB, 00000011'b; ZERO
                    LOAD sA, zero;
                    JUMP main;

              JUMP main;

;;============================================================================
;;
;;============================================================================

; Currently, this program acts as a "virtual wire" by reading
; the switch values and copying them to the leds.  You should
; prove to yourself that this works.

; Then, you need to modify this program.  If the 16-bit switch
; value in {s1,s0} equals {my_sid_hi,my_sid_lo} then display it
; on the leds.  Otherwise, count the number of "1's" in {s1,s0}
; and display the result on the leds.
