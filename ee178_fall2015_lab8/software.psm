;;============================================================================
;; File: software.psm
;; This is the PicoBlaze program for EE178 Lab #8.
;;============================================================================

;;============================================================================
;; Port address declarations.
;;============================================================================

CONSTANT stax            , 00 ; port for 8-bit start-x
CONSTANT stay            , 01 ; port for 8-bit start-y
CONSTANT endx            , 02 ; port for 8-bit end-x
CONSTANT endy            , 03 ; port for 8-bit end-y
CONSTANT busy            , 04 ; port for 8-bit busy
CONSTANT beam            , 05 ; port for 8-bit beam
CONSTANT mode            , 06 ; port for 8-bit mode
CONSTANT prng            , 07 ; port for 8-bit prng
CONSTANT leds_lo         , 08 ; port for 8-bit led data out
CONSTANT leds_hi         , 09 ; port for 8-bit led data out
CONSTANT qssd_lo         , 0a ; port for 8-bit qssd data out
CONSTANT qssd_hi         , 0b ; port for 8-bit qssd data out
CONSTANT qssd_dp         , 0c ; port for 8-bit qssd data out
CONSTANT switches_lo     , 0d ; port for 8-bit switch input
CONSTANT switches_hi     , 0e ; port for 8-bit switch input
CONSTANT buttons         , 0f ; port for 8-bit button input

CONSTANT zero            , 00 ; zero
CONSTANT one             , 01 ; one

CONSTANT busy_go         , 01 ; go command and busy status

CONSTANT beam_hi         , 0f ; beam high intensity
CONSTANT beam_md         , 07 ; beam med intensity
CONSTANT beam_lo         , 03 ; beam low intensity

CONSTANT mode_hld        , 00 ; mode hold framebuffer
CONSTANT mode_clr        , 01 ; mode clear framebuffer
CONSTANT mode_lin        , 02 ; mode linear decay
CONSTANT mode_exp        , 03 ; mode exponential decay

CONSTANT buttons_ct      , 10 ; center
CONSTANT buttons_up      , 08 ; up
CONSTANT buttons_dn      , 04 ; down
CONSTANT buttons_lf      , 02 ; left
CONSTANT buttons_rt      , 01 ; right

;;============================================================================
;; Boot.
;;============================================================================

         boot: LOAD s0, zero                       ; initialize
               LOAD s1, zero                       ; initialize
               LOAD s2, zero                       ; initialize
               LOAD s3, zero                       ; initialize
               LOAD s4, zero                       ; initialize
               LOAD s5, mode_exp                   ; load desired mode
               OUTPUT s5, mode                     ; set desired mode
               LOAD s5, beam_hi                    ; load desired beam
               OUTPUT s5, beam                     ; set desired beam
               ENABLE INTERRUPT                    ; enable interrupts

;;============================================================================
;; Main.
;;============================================================================

         main: INPUT s0, switches_lo               ; get lo switch values
               INPUT s1, switches_hi               ; get hi switch values
               OUTPUT s0, leds_lo                  ; put lo led values
               OUTPUT s1, leds_hi                  ; put hi led values
               JUMP main                           ; go back and repeat

;;============================================================================
;; Interrupt - Service Routine.
;;============================================================================

          isr: INPUT s2, switches_lo               ; get lo switch values
               INPUT s3, switches_hi               ; get hi switch values
               INPUT s4, buttons                   ; get button values
               OUTPUT s2, qssd_lo                  ; put lo qssd values
               OUTPUT s3, qssd_hi                  ; put hi qssd values
               OUTPUT s4, qssd_dp                  ; put dp qssd values
               OUTPUT s2, stax                     ; set desired stax
               OUTPUT s3, stay                     ; set desired stay
               INPUT s5, prng                      ; load random endx
               OUTPUT s5, endx                     ; set random endx
               INPUT s5, prng                      ; load random endy
               OUTPUT s5, endy                     ; set random endy
               LOAD s5, busy_go                    ; load go command
               OUTPUT s5, busy                     ; send go command
         wait: INPUT s5, busy                      ; read busy status
               COMPARE s5, busy_go                 ; check busy status
               JUMP Z, wait                        ; if busy, wait more
               RETURNI ENABLE                      ; done with isr

;;============================================================================
;; Interrupt - Vector.
;;============================================================================

               ADDRESS 7FF                         ; must be located here
   isr_vector: JUMP isr                            ; always jump to isr

;;============================================================================
;;
;;============================================================================
