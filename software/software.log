KCPSM6 Assembler log file for program 'F:\adnans_lab7\software\software.psm'.
Generated by KCPSM6 version v2.51
Ken Chapman - Xilinx Ltd - 29th May 2013

Assembly datestamp: 15 Nov 2015
Assembly timestamp: 06:23:31

Contents
  Assembly listing
  List of PSM files
  List of CONSTANTs
  List of TABLEs
  List of STRINGs
  List of line labels
  Instruction usage statistics


Last occupied address: 01F hex
Nominal program memory size: 1K (1024)   address(9:0)
Actual memory size: 4096
  (Default memory size)
Occupied memory locations: 32
Memory locations available: 4064


Assembly listing

 Addr Code                            Instruction

 000                                  ;;============================================================================
 000                                  ;; File: software.psm
 000                                  ;; This is the PicoBlaze program for EE178 Lab #7.
 000                                  ;;============================================================================
 000                                  ;;============================================================================
 000                                  ;; Port address declarations.
 000                                  ;;============================================================================
 000                                  CONSTANT switches_lo, 00             ; port for 8-bit switch input
 000                                  CONSTANT switches_hi, 01             ; port for 8-bit switch input
 000                                  CONSTANT leds_lo, 02                 ; port for 8-bit led data out
 000                                  CONSTANT leds_hi, 03                 ; port for 8-bit led data out
 000                                  CONSTANT my_sid_lo, 44               ; lo byte of student id (put yours here)
 000                                  CONSTANT my_sid_hi, 11               ; hi byte of student id (put yours here)
 000                                  CONSTANT zero, 00                    ; zero
 000                                  CONSTANT one, 01                     ; one
 000                                  ;;============================================================================
 000                                  ;; Infinite loop.
 000                                  ;;============================================================================
 000  09000                     loop: INPUT s0, 00[switches_lo]            ; get lo switch values
 001  09101                           INPUT s1, 01[switches_hi]            ; get hi switch values
 002                                  ; Currently, this program acts as a "virtual wire" by reading
 002                                  ; the switch values and copying them to the leds.  You should
 002                                  ; prove to yourself that this works.
 002                                  ; Then, you need to modify this program.  If the 16-bit switch
 002                                  ; value in {s1,s0} equals {my_sid_hi,my_sid_lo} then display it
 002                                  ; on the leds.  Otherwise, count the number of "1's" in {s1,s0}
 002                                  ; and display the result on the leds.
 002                                  ;OUTPUT s0, leds_lo                  ; put lo led values
 002                                  ;OUTPUT s1, leds_hi                  ; put hi led values
 002  01A44                           LOAD sA, 44[my_sid_lo]               ;
 003  01B11                           LOAD sB, 11[my_sid_hi]               ;
 004  1D044                           COMPARE s0, 44[my_sid_lo]            ;
 005  32007                           JUMP Z, 007[lower_byte_is_set]       ;
 006  2200D                           JUMP 00D[count_bits]                 ;
 007               lower_byte_is_set: 
 007  1D111                           COMPARE s1, 11[my_sid_hi]            ;
 008  3200A                           JUMP Z, 00A[both_bytes_are_set]      ;
 009  2200D                           JUMP 00D[count_bits]                 ;
 00A              both_bytes_are_set: 
 00A  2DA02                           OUTPUT sA, 02[leds_lo]               ;
 00B  2DB03                           OUTPUT sB, 03[leds_hi]               ;
 00C  22000                           JUMP 000[loop]                       ;
 00D                      count_bits: 
 00D  00C00                           LOAD sC, s0                          ;
 00E  00D10                           LOAD sD, s1                          ;
 00F  01E00                           LOAD sE, 00[zero]                    ; // used for counting bits
 010                           loop2: 
 010  14C0E                           SR0 sC                               ;
 011  3A015                           JUMP C, 015[a_one_was_detected]      ;
 012  1DC00                           COMPARE sC, 00[zero]                 ;
 013  32017                           JUMP Z, 017[lowest_byte_is_now_zero] ;
 014  22010                           JUMP 010[loop2]                      ;
 015              a_one_was_detected: 
 015  11E01                           ADD sE, 01[one]                      ;
 016  22010                           JUMP 010[loop2]                      ;
 017         lowest_byte_is_now_zero: 
 017  1DD00                           COMPARE sD, 00[zero]                 ;
 018  3201C                           JUMP Z, 01C[both_bytes_are_now_zero] ;
 019  14D0E                           SR0 sD                               ;
 01A  3A015                           JUMP C, 015[a_one_was_detected]      ;
 01B  22010                           JUMP 010[loop2]                      ;
 01C         both_bytes_are_now_zero: 
 01C  2DE02                           OUTPUT sE, 02[leds_lo]               ;
 01D  01300                           LOAD s3, 00[zero]                    ;
 01E  2D303                           OUTPUT s3, 03[leds_hi]               ; // Erase upper LEDs
 01F  22000                           JUMP 000[loop]                       ;
 020                                  ;;============================================================================
 020                                  ;;
 020                                  ;;============================================================================



List of PSM files that have been assembled

F:\adnans_lab7\software\software.psm



List of defined constants

 CONSTANT name     Value        Source PSM File

 timestamp_hours   06'd         
 timestamp_minutes 23'd         
 timestamp_seconds 31'd         
 datestamp_year    15'd         
 datestamp_month   11'd         
 datestamp_day     15'd         
 NUL               00           
 BEL               07           
 BS                08           
 HT                09           
 LF                0A           
 VT                0B           
 CR                0D           
 ESC               1B           
 DEL               7F           
 DCS               90           
 ST                9C           
 switches_lo       00           software.psm
 switches_hi       01           software.psm
 leds_lo           02           software.psm
 leds_hi           03           software.psm
 my_sid_lo         44           software.psm
 my_sid_hi         11           software.psm
 zero              00           software.psm
 one               01           software.psm



No TABLEs defined



List of text strings

 STRING name       String         Source PSM File

 KCPSM6_version$   "v2.51"        
 datestamp$        "15 Nov 2015"  
 timestamp$        "06:23:31"     



List of line labels

   Label                     Addr  Source PSM File

   loop                      000   software.psm
   lower_byte_is_set         007   software.psm
   both_bytes_are_set        00A   software.psm
   count_bits                00D   software.psm
   loop2                     010   software.psm
   a_one_was_detected        015   software.psm
   lowest_byte_is_now_zero   017   software.psm
   both_bytes_are_now_zero   01C   software.psm



Instruction usage statistics

 Instruction    Instances

 LOAD              6
 STAR              -

 AND               -
 OR                -
 XOR               -

 ADD               1
 ADDCY             -
 SUB               -
 SUBCY             -

 TEST              -
 TESTCY            -
 COMPARE           4
 COMPARECY         -

 SL0               -
 SL1               -
 SLX               -
 SLA               -
 RL                -
 SR0               2
 SR1               -
 SRX               -
 SRA               -
 RR                -

 REGBANK           -

 INPUT             2
 OUTPUT            4
 OUTPUTK           -

 STORE             -
 FETCH             -

 DISABLE           -
 ENABLE            -
 RETURNI           -

 JUMP             13
 JUMP@             -
 CALL              -
 CALL@             -
 RETURN            -
 LOAD&RETURN       -

 HWBUILD           -



End of KCPSM6 log file.
