                      ;;============================================================================
                      ;; File: software.psm
                      ;; This is the PicoBlaze program for EE178 Lab #8.
                      ;;============================================================================

                      ;;============================================================================
                      ;; Port address declarations.
                      ;;============================================================================

                      CONSTANT stax, 00              ; port for 8-bit start-x
                      CONSTANT stay, 01              ; port for 8-bit start-y
                      CONSTANT endx, 02              ; port for 8-bit end-x
                      CONSTANT endy, 03              ; port for 8-bit end-y
                      CONSTANT busy, 04              ; port for 8-bit busy
                      CONSTANT beam, 05              ; port for 8-bit beam
                      CONSTANT mode, 06              ; port for 8-bit mode
                      CONSTANT prng, 07              ; port for 8-bit prng
                      CONSTANT leds_lo, 08           ; port for 8-bit led data out
                      CONSTANT leds_hi, 09           ; port for 8-bit led data out
                      CONSTANT qssd_lo, 0a           ; port for 8-bit qssd data out
                      CONSTANT qssd_hi, 0b           ; port for 8-bit qssd data out
                      CONSTANT qssd_dp, 0c           ; port for 8-bit qssd data out
                      CONSTANT switches_lo, 0d       ; port for 8-bit switch input
                      CONSTANT switches_hi, 0e       ; port for 8-bit switch input
                      CONSTANT buttons, 0f           ; port for 8-bit button input

                      CONSTANT zero, 00              ; zero
                      CONSTANT one, 01               ; one

                      CONSTANT busy_go, 01           ; go command and busy status

                      CONSTANT beam_hi, 0f           ; beam high intensity
                      CONSTANT beam_md, 07           ; beam med intensity
                      CONSTANT beam_lo, 03           ; beam low intensity

                      CONSTANT mode_hld, 00          ; mode hold framebuffer
                      CONSTANT mode_clr, 01          ; mode clear framebuffer
                      CONSTANT mode_lin, 02          ; mode linear decay
                      CONSTANT mode_exp, 03          ; mode exponential decay

                      CONSTANT buttons_ct, 10        ; center
                      CONSTANT buttons_up, 08        ; up
                      CONSTANT buttons_dn, 04        ; down
                      CONSTANT buttons_lf, 02        ; left
                      CONSTANT buttons_rt, 01        ; right

                      ;;============================================================================
                      ;; Macro State declarations
                      ;;============================================================================

                      CONSTANT START_STATE, 00       ; start screen state
                      CONSTANT PLAY_STATE, 01        ; play state
                      CONSTANT GAMEOVER_STATE, 02    ; game over screen state
                      CONSTANT CREDITS_STATE, 03     ; credits screen state (not used for now)

                      ;;============================================================================
                      ;; Boot.
                      ;;============================================================================

                boot: LOAD s0, zero                  ; initialize
                      LOAD s1, zero                  ; initialize
                      LOAD s2, zero                  ; initialize
                      LOAD s3, zero                  ; initialize
                      LOAD s4, zero                  ; initialize
                      LOAD s9, START_STATE           ; initial state is to enter start screen
                      LOAD sa, 00                    ; initial distance (score)
                      LOAD sb, 00                    ; initial distance (score)
                      LOAD sc, 80                    ; starting helicopter position
                      LOAD sd, 05                    ; initialize (needed later)
                      LOAD se, FF                    ; load 255 into sE (horizontal coordinate of block)
                      LOAD sf, 62                    ; load 108 into sF (vertical coordinate of block)
                      LOAD s5, mode_exp              ; load desired mode
                      OUTPUT s5, mode                ; set desired mode
                      LOAD s5, beam_hi               ; load desired beam
                      OUTPUT s5, beam                ; set desired beam
                      ENABLE INTERRUPT               ; enable interrupts

                      ;;============================================================================
                      ;; Main.
                      ;;============================================================================

                main:
                      JUMP main                      ; go back and repeat

                      ;;============================================================================
                      ;; Interrupt - Service Routine.
                      ;;============================================================================

                 isr: COMPARE s9, START_STATE        ; check if in the start state
                      CALL Z, start                  ; call the start screen state
                      COMPARE s9, PLAY_STATE         ; check if in the play state
                      CALL Z, play                   ; call play subroutine
                      COMPARE s9, GAMEOVER_STATE     ; check if in the gameover state
                      CALL Z, gameover               ; call the gameover subroutine

                      RETURNI ENABLE                 ; done with isr

                      ;;============================================================================
                      ;; Start - Start Subroutine
                      ;;============================================================================

               start: INPUT s5, buttons              ; get center button values
                      CALL start_screen              ; draw the map using map subroutine

                      INPUT s5, buttons              ; get button values
                      COMPARE s5, buttons_ct         ; check if center button is pressed
                      JUMP Z, enter_play_state       ; jump to enter_play_state
                      JUMP NZ, stay_in_start_state   ; remain in current state with a jump to stay_in_start_state

    enter_play_state:
                      LOAD s9, PLAY_STATE            ; load play_state and enter play mode
                      RETURN                         ; return from start subroutine

 stay_in_start_state:
                      RETURN                         ; return from start subroutine

                      ;;============================================================================
                      ;; Game Over - Game Over Subroutine
                      ;;============================================================================

            gameover: INPUT s5, buttons              ; get center button values
                      ;CALL map                            ; draw the map using map subroutine

                      INPUT s5, buttons              ; get button values
                      COMPARE s5, buttons_ct         ; check if center button is pressed
                      JUMP Z, enter_play_state2      ; jump to enter_play_state2
                      JUMP NZ, stay_in_gameover_state ; remain in current state with a jump to stay_in_gameover_state

   enter_play_state2:
                      LOAD s9, PLAY_STATE            ; load play_state and enter play mode

                      ;; RESET EVERYTHING BEFORE RETURNING
                      LOAD sa, 00                    ; initial distance (score)
                      LOAD sb, 00                    ; initial distance (score)
                      OUTPUT sb, qssd_lo             ; reset qssd_lo
                      OUTPUT sa, qssd_hi             ; reset qssd_hi
                      LOAD sc, 80                    ; starting helicopter position
                      LOAD sd, 05                    ; initialize (needed later)
                      LOAD se, FF                    ; load 255 into sE (horizontal coordinate of block)
                      LOAD sf, 62                    ; load 108 into sF (vertical coordinate of block)
                      RETURN                         ; return from start subroutine

 stay_in_gameover_state:
                      RETURN                         ; return from start subroutine

                      ;;============================================================================
                      ;; Play - Play Subroutine
                      ;;============================================================================

                play: INPUT s5, buttons              ; get center button values
                      CALL map                       ; draw the map using map subroutine

                      INPUT s5, buttons              ; get button values
                      COMPARE s5, buttons_ct         ; check if center button is pressed
                      CALL Z, move_heli_up           ; call subroutine that moves the helicopter up

                      CALL draw_helicopter           ; draw the helicopter
                      CALL random_block_location     ; determines a random place for the block (y direction only)
                      CALL draw_block                ; draw the block using draw_block subroutine
                      CALL check_collision           ; check if any collisions happen

                      RETURN                         ; finished with play subroutine

                      ;;============================================================================
                      ;; Map - Draw Map Subroutine
                      ;;============================================================================

                 map:

                      ;;============================================================================
                      ;; Draws Top Line of Map (Line 1)
                      ;;============================================================================

                      ;; STARTING POINT
                      LOAD s5, 00                    ; load 00 into s5
                      OUTPUT s5, stax                ; set desired stax
                      LOAD s6, 0F                    ; load 15 into s5
                      OUTPUT s6, stay                ; set desired stay

                      ;; ENDING POINT
                      LOAD s5, FF                    ; set s5 to 255
                      OUTPUT s5, endx                ; set desired endx
                      OUTPUT s6, endy                ; set desired endy
                      CALL draw_line                 ; draws a line (careful: this subroutine overwrites s5)

                      ;;============================================================================
                      ;; Draws Bottom Line of Map (Line 2)
                      ;;============================================================================

                      ;; STARTING POINT
                      LOAD s5, 00                    ; load 00 into s5
                      OUTPUT s5, stax                ; set desired stax
                      LOAD s6, F0                    ; load 240 into s5
                      OUTPUT s6, stay                ; set desired stay

                      ;; ENDING POINT
                      LOAD s5, FF                    ; set s5 to 255
                      OUTPUT s5, endx                ; set desired endx
                      OUTPUT s6, endy                ; set desired endy
                      CALL draw_line                 ; draws a line (careful: this subroutine overwrites s5)
                      RETURN                         ; leave map subroutine

                      ;;============================================================================
                      ;; Start Screen - Draw Start Screen Subroutine
                      ;;============================================================================

        start_screen:

                      ;;============================================================================
                      ;; Draws Decoration (Line 1a)
                      ;;============================================================================

                      ;; STARTING POINT
                      LOAD s5, 00                    ; load 00 into s5
                      OUTPUT s5, stax                ; set desired stax
                      LOAD s6, 0A                    ; load 15 into s5
                      OUTPUT s6, stay                ; set desired stay

                      ;; ENDING POINT
                      LOAD s5, FF                    ; set s5 to 255
                      OUTPUT s5, endx                ; set desired endx
                      OUTPUT s6, endy                ; set desired endy
                      CALL draw_line                 ; draws a line (careful: this subroutine overwrites s5)

                      ;;===========================================================================
                      ;; Draws Decoration (Line 2a)
                      ;;============================================================================

                      ;; STARTING POINT
                      LOAD s5, 00                    ; load 00 into s5
                      OUTPUT s5, stax                ; set desired stax
                      LOAD s6, 0C                    ; load 15 into s5
                      OUTPUT s6, stay                ; set desired stay

                      ;; ENDING POINT
                      LOAD s5, FF                    ; set s5 to 255
                      OUTPUT s5, endx                ; set desired endx
                      OUTPUT s6, endy                ; set desired endy
                      CALL draw_line                 ; draws a line (careful: this subroutine overwrites s5)

                      ;;===========================================================================
                      ;; Draws Decoration (Line 3a)
                      ;;============================================================================

                      ;; STARTING POINT
                      LOAD s5, 00                    ; load 00 into s5
                      OUTPUT s5, stax                ; set desired stax
                      LOAD s6, 0E                    ; load 15 into s5
                      OUTPUT s6, stay                ; set desired stay

                      ;; ENDING POINT
                      LOAD s5, FF                    ; set s5 to 255
                      OUTPUT s5, endx                ; set desired endx
                      OUTPUT s6, endy                ; set desired endy
                      CALL draw_line                 ; draws a line (careful: this subroutine overwrites s5)

                      ;;============================================================================
                      ;; Draws Decoration (Line 1b)
                      ;;============================================================================

                      ;; STARTING POINT
                      LOAD s5, 00                    ; load 00 into s5
                      OUTPUT s5, stax                ; set desired stax
                      LOAD s6, 7E                    ; load 10 into s5
                      OUTPUT s6, stay                ; set desired stay

                      ;; ENDING POINT
                      LOAD s5, FF                    ; set s5 to 255
                      OUTPUT s5, endx                ; set desired endx
                      OUTPUT s6, endy                ; set desired endy
                      CALL draw_line                 ; draws a line (careful: this subroutine overwrites s5)

                      ;;===========================================================================
                      ;; Draws Decoration (Line 2b)
                      ;;============================================================================

                      ;; STARTING POINT
                      LOAD s5, 00                    ; load 00 into s5
                      OUTPUT s5, stax                ; set desired stax
                      LOAD s6, 8A                    ; load 15 into s5
                      OUTPUT s6, stay                ; set desired stay

                      ;; ENDING POINT
                      LOAD s5, FF                    ; set s5 to 255
                      OUTPUT s5, endx                ; set desired endx
                      OUTPUT s6, endy                ; set desired endy
                      CALL draw_line                 ; draws a line (careful: this subroutine overwrites s5)

                      ;;===========================================================================
                      ;; Draws Decoration (Line 3b)
                      ;;============================================================================

                      ;; STARTING POINT
                      LOAD s5, 00                    ; load 00 into s5
                      OUTPUT s5, stax                ; set desired stax
                      LOAD s6, 8C                    ; load 15 into s5
                      OUTPUT s6, stay                ; set desired stay

                      ;; ENDING POINT
                      LOAD s5, FF                    ; set s5 to 255
                      OUTPUT s5, endx                ; set desired endx
                      OUTPUT s6, endy                ; set desired endy
                      CALL draw_line                 ; draws a line (careful: this subroutine overwrites s5)


                      ;;============================================================================
                      ;; Draws the letter H (Line 1)
                      ;;============================================================================

                      ;; STARTING POINT
                      LOAD s5, 0A                    ; load 10 into s5
                      OUTPUT s5, stax                ; set desired stax
                      LOAD s6, 1E                    ; load 30 into s6
                      OUTPUT s6, stay                ; set desired stay

                      ;; ENDING POINT
                      OUTPUT s5, endx                ; set desired endx
                      LOAD s6, 3C                    ; load 60 into s6
                      OUTPUT s6, endy                ; set desired endy
                      CALL draw_line                 ; draws a line (careful: this subroutine overwrites s5)

                      ;;============================================================================
                      ;; Draws the letter H (Line 2)
                      ;;============================================================================

                      ;; STARTING POINT
                      LOAD s5, 0A                    ; load 10 into s5
                      OUTPUT s5, stax                ; set desired stax
                      LOAD s6, 2D                    ; load 45 into s6
                      OUTPUT s6, stay                ; set desired stay

                      ;; ENDING POINT
                      LOAD s5, 1E                    ; load 30 into s5
                      OUTPUT s5, endx                ; set desired endx
                      OUTPUT s6, endy                ; set desired endy
                      CALL draw_line                 ; draws a line (careful: this subroutine overwrites s5)

                      ;;============================================================================
                      ;; Draws the letter H (Line 3)
                      ;;============================================================================

                      ;; STARTING POINT
                      LOAD s5, 1E                    ; load 30 into s5
                      OUTPUT s5, stax                ; set desired stax
                      LOAD s6, 1E                    ; load 30 into s6
                      OUTPUT s6, stay                ; set desired stay

                      ;; ENDING POINT
                      OUTPUT s5, endx                ; set desired endx
                      LOAD s6, 3C                    ; load 60 into s6
                      OUTPUT s6, endy                ; set desired endy
                      CALL draw_line                 ; draws a line (careful: this subroutine overwrites s5)

                      ;;============================================================================
                      ;; Draws the letter E (Line 1)
                      ;;============================================================================

                      ;; STARTING POINT
                      LOAD s5, 28                    ; load 40 into s5
                      OUTPUT s5, stax                ; set desired stax
                      LOAD s6, 1E                    ; load 30 into s6
                      OUTPUT s6, stay                ; set desired stay

                      ;; ENDING POINT
                      OUTPUT s5, endx                ; set desired endx
                      LOAD s6, 3C                    ; load 60 into s6
                      OUTPUT s6, endy                ; set desired endy
                      CALL draw_line                 ; draws a line (careful: this subroutine overwrites s5)

                      ;;============================================================================
                      ;; Draws the letter E (Line 2)
                      ;;============================================================================

                      ;; STARTING POINT
                      LOAD s5, 28                    ; load 40 into s5
                      OUTPUT s5, stax                ; set desired stax
                      LOAD s6, 1E                    ; load 30 into s6
                      OUTPUT s6, stay                ; set desired stay

                      ;; ENDING POINT
                      LOAD s5, 3C                    ; load 60 into s5
                      OUTPUT s5, endx                ; set desired endx
                      OUTPUT s6, endy                ; set desired endy
                      CALL draw_line                 ; draws a line (careful: this subroutine overwrites s5)

                      ;;============================================================================
                      ;; Draws the letter E (Line 3)
                      ;;============================================================================

                      ;; STARTING POINT
                      LOAD s5, 28                    ; load 40 into s5
                      OUTPUT s5, stax                ; set desired stax
                      LOAD s6, 2D                    ; load 45 into s6
                      OUTPUT s6, stay                ; set desired stay

                      ;; ENDING POINT
                      LOAD s5, 3C                    ; load 60 into s5
                      OUTPUT s5, endx                ; set desired endx
                      OUTPUT s6, endy                ; set desired endy
                      CALL draw_line                 ; draws a line (careful: this subroutine overwrites s5)

                      ;;============================================================================
                      ;; Draws the letter E (Line 3)
                      ;;============================================================================

                      ;; STARTING POINT
                      LOAD s5, 28                    ; load 40 into s5
                      OUTPUT s5, stax                ; set desired stax
                      LOAD s6, 3C                    ; load 45 into s6
                      OUTPUT s6, stay                ; set desired stay

                      ;; ENDING POINT
                      LOAD s5, 3C                    ; load 60 into s5
                      OUTPUT s5, endx                ; set desired endx
                      OUTPUT s6, endy                ; set desired endy
                      CALL draw_line                 ; draws a line (careful: this subroutine overwrites s5)

                      ;;============================================================================
                      ;; Draws the letter L (Line 1)
                      ;;============================================================================

                      ;; STARTING POINT
                      LOAD s5, 46                    ; load 70 into s5
                      OUTPUT s5, stax                ; set desired stax
                      LOAD s6, 1E                    ; load 30 into s6
                      OUTPUT s6, stay                ; set desired stay

                      ;; ENDING POINT
                      OUTPUT s5, endx                ; set desired endx
                      LOAD s6, 3C                    ; load 60 into s6
                      OUTPUT s6, endy                ; set desired endy
                      CALL draw_line                 ; draws a line (careful: this subroutine overwrites s5)

                      ;;============================================================================
                      ;; Draws the letter L (Line 2)
                      ;;============================================================================

                      ;; STARTING POINT
                      LOAD s5, 46                    ; load 70 into s5
                      OUTPUT s5, stax                ; set desired stax
                      LOAD s6, 3C                    ; load 45 into s6
                      OUTPUT s6, stay                ; set desired stay

                      ;; ENDING POINT
                      LOAD s5, 5A                    ; load 90 into s5
                      OUTPUT s5, endx                ; set desired endx
                      OUTPUT s6, endy                ; set desired endy
                      CALL draw_line                 ; draws a line (careful: this subroutine overwrites s5)

                      ;;============================================================================
                      ;; Draws the letter I (Line 1)
                      ;;============================================================================

                      ;; STARTING POINT
                      LOAD s5, 64                    ; load 70 into s5
                      OUTPUT s5, stax                ; set desired stax
                      LOAD s6, 1E                    ; load 30 into s6
                      OUTPUT s6, stay                ; set desired stay

                      ;; ENDING POINT
                      OUTPUT s5, endx                ; set desired endx
                      LOAD s6, 3C                    ; load 60 into s6
                      OUTPUT s6, endy                ; set desired endy
                      CALL draw_line                 ; draws a line (careful: this subroutine overwrites s5)

                      ;;============================================================================
                      ;; Draws the letter C (Line 1)
                      ;;============================================================================

                      ;; STARTING POINT
                      LOAD s5, 82                    ; load 130 into s5
                      OUTPUT s5, stax                ; set desired stax
                      LOAD s6, 1E                    ; load 45 into s6
                      OUTPUT s6, stay                ; set desired stay

                      ;; ENDING POINT
                      LOAD s5, 73                    ; load 115 into s5
                      OUTPUT s5, endx                ; set desired endx
                      OUTPUT s6, endy                ; set desired endy
                      CALL draw_line                 ; draws a line (careful: this subroutine overwrites s5)

                      ;;============================================================================
                      ;; Draws the letter C (Line 2)
                      ;;============================================================================

                      ;; STARTING POINT
                      LOAD s5, 73                    ; load 115 into s5
                      OUTPUT s5, stax                ; set desired stax
                      LOAD s6, 1E                    ; load 45 into s6
                      OUTPUT s6, stay                ; set desired stay

                      ;; ENDING POINT
                      LOAD s5, 6E                    ; load 110 into s5
                      OUTPUT s5, endx                ; set desired endx
                      LOAD s6, 23                    ; load 35 into s6
                      OUTPUT s6, endy                ; set desired endy
                      CALL draw_line                 ; draws a line (careful: this subroutine overwrites s5)

                      ;;============================================================================
                      ;; Draws the letter C (Line 3)
                      ;;============================================================================

                      ;; STARTING POINT
                      LOAD s5, 6E                    ; load 110 into s5
                      OUTPUT s5, stax                ; set desired stax
                      LOAD s6, 23                    ; load 35 into s6
                      OUTPUT s6, stay                ; set desired stay

                      ;; ENDING POINT
                      OUTPUT s5, endx                ; set desired endx
                      LOAD s6, 37                    ; load 55 into s6
                      OUTPUT s6, endy                ; set desired endy
                      CALL draw_line                 ; draws a line (careful: this subroutine overwrites s5)

                      ;;============================================================================
                      ;; Draws the letter C (Line 4)
                      ;;============================================================================

                      ;; STARTING POINT
                      LOAD s5, 6E                    ; load 110 into s5
                      OUTPUT s5, stax                ; set desired stax
                      LOAD s6, 37                    ; load 55 into s6
                      OUTPUT s6, stay                ; set desired stay

                      ;; ENDING POINT
                      LOAD s5, 73                    ; load 130 into s5
                      OUTPUT s5, endx                ; set desired endx
                      LOAD s6, 3B                    ; load 44 into s6
                      OUTPUT s6, endy                ; set desired endy
                      CALL draw_line                 ; draws a line (careful: this subroutine overwrites s5)

                      ;;============================================================================
                      ;; Draws the letter C (Line 5)
                      ;;============================================================================

                      ;; STARTING POINT
                      LOAD s5, 82                    ; load 130 into s5
                      OUTPUT s5, stax                ; set desired stax
                      LOAD s6, 3C                    ; load 45 into s6
                      OUTPUT s6, stay                ; set desired stay

                      ;; ENDING POINT
                      LOAD s5, 73                    ; load 115 into s5
                      OUTPUT s5, endx                ; set desired endx
                      OUTPUT s6, endy                ; set desired endy
                      CALL draw_line                 ; draws a line (careful: this subroutine overwrites s5)

                      ;;============================================================================
                      ;; Draws the letter O (Line 1)
                      ;;============================================================================

                      ;; STARTING POINT
                      LOAD s5, 91                    ; load 145 into s5
                      OUTPUT s5, stax                ; set desired stax
                      LOAD s6, 1E                    ; load 30 into s6
                      OUTPUT s6, stay                ; set desired stay

                      ;; ENDING POINT
                      LOAD s5, 9B                    ; load 155 into s5
                      OUTPUT s5, endx                ; set desired endx
                      OUTPUT s6, endy                ; set desired endy
                      CALL draw_line                 ; draws a line (careful: this subroutine overwrites s5)

                      ;;============================================================================
                      ;; Draws the letter O (Line 2)
                      ;;============================================================================

                      ;; STARTING POINT
                      LOAD s5, 91                    ; load 145 into s5
                      OUTPUT s5, stax                ; set desired stax
                      LOAD s6, 1E                    ; load 45 into s6
                      OUTPUT s6, stay                ; set desired stay

                      ;; ENDING POINT
                      LOAD s5, 8C                    ; load 110 into s5
                      OUTPUT s5, endx                ; set desired endx
                      LOAD s6, 1E                    ; load 35 into s6
                      OUTPUT s6, endy                ; set desired endy
                      CALL draw_line                 ; draws a line (careful: this subroutine overwrites s5)

                      ;;============================================================================
                      ;; Draws the letter O (Line 3)
                      ;;============================================================================

                      ;; STARTING POINT
                      LOAD s5, 8C                    ; load 140 into s5
                      OUTPUT s5, stax                ; set desired stax
                      LOAD s6, 1E                    ; load 30 into s6
                      OUTPUT s6, stay                ; set desired stay

                      ;; ENDING POINT
                      OUTPUT s5, endx                ; set desired endx
                      LOAD s6, 3C                    ; load 60 into s6
                      OUTPUT s6, endy                ; set desired endy
                      CALL draw_line                 ; draws a line (careful: this subroutine overwrites s5)

                      ;;============================================================================
                      ;; Draws the letter O (Line 4)
                      ;;============================================================================

                      ;; STARTING POINT
                      LOAD s5, 8C                    ; load 110 into s5
                      OUTPUT s5, stax                ; set desired stax
                      LOAD s6, 3C                    ; load 55 into s6
                      OUTPUT s6, stay                ; set desired stay

                      ;; ENDING POINT
                      LOAD s5, 91                    ; load 145 into s5
                      OUTPUT s5, endx                ; set desired endx
                      LOAD s6, 3C                    ; load 30 into s6
                      OUTPUT s6, endy                ; set desired endy
                      CALL draw_line                 ; draws a line (careful: this subroutine overwrites s5)

                      ;;============================================================================
                      ;; Draws the letter O (Line 5)
                      ;;============================================================================

                      ;; STARTING POINT
                      LOAD s5, 91                    ; load 145 into s5
                      OUTPUT s5, stax                ; set desired stax
                      LOAD s6, 3C                    ; load 30 into s6
                      OUTPUT s6, stay                ; set desired stay

                      ;; ENDING POINT
                      LOAD s5, 9B                    ; load 155 into s5
                      OUTPUT s5, endx                ; set desired endx
                      OUTPUT s6, endy                ; set desired endy
                      CALL draw_line                 ; draws a line (careful: this subroutine overwrites s5)

                      ;;============================================================================
                      ;; Draws the letter O (Line 6)
                      ;;============================================================================

                      ;; STARTING POINT
                      LOAD s5, 9B                    ; load 110 into s5
                      OUTPUT s5, stax                ; set desired stax
                      LOAD s6, 3C                    ; load 55 into s6
                      OUTPUT s6, stay                ; set desired stay

                      ;; ENDING POINT
                      LOAD s5, A0                    ; load 160 into s5
                      OUTPUT s5, endx                ; set desired endx
                      LOAD s6, 3C                    ; load 30 into s6
                      OUTPUT s6, endy                ; set desired endy
                      CALL draw_line                 ; draws a line (careful: this subroutine overwrites s5)

                      ;;============================================================================
                      ;; Draws the letter O (Line 7)
                      ;;============================================================================

                      ;; STARTING POINT
                      LOAD s5, A0                    ; load 160 into s5
                      OUTPUT s5, stax                ; set desired stax
                      LOAD s6, 1E                    ; load 30 into s6
                      OUTPUT s6, stay                ; set desired stay

                      ;; ENDING POINT
                      OUTPUT s5, endx                ; set desired endx
                      LOAD s6, 3C                    ; load 60 into s6
                      OUTPUT s6, endy                ; set desired endy
                      CALL draw_line                 ; draws a line (careful: this subroutine overwrites s5)

                      ;;============================================================================
                      ;; Draws the letter O (Line 8)
                      ;;============================================================================

                      ;; STARTING POINT
                      LOAD s5, A0                    ; load 160 into s5
                      OUTPUT s5, stax                ; set desired stax
                      LOAD s6, 1E                    ; load 30 into s6
                      OUTPUT s6, stay                ; set desired stay

                      ;; ENDING POINT
                      LOAD s5, 9B                    ; load 155 into s5
                      OUTPUT s5, endx                ; set desired endx
                      LOAD s6, 1E                    ; load 30 into s6
                      OUTPUT s6, endy                ; set desired endy
                      CALL draw_line                 ; draws a line (careful: this subroutine overwrites s5)



                      RETURN                         ; leave start_screen subroutine

                      ;;============================================================================
                      ;; Draw Helicopter - Draw Helicopter Subroutine
                      ;;============================================================================

     draw_helicopter:

                      CALL draw_helicopter_cockpit   ; call the subroutine to draw the cockpit
                      CALL draw_helicopter_blades    ; call the subroutine to draw the blades
                      CALL draw_helicopter_tail      ; call the subroutine to draw the tail
                      CALL draw_helicopter_smoke     ; call the subroutine to draw the smoke

                      RETURN                         ; go back from drawing helicopter


                      ;;============================================================================
                      ;; Draw Block - Draw Block Subroutine
                      ;;============================================================================

          draw_block:

                      ;;============================================================================
                      ;; Draws Top Line of Block
                      ;;============================================================================

                      LOAD s5, se                    ; load 255 into s5 (horizontal center of block)
                      LOAD s6, E1                    ; load 245 into s6
                      COMPARE s6, s5                 ; checking if the block is done "peaking out" from the right (initial compare: 245 ? 255)
                      JUMP C, right_edge             ; jump to right_edge
                      LOAD s6, 0A                    ; load 10 into s6
                      COMPARE s5, s6                 ; comparing s5 and s6
                      JUMP C, left_edge              ; jump to left_edge
                      JUMP Z, left_edge              ; jump to left_edge
                      JUMP in_middle                 ; jump to in_middle

          right_edge: OUTPUT s5, stax                ; set desired stax
                      SUB s5, 0A                     ;
                      OUTPUT s5, endx                ; set desired stax
                      JUMP finished1                 ; jump to draw_ys

           left_edge: OUTPUT s5, stax                ; set desired stax
                      LOAD s6, 00                    ; put 255 into s5
                      OUTPUT s6, endx                ; set desired stax
                      JUMP finished1                 ; jump to draw_ys

           in_middle:
                      OUTPUT s5, stax                ; set desired stax
                      SUB s5, 0A                     ; subtract the width of block to get the other x coordinate
                      OUTPUT s5, endx                ; set desired endx

           finished1: OUTPUT sf, stay                ; set desired stay
                      OUTPUT sf, endy                ; set desired endy
                      CALL draw_line                 ; draws a line (careful: this subroutine overwrites s5)

                      ;;============================================================================
                      ;; Draws Bottom Line of Block
                      ;;============================================================================

                      LOAD s5, sf                    ; load sF into s5
                      ADD s5, 3C                     ; add 40 to s5
                      OUTPUT s5, stay                ; set desired stay
                      OUTPUT s5, endy                ; set desired endy
                      CALL draw_line                 ; draws a line (careful: this subroutine overwrites s5)

                      ;;============================================================================
                      ;; Draws Right Vertical Line of Block
                      ;;============================================================================

                      OUTPUT se, stax                ; set desired stax
                      OUTPUT se, endx                ; set desired endx
                      OUTPUT sf, stay                ; set desired stay
                      LOAD s5, sf                    ; load sF into s5
                      ADD s5, 3C                     ; add 60 to y coordinate
                      OUTPUT s5, endy                ; set desired endy
                      CALL draw_line                 ; draws a line (careful: this subroutine overwrites s5)

                      ;;============================================================================
                      ;; Draws Left Vertical Line of Block
                      ;;============================================================================

                      LOAD s5, se                    ; load sE into s5
                      SUB s5, 0A                     ; subtract 10 from s5
                      OUTPUT s5, stax                ; set desired stax
                      OUTPUT s5, endx                ; set desired endx
                      OUTPUT sf, stay                ; set desired stay
                      LOAD s5, sf                    ; load sF into s5
                      ADD s5, 3C                     ; add 60 to y coordinate
                      OUTPUT s5, endy                ; set desired endy
                      CALL draw_line                 ; draws a line (careful: this subroutine overwrites s5)
                      RETURN                         ; finished with draw_block subroutine



                      ;;============================================================================
                      ;; Random Block Location - Random Block Location Subroutine
                      ;;============================================================================

 random_block_location:
                      COMPARE se, 00                 ; is it time to create a new variable?
                      JUMP Z, new_random             ; jump to new random creator
                      JUMP NZ, skip_everything       ; goes back

     skip_everything: RETURN                         ; returns back (no new rand. number)

          new_random: INPUT s5, prng                 ; create to new random number
                      COMPARE s5, 0F                 ; check if it's in range
                      JUMP NC, check_other_bound_range ; check lower bound of map
                      JUMP C, new_random             ; get new variable

 check_other_bound_range:
                      COMPARE s5, B4                 ; compare s5 to 180
                      JUMP NC, new_random            ; get a new random number
                      LOAD sf, s5                    ; a new y coordinate generated
                      RETURN                         ; get out of subroutine

                      ;;============================================================================
                      ;; Move Helicopter Up - Move Helicopter Up Subroutine
                      ;;============================================================================

        move_heli_up:
                      COMPARE sc, 15                 ; check if the helicopter is colliding with top wall
                      JUMP NZ, decrement             ; if not colliding, then move helicopter appropriately
                      JUMP NC, decrement             ; necessary as well
                      RETURN                         ; do not increment if colliding with top wall
           decrement:
                      SUB sc, 02                     ; move the helicopter up
                      RETURN                         ; get out of subroutine

                      ;;============================================================================
                      ;; Draw Helicopter Cockpit - Draw Helicopter Cockpit Subroutine
                      ;;============================================================================

 draw_helicopter_cockpit:

                      ;;============================================================================
                      ;; Draws Cockpit of Helicopter (Line 1a)
                      ;;============================================================================

                      ;; STARTING POINT
                      LOAD s5, 64                    ; load 100 into s5
                      OUTPUT s5, stax                ; set desired stax
                      LOAD s6, sc                    ; load sC into s5
                      OUTPUT s6, stay                ; set desired stay

                      ;; ENDING POINT
                      SUB s5, 01                     ; subtract 7 from s5
                      OUTPUT s5, endx                ; set desired endx
                      SUB s6, 03                     ; go up by 5
                      OUTPUT s6, endy                ; set desired endy
                      CALL draw_line                 ; draws a line (careful: this subroutine overwrites s5)

                      ;;============================================================================
                      ;; Draws Cockpit of Helicopter (Line 1b)
                      ;;============================================================================

                      ;; STARTING POINT
                      LOAD s5, 64                    ; load 100 into s5
                      SUB s5, 01                     ; subtract 7 from s5
                      OUTPUT s5, stax                ; set desired stax
                      LOAD s6, sc                    ; load sC into s5
                      SUB s6, 03                     ; go up by 5
                      OUTPUT s6, stay                ; set desired stay

                      ;; ENDING POINT
                      SUB s5, 04                     ; subtract 7 from s5
                      OUTPUT s5, endx                ; set desired endx
                      SUB s6, 02                     ; go up by 5
                      OUTPUT s6, endy                ; set desired endy
                      CALL draw_line                 ; draws a line (careful: this subroutine overwrites s5)


                      ;;============================================================================
                      ;; Draws Cockpit of Helicopter (Line 2a)
                      ;;============================================================================

                      ;; STARTING POINT
                      LOAD s5, 64                    ; load 100 into s5
                      OUTPUT s5, stax                ; set desired stax
                      LOAD s6, sc                    ; load sC into s5
                      OUTPUT s6, stay                ; set desired stay

                      ;; ENDING POINT
                      SUB s5, 01                     ; subtract 1 from s5
                      OUTPUT s5, endx                ; set desired endx
                      ADD s6, 03                     ; go down by 3
                      OUTPUT s6, endy                ; set desired endy
                      CALL draw_line                 ; draws a line (careful: this subroutine overwrites s5)

                      ;;============================================================================
                      ;; Draws Cockpit of Helicopter (Line 2b)
                      ;;============================================================================

                      ;; STARTING POINT
                      LOAD s5, 64                    ; load 100 into s5
                      SUB s5, 01                     ; subtract 1 from s5
                      OUTPUT s5, stax                ; set desired stax
                      LOAD s6, sc                    ; load sC into s5
                      ADD s6, 03                     ; go down by 3
                      OUTPUT s6, stay                ; set desired stay

                      ;; ENDING POINT
                      SUB s5, 04                     ; subtract 7 from s5
                      OUTPUT s5, endx                ; set desired endx
                      ADD s6, 02                     ; go down by 5
                      OUTPUT s6, endy                ; set desired endy
                      CALL draw_line                 ; draws a line (careful: this subroutine overwrites s5)

                      ;;============================================================================
                      ;; Draws Cockpit of Helicopter (Line 3)
                      ;;============================================================================

                      ;; STARTING POINT
                      LOAD s5, 64                    ; load 100 into s5
                      SUB s5, 05                     ; load 7 into s5
                      OUTPUT s5, stax                ; set desired stax
                      LOAD s6, sc                    ; load sC into s5
                      SUB s6, 05                     ; go up by 5 using subtraction
                      OUTPUT s6, stay                ; set desired stay

                      ;; ENDING POINT
                      SUB s5, 07                     ; subtract 5 from s5
                      OUTPUT s5, endx                ; set desired endx
                      ADD s6, 05                     ; go down by 5
                      OUTPUT s6, endy                ; set desired endy
                      CALL draw_line                 ; draws a line (careful: this subroutine overwrites s5)

                      ;;============================================================================
                      ;; Draws Cockpit of Helicopter (Line 4)
                      ;;============================================================================

                      ;; STARTING POINT
                      LOAD s5, 64                    ; load 100 into s5
                      SUB s5, 05                     ; load 7 into s5
                      OUTPUT s5, stax                ; set desired stax
                      LOAD s6, sc                    ; load sC into s5
                      ADD s6, 05                     ; go down by 5 using addition
                      OUTPUT s6, stay                ; set desired stay

                      ;; ENDING POINT
                      SUB s5, 07                     ; subtract 5 from s5
                      OUTPUT s5, endx                ; set desired endx
                      SUB s6, 05                     ; go back up by 5
                      OUTPUT s6, endy                ; set desired endy
                      CALL draw_line                 ; draws a line (careful: this subroutine overwrites s5)

                      RETURN                         ; go back from subroutine

                      ;;============================================================================
                      ;; Draw Helicopter Tail - Draw Helicopter Tail Subroutine
                      ;;============================================================================

 draw_helicopter_tail:

                      ;;============================================================================
                      ;; Draws Tail of Helicopter (Line 1)
                      ;;============================================================================

                      ;; STARTING POINT
                      LOAD s5, 64                    ; load 100 into s5
                      SUB s5, 0A                     ; subtract 0xA from s5
                      OUTPUT s5, stax                ; set desired stax
                      LOAD s6, sc                    ; load sC into s5
                      SUB s6, 02                     ; subtract 2 from s6
                      OUTPUT s6, stay                ; set desired stay

                      ;; ENDING POINT
                      SUB s5, 07                     ; subtract 7 from s5
                      OUTPUT s5, endx                ; set desired endx
                      OUTPUT s6, endy                ; set desired endy
                      CALL draw_line                 ; draws a line (careful: this subroutine overwrites s5)

                      ;;============================================================================
                      ;; Draws Tail of Helicopter (Line 2)
                      ;;============================================================================

                      ;; STARTING POINT
                      LOAD s5, 64                    ; load 100 into s5
                      SUB s5, 0C                     ; subtract 0xC from s5
                      OUTPUT s5, stax                ; set desired stax
                      LOAD s6, sc                    ; load sC into s5
                      OUTPUT s6, stay                ; set desired stay

                      ;; ENDING POINT
                      SUB s5, 08                     ; subtract 7 from s5
                      OUTPUT s5, endx                ; set desired endx
                      OUTPUT s6, endy                ; set desired endy
                      CALL draw_line                 ; draws a line (careful: this subroutine overwrites s5)

                      ;;============================================================================
                      ;; Draws Tail of Helicopter (Line 3)
                      ;;============================================================================

                      ;; STARTING POINT
                      LOAD s5, 64                    ; load 100 into s5
                      SUB s5, 0A                     ; subtract 0x0A from s5
                      SUB s5, 08                     ; subtract 0x10 from s5
                      OUTPUT s5, stax                ; set desired stax
                      LOAD s6, sc                    ; load sC into s5
                      SUB s6, 02                     ; subtract 2 from s6
                      OUTPUT s6, stay                ; set desired stay

                      ;; ENDING POINT
                      SUB s5, 02                     ; subtract 2 from s5
                      OUTPUT s5, endx                ; set desired endx
                      SUB s6, 02                     ; subtract 2 from s6
                      OUTPUT s6, endy                ; set desired endy
                      CALL draw_line                 ; draws a line (careful: this subroutine overwrites s5)

                      ;;============================================================================
                      ;; Draws Tail of Helicopter (Line 4)
                      ;;============================================================================

                      ;; STARTING POINT
                      LOAD s5, 64                    ; load 100 into s5
                      SUB s5, 0C                     ; subtract 0x0C from s5
                      SUB s5, 09                     ; subtract 0x09 from s5
                      OUTPUT s5, stax                ; set desired stax
                      LOAD s6, sc                    ; load sC into s5
                      OUTPUT s6, stay                ; set desired stay

                      ;; ENDING POINT
                      ;SUB s5, 01                          ; subtract 2 from s5
                      OUTPUT s5, endx                ; set desired endx
                      ADD s6, 01                     ; add 1 to s6
                      OUTPUT s6, endy                ; set desired endy
                      CALL draw_line                 ; draws a line (careful: this subroutine overwrites s5)

                      ;;============================================================================
                      ;; Draws Tail of Helicopter (Line 5)
                      ;;============================================================================

                      ;; STARTING POINT
                      LOAD s5, 64                    ; load 100 into s5
                      SUB s5, 0A                     ; subtract 0x0A from s5
                      SUB s5, 0A                     ; subtract 0x0A from s5
                      OUTPUT s5, stax                ; set desired stax
                      LOAD s6, sc                    ; load sC into s5
                      SUB s6, 04                     ; subtract 4 from s6
                      OUTPUT s6, stay                ; set desired stay

                      ;; ENDING POINT
                      OUTPUT s5, endx                ; set desired endx
                      ADD s6, 05                     ; add 1 to s6
                      OUTPUT s6, endy                ; set desired endy
                      CALL draw_line                 ; draws a line (careful: this subroutine overwrites s5)

                      RETURN                         ; go back from subroutine

                      ;;============================================================================
                      ;; Draw Helicopter Blades - Draw Helicopter Blades Subroutine
                      ;;============================================================================

 draw_helicopter_blades:

                      ;;============================================================================
                      ;; Draws Blades of Helicopter (Line 1)
                      ;;============================================================================

                      ;; STARTING POINT
                      LOAD s5, 64                    ; load 100 into s5
                      SUB s5, 05                     ; subtract 0xA from s5
                      OUTPUT s5, stax                ; set desired stax
                      LOAD s6, sc                    ; load sC into s5
                      SUB s6, 05                     ; subtract 2 from s6
                      OUTPUT s6, stay                ; set desired stay

                      ;; ENDING POINT
                      OUTPUT s5, endx                ; set desired endx
                      SUB s6, 02                     ; subtract 2 from s6
                      OUTPUT s6, endy                ; set desired endy
                      CALL draw_line                 ; draws a line (careful: this subroutine overwrites s5)

                      ;;============================================================================
                      ;; Draws Blades of Helicopter (Line 2)
                      ;;============================================================================

                      ;; STARTING POINT
                      LOAD s5, 64                    ; load 100 into s5
                      OUTPUT s5, stax                ; set desired stax
                      LOAD s6, sc                    ; load sC into s5
                      SUB s6, 07                     ; subtract 2 from s6
                      OUTPUT s6, stay                ; set desired stay

                      ;; ENDING POINT
                      SUB s5, 0A                     ; subtract 10 from s5
                      OUTPUT s5, endx                ; set desired endx
                      OUTPUT s6, endy                ; set desired endy
                      CALL draw_line                 ; draws a line (careful: this subroutine overwrites s5)

                      RETURN                         ; go back from subroutine

                      ;;============================================================================
                      ;; Draw Helicopter Smoke - Draw Helicopter Smoke Subroutine
                      ;;============================================================================

 draw_helicopter_smoke:

                      ;;============================================================================
                      ;; Draws Smoke of Helicopter (Line 1)
                      ;;============================================================================

                      ;; Start Point
                      LOAD s5, 64                    ; load 100 into s5
                      SUB s5, 28                     ; position starting smoke right point of line 1
                      OUTPUT s5, stax                ; output to starting x position of line 1

                      LOAD s6, sc                    ; load helicopter smoke vertical position for line 1
                      OUTPUT s6, stay                ; output to starting y position of line 1
                      ;;

                      ;; End Point
                      SUB s5, 04                     ; position starting smoke left point of line 1
                      OUTPUT s5, endx                ; output to starting y position of line 1

                      OUTPUT s6, endy                ; output to ending y position of line 1, matching helicopter
                      CALL draw_line                 ;draws a line (careful: this subroutine overwrites s5)
                      ;;

                      ;;============================================================================
                      ;; Draws Smoke of Helicopter (Line 2)
                      ;;============================================================================

                      ;; Start Point
                      LOAD s5, 64                    ; load 100 into s5
                      SUB s5, 34                     ; position starting smoke right point of line 2
                      OUTPUT s5, stax                ; output to starting x position of line 2

                      LOAD s6, sc                    ; load starting smoke vertical position for line 2
                      ADD s6, 04                     ; add 4 to s6 (shift down by 4)
                      OUTPUT s6, stay                ; output to starting y position of line 2
                      ;;

                      ;; End Point
                      SUB s5, 04                     ; subtract s5 by 4 for length of line
                      OUTPUT s5, endx                ; output to endx

                      OUTPUT s6, endy                ; outputs vertical locaton of smoke line 2
                      CALL draw_line                 ;draws a line (careful: this subroutine overwrites s5)
                      ;;

                      ;;============================================================================
                      ;; Draws Smoke of Helicopter (Line 3)
                      ;;============================================================================

                      ;; Start Point
                      LOAD s5, 64                    ; load 100 into s5
                      SUB s5, 40                     ; position starting smoke right point of line 3
                      OUTPUT s5, stax                ; output to starting x position of line 3

                      LOAD s6, sc                    ; load starting smoke vertical position for line 3
                      SUB s6, 04                     ; add 4 to s6 (shift down by 4)
                      OUTPUT s6, stay                ; output to starting y position of line 3
                      ;;

                      ;; End Point
                      SUB s5, 04                     ; subtract s5 by 4 for length of line
                      OUTPUT s5, endx                ; output to endx

                      OUTPUT s6, endy                ; output same y position of line 3
                      CALL draw_line                 ; draws a line (careful: this subroutine overwrites s5)
                      ;;

                      RETURN                         ; go back to subroutine



                      ;;============================================================================
                      ;; Draw Line - Draw Line Subroutine
                      ;;============================================================================

           draw_line: LOAD s5, busy_go               ; load go command
                      OUTPUT s5, busy                ; send go command
                wait: INPUT s5, busy                 ; read busy status
                      COMPARE s5, busy_go            ; check busy status
                      JUMP Z, wait                   ; if busy, wait more
                      RETURN                         ; leave line drawing subroutine

                      ;;============================================================================
                      ;; Check Collisions - Check Collisions Subroutine
                      ;;============================================================================

     check_collision:
                      ;;============================================================================
                      ;; Check Collisions with Map (top wall)
                      ;;============================================================================
                      LOAD s5, 60                    ; position of heli/wall collision
                      LOAD s8, 0F                    ; top wall vertical coordinate (15)
                      LOAD s6, sc                    ; get vertical position of helicopter
                      SUB s6, 0A                     ; the helicopter's blades 10 pixels higher
                      LOAD s7, s6                    ; used later for drawing the "spark"
                      COMPARE s8, s6                 ; check if the two intersect
                      JUMP Z, collision_occurred     ; jump to collision occurred
                      JUMP NC, collision_occurred    ; jump to collision occurred (necessary)

                      ;;============================================================================
                      ;; Check Collisions with Map (bottom wall)
                      ;;============================================================================
                      LOAD s8, F0                    ; bottom wall vertical coordinate (240)
                      LOAD s6, sc                    ; get vertical position of helicopter
                      ADD s6, 05                     ; the helicopter's bottom is 5 pixels below
                      LOAD s7, s6                    ; used later for drawing the "spark"
                      COMPARE s8, s6                 ; check if the two intersect
                      JUMP Z, collision_occurred     ; jump to collision occurred

                      ;;============================================================================
                      ;; Check Collisions with Block
                      ;;============================================================================

                      LOAD s5, se                    ; get current horizontal position of block
                      SUB s5, 0A                     ; actual block is 10 pixels back
                      COMPARE s5, 64                 ; check if s5 coincides with heli (horizontal check)
                      JUMP Z, check_vertical         ; jump to check vertical positioning
                      JUMP NZ, no_collision          ; jump to no_collision routine

      check_vertical:
                      LOAD s6, sf                    ; get current vertical position of block
                      LOAD s7, sc                    ; load helicopter front position
                loop: COMPARE s7, s6                 ; compare s7 and s6
                      JUMP Z, collision_occurred     ; jump to collision_occured
                      ADD s6, 01                     ; add one to s6
                      LOAD s8, sf                    ; load original value for reference only
                      ADD s8, 3c                     ; add 60 to s8
                      COMPARE s6, s8                 ; compare s6 to bottom of block (s8)
                      JUMP Z, no_collision           ; jump to no_collision routine
                      JUMP NZ, loop                  ; keep looping

        no_collision: SUB se, 01                     ; decrement sE
                      ADD sc, 01                     ; increment sC
                      CALL distance                  ; used for keeping the score (increments distance)
                      RETURN                         ; leave, since no collisions occurred

  collision_occurred:
                      OUTPUT s5, stax                ; set desired stax
                      OUTPUT s7, stay                ; set desired stay
                      INPUT s8, prng                 ; load random endx
                      OUTPUT s8, endx                ; set random endx
                      INPUT s8, prng                 ; load random endy
                      OUTPUT s8, endy                ; set random endy
                      CALL draw_line                 ; draw random line

                      LOAD s9, GAMEOVER_STATE        ; should go to gameover state instead
                      RETURN                         ; return from routine without any increments

                      ;;============================================================================
                      ;; Distance - Distance Subroutine
                      ;;============================================================================

            distance: OUTPUT sb, qssd_lo             ; put distance value to qssd
                      COMPARE sb, FF                 ; check if max (FF) was reached
                      JUMP Z, distance2              ; jump to distance2
                      ADD sb, one                    ; increment distance value
                      RETURN                         ; finished with distance subroutine

           distance2: ADD sa, one                    ; add one to the next degree
                      LOAD sb, zero                  ; reset sB
                      OUTPUT sb, qssd_lo             ; put distance value to qssd
                      OUTPUT sa, qssd_hi             ; put distance value to qssd
                      RETURN                         ; finished with distance subroutine

                      ;;============================================================================
                      ;; Interrupt - Vector.
                      ;;============================================================================

                      ADDRESS 7FF                    ; must be located here
          isr_vector: JUMP isr                       ; always jump to isr

                      ;;============================================================================
                      ;;
                      ;;============================================================================
