Open Picoblaze Assembler log for program "software.psm"
Generated by opbasm v 1.2
  Assembled on 2015-11-29T17:57:13
  Picoblaze-6 mode

  Last occupied address: 7FF hex
  Nominal program memory size: 2K (2048)  address(10:0)
  Actual memory size: 4096
  Occupied memory locations: 609
  Memory locations available: 3487
  Scratchpad size: 256


Assembly listing
----------------
000                             ;;============================================================================
000                             ;; File: software.psm
000                             ;; This is the PicoBlaze program for EE178 Lab #8.
000                             ;;============================================================================

000                             ;;============================================================================
000                             ;; Port address declarations.
000                             ;;============================================================================

000                             CONSTANT stax, 00              ; port for 8-bit start-x
000                             CONSTANT stay, 01              ; port for 8-bit start-y
000                             CONSTANT endx, 02              ; port for 8-bit end-x
000                             CONSTANT endy, 03              ; port for 8-bit end-y
000                             CONSTANT busy, 04              ; port for 8-bit busy
000                             CONSTANT beam, 05              ; port for 8-bit beam
000                             CONSTANT mode, 06              ; port for 8-bit mode
000                             CONSTANT prng, 07              ; port for 8-bit prng
000                             CONSTANT leds_lo, 08           ; port for 8-bit led data out
000                             CONSTANT leds_hi, 09           ; port for 8-bit led data out
000                             CONSTANT qssd_lo, 0a           ; port for 8-bit qssd data out
000                             CONSTANT qssd_hi, 0b           ; port for 8-bit qssd data out
000                             CONSTANT qssd_dp, 0c           ; port for 8-bit qssd data out
000                             CONSTANT switches_lo, 0d       ; port for 8-bit switch input
000                             CONSTANT switches_hi, 0e       ; port for 8-bit switch input
000                             CONSTANT buttons, 0f           ; port for 8-bit button input

000                             CONSTANT zero, 00              ; zero
000                             CONSTANT one, 01               ; one

000                             CONSTANT busy_go, 01           ; go command and busy status

000                             CONSTANT beam_hi, 0f           ; beam high intensity
000                             CONSTANT beam_md, 07           ; beam med intensity
000                             CONSTANT beam_lo, 03           ; beam low intensity

000                             CONSTANT mode_hld, 00          ; mode hold framebuffer
000                             CONSTANT mode_clr, 01          ; mode clear framebuffer
000                             CONSTANT mode_lin, 02          ; mode linear decay
000                             CONSTANT mode_exp, 03          ; mode exponential decay

000                             CONSTANT buttons_ct, 10        ; center
000                             CONSTANT buttons_up, 08        ; up
000                             CONSTANT buttons_dn, 04        ; down
000                             CONSTANT buttons_lf, 02        ; left
000                             CONSTANT buttons_rt, 01        ; right

000                             ;;============================================================================
000                             ;; Macro State declarations
000                             ;;============================================================================

000                             CONSTANT START_STATE, 00       ; start screen state
000                             CONSTANT PLAY_STATE, 01        ; play state
000                             CONSTANT GAMEOVER_STATE, 02    ; game over screen state
000                             CONSTANT CREDITS_STATE, 03     ; credits screen state (not used for now)

000                             ;;============================================================================
000                             ;; Boot.
000                             ;;============================================================================

000  01000                boot: LOAD s0, zero                  ; initialize
001  01100                      LOAD s1, zero                  ; initialize
002  01200                      LOAD s2, zero                  ; initialize
003  01300                      LOAD s3, zero                  ; initialize
004  01400                      LOAD s4, zero                  ; initialize
005  01900                      LOAD s9, START_STATE           ; initial state is to enter start screen
006  01A00                      LOAD sa, 00                    ; initial distance (score)
007  01B00                      LOAD sb, 00                    ; initial distance (score)
008  01C80                      LOAD sc, 80                    ; starting helicopter position
009  01D05                      LOAD sd, 05                    ; initialize (needed later)
00A  01EFF                      LOAD se, FF                    ; load 255 into sE (horizontal coordinate of block)
00B  01F62                      LOAD sf, 62                    ; load 108 into sF (vertical coordinate of block)
00C  01503                      LOAD s5, mode_exp              ; load desired mode
00D  2D506                      OUTPUT s5, mode                ; set desired mode
00E  0150F                      LOAD s5, beam_hi               ; load desired beam
00F  2D505                      OUTPUT s5, beam                ; set desired beam
010  28001                      ENABLE INTERRUPT               ; enable interrupts

011                             ;;============================================================================
011                             ;; Main.
011                             ;;============================================================================

011                       main:
011  22011                      JUMP main                      ; go back and repeat

012                             ;;============================================================================
012                             ;; Interrupt - Service Routine.
012                             ;;============================================================================

012  1D900                 isr: COMPARE s9, START_STATE        ; check if in the start state
013  30019                      CALL Z, start                  ; call the start screen state
014  1D901                      COMPARE s9, PLAY_STATE         ; check if in the play state
015  30032                      CALL Z, play                   ; call play subroutine
016  1D902                      COMPARE s9, GAMEOVER_STATE     ; check if in the gameover state
017  30022                      CALL Z, gameover               ; call the gameover subroutine

018  29001                      RETURNI ENABLE                 ; done with isr

019                             ;;============================================================================
019                             ;; Start - Start Subroutine
019                             ;;============================================================================

019  0950F               start: INPUT s5, buttons              ; get center button values
01A  2004D                      CALL start_screen              ; draw the map using map subroutine

01B  0950F                      INPUT s5, buttons              ; get button values
01C  1D510                      COMPARE s5, buttons_ct         ; check if center button is pressed
01D  3201F                      JUMP Z, enter_play_state       ; jump to enter_play_state
01E  36021                      JUMP NZ, stay_in_start_state   ; remain in current state with a jump to stay_in_start_state

01F           enter_play_state:
01F  01901                      LOAD s9, PLAY_STATE            ; load play_state and enter play mode
020  25000                      RETURN                         ; return from start subroutine

021        stay_in_start_state:
021  25000                      RETURN                         ; return from start subroutine

022                             ;;============================================================================
022                             ;; Game Over - Game Over Subroutine
022                             ;;============================================================================

022  0950F            gameover: INPUT s5, buttons              ; get center button values
023                             ;CALL map                            ; draw the map using map subroutine

023  0950F                      INPUT s5, buttons              ; get button values
024  1D510                      COMPARE s5, buttons_ct         ; check if center button is pressed
025  32027                      JUMP Z, enter_play_state2      ; jump to enter_play_state2
026  36031                      JUMP NZ, stay_in_gameover_state ; remain in current state with a jump to stay_in_gameover_state

027          enter_play_state2:
027  01901                      LOAD s9, PLAY_STATE            ; load play_state and enter play mode

028                             ;; RESET EVERYTHING BEFORE RETURNING
028  01A00                      LOAD sa, 00                    ; initial distance (score)
029  01B00                      LOAD sb, 00                    ; initial distance (score)
02A  2DB0A                      OUTPUT sb, qssd_lo             ; reset qssd_lo
02B  2DA0B                      OUTPUT sa, qssd_hi             ; reset qssd_hi
02C  01C80                      LOAD sc, 80                    ; starting helicopter position
02D  01D05                      LOAD sd, 05                    ; initialize (needed later)
02E  01EFF                      LOAD se, FF                    ; load 255 into sE (horizontal coordinate of block)
02F  01F62                      LOAD sf, 62                    ; load 108 into sF (vertical coordinate of block)
030  25000                      RETURN                         ; return from start subroutine

031        stay_in_gameover_state:
031  25000                      RETURN                         ; return from start subroutine

032                             ;;============================================================================
032                             ;; Play - Play Subroutine
032                             ;;============================================================================

032  0950F                play: INPUT s5, buttons              ; get center button values
033  2003C                      CALL map                       ; draw the map using map subroutine

034  0950F                      INPUT s5, buttons              ; get button values
035  1D510                      COMPARE s5, buttons_ct         ; check if center button is pressed
036  3017A                      CALL Z, move_heli_up           ; call subroutine that moves the helicopter up

037  2013C                      CALL draw_helicopter           ; draw the helicopter
038  2016E                      CALL random_block_location     ; determines a random place for the block (y direction only)
039  20141                      CALL draw_block                ; draw the block using draw_block subroutine
03A  2022C                      CALL check_collision           ; check if any collisions happen

03B  25000                      RETURN                         ; finished with play subroutine

03C                             ;;============================================================================
03C                             ;; Map - Draw Map Subroutine
03C                             ;;============================================================================

03C                        map:

03C                             ;;============================================================================
03C                             ;; Draws Top Line of Map (Line 1)
03C                             ;;============================================================================

03C                             ;; STARTING POINT
03C  01500                      LOAD s5, 00                    ; load 00 into s5
03D  2D500                      OUTPUT s5, stax                ; set desired stax
03E  0160F                      LOAD s6, 0F                    ; load 15 into s5
03F  2D601                      OUTPUT s6, stay                ; set desired stay

040                             ;; ENDING POINT
040  015FF                      LOAD s5, FF                    ; set s5 to 255
041  2D502                      OUTPUT s5, endx                ; set desired endx
042  2D603                      OUTPUT s6, endy                ; set desired endy
043  20226                      CALL draw_line                 ; draws a line (careful: this subroutine overwrites s5)

044                             ;;============================================================================
044                             ;; Draws Bottom Line of Map (Line 2)
044                             ;;============================================================================

044                             ;; STARTING POINT
044  01500                      LOAD s5, 00                    ; load 00 into s5
045  2D500                      OUTPUT s5, stax                ; set desired stax
046  016F0                      LOAD s6, F0                    ; load 240 into s5
047  2D601                      OUTPUT s6, stay                ; set desired stay

048                             ;; ENDING POINT
048  015FF                      LOAD s5, FF                    ; set s5 to 255
049  2D502                      OUTPUT s5, endx                ; set desired endx
04A  2D603                      OUTPUT s6, endy                ; set desired endy
04B  20226                      CALL draw_line                 ; draws a line (careful: this subroutine overwrites s5)
04C  25000                      RETURN                         ; leave map subroutine

04D                             ;;============================================================================
04D                             ;; Start Screen - Draw Start Screen Subroutine
04D                             ;;============================================================================

04D               start_screen:

04D                             ;;============================================================================
04D                             ;; Draws Decoration (Line 1a)
04D                             ;;============================================================================

04D                             ;; STARTING POINT
04D  01500                      LOAD s5, 00                    ; load 00 into s5
04E  2D500                      OUTPUT s5, stax                ; set desired stax
04F  0160A                      LOAD s6, 0A                    ; load 15 into s5
050  2D601                      OUTPUT s6, stay                ; set desired stay

051                             ;; ENDING POINT
051  015FF                      LOAD s5, FF                    ; set s5 to 255
052  2D502                      OUTPUT s5, endx                ; set desired endx
053  2D603                      OUTPUT s6, endy                ; set desired endy
054  20226                      CALL draw_line                 ; draws a line (careful: this subroutine overwrites s5)

055                             ;;===========================================================================
055                             ;; Draws Decoration (Line 2a)
055                             ;;============================================================================

055                             ;; STARTING POINT
055  01500                      LOAD s5, 00                    ; load 00 into s5
056  2D500                      OUTPUT s5, stax                ; set desired stax
057  0160C                      LOAD s6, 0C                    ; load 15 into s5
058  2D601                      OUTPUT s6, stay                ; set desired stay

059                             ;; ENDING POINT
059  015FF                      LOAD s5, FF                    ; set s5 to 255
05A  2D502                      OUTPUT s5, endx                ; set desired endx
05B  2D603                      OUTPUT s6, endy                ; set desired endy
05C  20226                      CALL draw_line                 ; draws a line (careful: this subroutine overwrites s5)

05D                             ;;===========================================================================
05D                             ;; Draws Decoration (Line 3a)
05D                             ;;============================================================================

05D                             ;; STARTING POINT
05D  01500                      LOAD s5, 00                    ; load 00 into s5
05E  2D500                      OUTPUT s5, stax                ; set desired stax
05F  0160E                      LOAD s6, 0E                    ; load 15 into s5
060  2D601                      OUTPUT s6, stay                ; set desired stay

061                             ;; ENDING POINT
061  015FF                      LOAD s5, FF                    ; set s5 to 255
062  2D502                      OUTPUT s5, endx                ; set desired endx
063  2D603                      OUTPUT s6, endy                ; set desired endy
064  20226                      CALL draw_line                 ; draws a line (careful: this subroutine overwrites s5)

065                             ;;============================================================================
065                             ;; Draws Decoration (Line 1b)
065                             ;;============================================================================

065                             ;; STARTING POINT
065  01500                      LOAD s5, 00                    ; load 00 into s5
066  2D500                      OUTPUT s5, stax                ; set desired stax
067  0167E                      LOAD s6, 7E                    ; load 10 into s5
068  2D601                      OUTPUT s6, stay                ; set desired stay

069                             ;; ENDING POINT
069  015FF                      LOAD s5, FF                    ; set s5 to 255
06A  2D502                      OUTPUT s5, endx                ; set desired endx
06B  2D603                      OUTPUT s6, endy                ; set desired endy
06C  20226                      CALL draw_line                 ; draws a line (careful: this subroutine overwrites s5)

06D                             ;;===========================================================================
06D                             ;; Draws Decoration (Line 2b)
06D                             ;;============================================================================

06D                             ;; STARTING POINT
06D  01500                      LOAD s5, 00                    ; load 00 into s5
06E  2D500                      OUTPUT s5, stax                ; set desired stax
06F  0168A                      LOAD s6, 8A                    ; load 15 into s5
070  2D601                      OUTPUT s6, stay                ; set desired stay

071                             ;; ENDING POINT
071  015FF                      LOAD s5, FF                    ; set s5 to 255
072  2D502                      OUTPUT s5, endx                ; set desired endx
073  2D603                      OUTPUT s6, endy                ; set desired endy
074  20226                      CALL draw_line                 ; draws a line (careful: this subroutine overwrites s5)

075                             ;;===========================================================================
075                             ;; Draws Decoration (Line 3b)
075                             ;;============================================================================

075                             ;; STARTING POINT
075  01500                      LOAD s5, 00                    ; load 00 into s5
076  2D500                      OUTPUT s5, stax                ; set desired stax
077  0168C                      LOAD s6, 8C                    ; load 15 into s5
078  2D601                      OUTPUT s6, stay                ; set desired stay

079                             ;; ENDING POINT
079  015FF                      LOAD s5, FF                    ; set s5 to 255
07A  2D502                      OUTPUT s5, endx                ; set desired endx
07B  2D603                      OUTPUT s6, endy                ; set desired endy
07C  20226                      CALL draw_line                 ; draws a line (careful: this subroutine overwrites s5)


07D                             ;;============================================================================
07D                             ;; Draws the letter H (Line 1)
07D                             ;;============================================================================

07D                             ;; STARTING POINT
07D  0150A                      LOAD s5, 0A                    ; load 10 into s5
07E  2D500                      OUTPUT s5, stax                ; set desired stax
07F  0161E                      LOAD s6, 1E                    ; load 30 into s6
080  2D601                      OUTPUT s6, stay                ; set desired stay

081                             ;; ENDING POINT
081  2D502                      OUTPUT s5, endx                ; set desired endx
082  0163C                      LOAD s6, 3C                    ; load 60 into s6
083  2D603                      OUTPUT s6, endy                ; set desired endy
084  20226                      CALL draw_line                 ; draws a line (careful: this subroutine overwrites s5)

085                             ;;============================================================================
085                             ;; Draws the letter H (Line 2)
085                             ;;============================================================================

085                             ;; STARTING POINT
085  0150A                      LOAD s5, 0A                    ; load 10 into s5
086  2D500                      OUTPUT s5, stax                ; set desired stax
087  0162D                      LOAD s6, 2D                    ; load 45 into s6
088  2D601                      OUTPUT s6, stay                ; set desired stay

089                             ;; ENDING POINT
089  0151E                      LOAD s5, 1E                    ; load 30 into s5
08A  2D502                      OUTPUT s5, endx                ; set desired endx
08B  2D603                      OUTPUT s6, endy                ; set desired endy
08C  20226                      CALL draw_line                 ; draws a line (careful: this subroutine overwrites s5)

08D                             ;;============================================================================
08D                             ;; Draws the letter H (Line 3)
08D                             ;;============================================================================

08D                             ;; STARTING POINT
08D  0151E                      LOAD s5, 1E                    ; load 30 into s5
08E  2D500                      OUTPUT s5, stax                ; set desired stax
08F  0161E                      LOAD s6, 1E                    ; load 30 into s6
090  2D601                      OUTPUT s6, stay                ; set desired stay

091                             ;; ENDING POINT
091  2D502                      OUTPUT s5, endx                ; set desired endx
092  0163C                      LOAD s6, 3C                    ; load 60 into s6
093  2D603                      OUTPUT s6, endy                ; set desired endy
094  20226                      CALL draw_line                 ; draws a line (careful: this subroutine overwrites s5)

095                             ;;============================================================================
095                             ;; Draws the letter E (Line 1)
095                             ;;============================================================================

095                             ;; STARTING POINT
095  01528                      LOAD s5, 28                    ; load 40 into s5
096  2D500                      OUTPUT s5, stax                ; set desired stax
097  0161E                      LOAD s6, 1E                    ; load 30 into s6
098  2D601                      OUTPUT s6, stay                ; set desired stay

099                             ;; ENDING POINT
099  2D502                      OUTPUT s5, endx                ; set desired endx
09A  0163C                      LOAD s6, 3C                    ; load 60 into s6
09B  2D603                      OUTPUT s6, endy                ; set desired endy
09C  20226                      CALL draw_line                 ; draws a line (careful: this subroutine overwrites s5)

09D                             ;;============================================================================
09D                             ;; Draws the letter E (Line 2)
09D                             ;;============================================================================

09D                             ;; STARTING POINT
09D  01528                      LOAD s5, 28                    ; load 40 into s5
09E  2D500                      OUTPUT s5, stax                ; set desired stax
09F  0161E                      LOAD s6, 1E                    ; load 30 into s6
0A0  2D601                      OUTPUT s6, stay                ; set desired stay

0A1                             ;; ENDING POINT
0A1  0153C                      LOAD s5, 3C                    ; load 60 into s5
0A2  2D502                      OUTPUT s5, endx                ; set desired endx
0A3  2D603                      OUTPUT s6, endy                ; set desired endy
0A4  20226                      CALL draw_line                 ; draws a line (careful: this subroutine overwrites s5)

0A5                             ;;============================================================================
0A5                             ;; Draws the letter E (Line 3)
0A5                             ;;============================================================================

0A5                             ;; STARTING POINT
0A5  01528                      LOAD s5, 28                    ; load 40 into s5
0A6  2D500                      OUTPUT s5, stax                ; set desired stax
0A7  0162D                      LOAD s6, 2D                    ; load 45 into s6
0A8  2D601                      OUTPUT s6, stay                ; set desired stay

0A9                             ;; ENDING POINT
0A9  0153C                      LOAD s5, 3C                    ; load 60 into s5
0AA  2D502                      OUTPUT s5, endx                ; set desired endx
0AB  2D603                      OUTPUT s6, endy                ; set desired endy
0AC  20226                      CALL draw_line                 ; draws a line (careful: this subroutine overwrites s5)

0AD                             ;;============================================================================
0AD                             ;; Draws the letter E (Line 3)
0AD                             ;;============================================================================

0AD                             ;; STARTING POINT
0AD  01528                      LOAD s5, 28                    ; load 40 into s5
0AE  2D500                      OUTPUT s5, stax                ; set desired stax
0AF  0163C                      LOAD s6, 3C                    ; load 45 into s6
0B0  2D601                      OUTPUT s6, stay                ; set desired stay

0B1                             ;; ENDING POINT
0B1  0153C                      LOAD s5, 3C                    ; load 60 into s5
0B2  2D502                      OUTPUT s5, endx                ; set desired endx
0B3  2D603                      OUTPUT s6, endy                ; set desired endy
0B4  20226                      CALL draw_line                 ; draws a line (careful: this subroutine overwrites s5)

0B5                             ;;============================================================================
0B5                             ;; Draws the letter L (Line 1)
0B5                             ;;============================================================================

0B5                             ;; STARTING POINT
0B5  01546                      LOAD s5, 46                    ; load 70 into s5
0B6  2D500                      OUTPUT s5, stax                ; set desired stax
0B7  0161E                      LOAD s6, 1E                    ; load 30 into s6
0B8  2D601                      OUTPUT s6, stay                ; set desired stay

0B9                             ;; ENDING POINT
0B9  2D502                      OUTPUT s5, endx                ; set desired endx
0BA  0163C                      LOAD s6, 3C                    ; load 60 into s6
0BB  2D603                      OUTPUT s6, endy                ; set desired endy
0BC  20226                      CALL draw_line                 ; draws a line (careful: this subroutine overwrites s5)

0BD                             ;;============================================================================
0BD                             ;; Draws the letter L (Line 2)
0BD                             ;;============================================================================

0BD                             ;; STARTING POINT
0BD  01546                      LOAD s5, 46                    ; load 70 into s5
0BE  2D500                      OUTPUT s5, stax                ; set desired stax
0BF  0163C                      LOAD s6, 3C                    ; load 45 into s6
0C0  2D601                      OUTPUT s6, stay                ; set desired stay

0C1                             ;; ENDING POINT
0C1  0155A                      LOAD s5, 5A                    ; load 90 into s5
0C2  2D502                      OUTPUT s5, endx                ; set desired endx
0C3  2D603                      OUTPUT s6, endy                ; set desired endy
0C4  20226                      CALL draw_line                 ; draws a line (careful: this subroutine overwrites s5)

0C5                             ;;============================================================================
0C5                             ;; Draws the letter I (Line 1)
0C5                             ;;============================================================================

0C5                             ;; STARTING POINT
0C5  01564                      LOAD s5, 64                    ; load 70 into s5
0C6  2D500                      OUTPUT s5, stax                ; set desired stax
0C7  0161E                      LOAD s6, 1E                    ; load 30 into s6
0C8  2D601                      OUTPUT s6, stay                ; set desired stay

0C9                             ;; ENDING POINT
0C9  2D502                      OUTPUT s5, endx                ; set desired endx
0CA  0163C                      LOAD s6, 3C                    ; load 60 into s6
0CB  2D603                      OUTPUT s6, endy                ; set desired endy
0CC  20226                      CALL draw_line                 ; draws a line (careful: this subroutine overwrites s5)

0CD                             ;;============================================================================
0CD                             ;; Draws the letter C (Line 1)
0CD                             ;;============================================================================

0CD                             ;; STARTING POINT
0CD  01582                      LOAD s5, 82                    ; load 130 into s5
0CE  2D500                      OUTPUT s5, stax                ; set desired stax
0CF  0161E                      LOAD s6, 1E                    ; load 45 into s6
0D0  2D601                      OUTPUT s6, stay                ; set desired stay

0D1                             ;; ENDING POINT
0D1  01573                      LOAD s5, 73                    ; load 115 into s5
0D2  2D502                      OUTPUT s5, endx                ; set desired endx
0D3  2D603                      OUTPUT s6, endy                ; set desired endy
0D4  20226                      CALL draw_line                 ; draws a line (careful: this subroutine overwrites s5)

0D5                             ;;============================================================================
0D5                             ;; Draws the letter C (Line 2)
0D5                             ;;============================================================================

0D5                             ;; STARTING POINT
0D5  01573                      LOAD s5, 73                    ; load 115 into s5
0D6  2D500                      OUTPUT s5, stax                ; set desired stax
0D7  0161E                      LOAD s6, 1E                    ; load 45 into s6
0D8  2D601                      OUTPUT s6, stay                ; set desired stay

0D9                             ;; ENDING POINT
0D9  0156E                      LOAD s5, 6E                    ; load 110 into s5
0DA  2D502                      OUTPUT s5, endx                ; set desired endx
0DB  01623                      LOAD s6, 23                    ; load 35 into s6
0DC  2D603                      OUTPUT s6, endy                ; set desired endy
0DD  20226                      CALL draw_line                 ; draws a line (careful: this subroutine overwrites s5)

0DE                             ;;============================================================================
0DE                             ;; Draws the letter C (Line 3)
0DE                             ;;============================================================================

0DE                             ;; STARTING POINT
0DE  0156E                      LOAD s5, 6E                    ; load 110 into s5
0DF  2D500                      OUTPUT s5, stax                ; set desired stax
0E0  01623                      LOAD s6, 23                    ; load 35 into s6
0E1  2D601                      OUTPUT s6, stay                ; set desired stay

0E2                             ;; ENDING POINT
0E2  2D502                      OUTPUT s5, endx                ; set desired endx
0E3  01637                      LOAD s6, 37                    ; load 55 into s6
0E4  2D603                      OUTPUT s6, endy                ; set desired endy
0E5  20226                      CALL draw_line                 ; draws a line (careful: this subroutine overwrites s5)

0E6                             ;;============================================================================
0E6                             ;; Draws the letter C (Line 4)
0E6                             ;;============================================================================

0E6                             ;; STARTING POINT
0E6  0156E                      LOAD s5, 6E                    ; load 110 into s5
0E7  2D500                      OUTPUT s5, stax                ; set desired stax
0E8  01637                      LOAD s6, 37                    ; load 55 into s6
0E9  2D601                      OUTPUT s6, stay                ; set desired stay

0EA                             ;; ENDING POINT
0EA  01573                      LOAD s5, 73                    ; load 130 into s5
0EB  2D502                      OUTPUT s5, endx                ; set desired endx
0EC  0163B                      LOAD s6, 3B                    ; load 44 into s6
0ED  2D603                      OUTPUT s6, endy                ; set desired endy
0EE  20226                      CALL draw_line                 ; draws a line (careful: this subroutine overwrites s5)

0EF                             ;;============================================================================
0EF                             ;; Draws the letter C (Line 5)
0EF                             ;;============================================================================

0EF                             ;; STARTING POINT
0EF  01582                      LOAD s5, 82                    ; load 130 into s5
0F0  2D500                      OUTPUT s5, stax                ; set desired stax
0F1  0163C                      LOAD s6, 3C                    ; load 45 into s6
0F2  2D601                      OUTPUT s6, stay                ; set desired stay

0F3                             ;; ENDING POINT
0F3  01573                      LOAD s5, 73                    ; load 115 into s5
0F4  2D502                      OUTPUT s5, endx                ; set desired endx
0F5  2D603                      OUTPUT s6, endy                ; set desired endy
0F6  20226                      CALL draw_line                 ; draws a line (careful: this subroutine overwrites s5)

0F7                             ;;============================================================================
0F7                             ;; Draws the letter O (Line 1)
0F7                             ;;============================================================================

0F7                             ;; STARTING POINT
0F7  01591                      LOAD s5, 91                    ; load 145 into s5
0F8  2D500                      OUTPUT s5, stax                ; set desired stax
0F9  0161E                      LOAD s6, 1E                    ; load 30 into s6
0FA  2D601                      OUTPUT s6, stay                ; set desired stay

0FB                             ;; ENDING POINT
0FB  0159B                      LOAD s5, 9B                    ; load 155 into s5
0FC  2D502                      OUTPUT s5, endx                ; set desired endx
0FD  2D603                      OUTPUT s6, endy                ; set desired endy
0FE  20226                      CALL draw_line                 ; draws a line (careful: this subroutine overwrites s5)

0FF                             ;;============================================================================
0FF                             ;; Draws the letter O (Line 2)
0FF                             ;;============================================================================

0FF                             ;; STARTING POINT
0FF  01591                      LOAD s5, 91                    ; load 145 into s5
100  2D500                      OUTPUT s5, stax                ; set desired stax
101  0161E                      LOAD s6, 1E                    ; load 45 into s6
102  2D601                      OUTPUT s6, stay                ; set desired stay

103                             ;; ENDING POINT
103  0158C                      LOAD s5, 8C                    ; load 110 into s5
104  2D502                      OUTPUT s5, endx                ; set desired endx
105  0161E                      LOAD s6, 1E                    ; load 35 into s6
106  2D603                      OUTPUT s6, endy                ; set desired endy
107  20226                      CALL draw_line                 ; draws a line (careful: this subroutine overwrites s5)

108                             ;;============================================================================
108                             ;; Draws the letter O (Line 3)
108                             ;;============================================================================

108                             ;; STARTING POINT
108  0158C                      LOAD s5, 8C                    ; load 140 into s5
109  2D500                      OUTPUT s5, stax                ; set desired stax
10A  0161E                      LOAD s6, 1E                    ; load 30 into s6
10B  2D601                      OUTPUT s6, stay                ; set desired stay

10C                             ;; ENDING POINT
10C  2D502                      OUTPUT s5, endx                ; set desired endx
10D  0163C                      LOAD s6, 3C                    ; load 60 into s6
10E  2D603                      OUTPUT s6, endy                ; set desired endy
10F  20226                      CALL draw_line                 ; draws a line (careful: this subroutine overwrites s5)

110                             ;;============================================================================
110                             ;; Draws the letter O (Line 4)
110                             ;;============================================================================

110                             ;; STARTING POINT
110  0158C                      LOAD s5, 8C                    ; load 110 into s5
111  2D500                      OUTPUT s5, stax                ; set desired stax
112  0163C                      LOAD s6, 3C                    ; load 55 into s6
113  2D601                      OUTPUT s6, stay                ; set desired stay

114                             ;; ENDING POINT
114  01591                      LOAD s5, 91                    ; load 145 into s5
115  2D502                      OUTPUT s5, endx                ; set desired endx
116  0163C                      LOAD s6, 3C                    ; load 30 into s6
117  2D603                      OUTPUT s6, endy                ; set desired endy
118  20226                      CALL draw_line                 ; draws a line (careful: this subroutine overwrites s5)

119                             ;;============================================================================
119                             ;; Draws the letter O (Line 5)
119                             ;;============================================================================

119                             ;; STARTING POINT
119  01591                      LOAD s5, 91                    ; load 145 into s5
11A  2D500                      OUTPUT s5, stax                ; set desired stax
11B  0163C                      LOAD s6, 3C                    ; load 30 into s6
11C  2D601                      OUTPUT s6, stay                ; set desired stay

11D                             ;; ENDING POINT
11D  0159B                      LOAD s5, 9B                    ; load 155 into s5
11E  2D502                      OUTPUT s5, endx                ; set desired endx
11F  2D603                      OUTPUT s6, endy                ; set desired endy
120  20226                      CALL draw_line                 ; draws a line (careful: this subroutine overwrites s5)

121                             ;;============================================================================
121                             ;; Draws the letter O (Line 6)
121                             ;;============================================================================

121                             ;; STARTING POINT
121  0159B                      LOAD s5, 9B                    ; load 110 into s5
122  2D500                      OUTPUT s5, stax                ; set desired stax
123  0163C                      LOAD s6, 3C                    ; load 55 into s6
124  2D601                      OUTPUT s6, stay                ; set desired stay

125                             ;; ENDING POINT
125  015A0                      LOAD s5, A0                    ; load 160 into s5
126  2D502                      OUTPUT s5, endx                ; set desired endx
127  0163C                      LOAD s6, 3C                    ; load 30 into s6
128  2D603                      OUTPUT s6, endy                ; set desired endy
129  20226                      CALL draw_line                 ; draws a line (careful: this subroutine overwrites s5)

12A                             ;;============================================================================
12A                             ;; Draws the letter O (Line 7)
12A                             ;;============================================================================

12A                             ;; STARTING POINT
12A  015A0                      LOAD s5, A0                    ; load 160 into s5
12B  2D500                      OUTPUT s5, stax                ; set desired stax
12C  0161E                      LOAD s6, 1E                    ; load 30 into s6
12D  2D601                      OUTPUT s6, stay                ; set desired stay

12E                             ;; ENDING POINT
12E  2D502                      OUTPUT s5, endx                ; set desired endx
12F  0163C                      LOAD s6, 3C                    ; load 60 into s6
130  2D603                      OUTPUT s6, endy                ; set desired endy
131  20226                      CALL draw_line                 ; draws a line (careful: this subroutine overwrites s5)

132                             ;;============================================================================
132                             ;; Draws the letter O (Line 8)
132                             ;;============================================================================

132                             ;; STARTING POINT
132  015A0                      LOAD s5, A0                    ; load 160 into s5
133  2D500                      OUTPUT s5, stax                ; set desired stax
134  0161E                      LOAD s6, 1E                    ; load 30 into s6
135  2D601                      OUTPUT s6, stay                ; set desired stay

136                             ;; ENDING POINT
136  0159B                      LOAD s5, 9B                    ; load 155 into s5
137  2D502                      OUTPUT s5, endx                ; set desired endx
138  0161E                      LOAD s6, 1E                    ; load 30 into s6
139  2D603                      OUTPUT s6, endy                ; set desired endy
13A  20226                      CALL draw_line                 ; draws a line (careful: this subroutine overwrites s5)



13B  25000                      RETURN                         ; leave start_screen subroutine

13C                             ;;============================================================================
13C                             ;; Draw Helicopter - Draw Helicopter Subroutine
13C                             ;;============================================================================

13C            draw_helicopter:

13C  20180                      CALL draw_helicopter_cockpit   ; call the subroutine to draw the cockpit
13D  201F4                      CALL draw_helicopter_blades    ; call the subroutine to draw the blades
13E  201BF                      CALL draw_helicopter_tail      ; call the subroutine to draw the tail
13F  20208                      CALL draw_helicopter_smoke     ; call the subroutine to draw the smoke

140  25000                      RETURN                         ; go back from drawing helicopter


141                             ;;============================================================================
141                             ;; Draw Block - Draw Block Subroutine
141                             ;;============================================================================

141                 draw_block:

141                             ;;============================================================================
141                             ;; Draws Top Line of Block
141                             ;;============================================================================

141  005E0                      LOAD s5, se                    ; load 255 into s5 (horizontal center of block)
142  016E1                      LOAD s6, E1                    ; load 245 into s6
143  1C650                      COMPARE s6, s5                 ; checking if the block is done "peaking out" from the right (initial compare: 245 ? 255)
144  3A14A                      JUMP C, right_edge             ; jump to right_edge
145  0160A                      LOAD s6, 0A                    ; load 10 into s6
146  1C560                      COMPARE s5, s6                 ; comparing s5 and s6
147  3A14E                      JUMP C, left_edge              ; jump to left_edge
148  3214E                      JUMP Z, left_edge              ; jump to left_edge
149  22152                      JUMP in_middle                 ; jump to in_middle

14A  2D500          right_edge: OUTPUT s5, stax                ; set desired stax
14B  1950A                      SUB s5, 0A                     ;
14C  2D502                      OUTPUT s5, endx                ; set desired stax
14D  22155                      JUMP finished1                 ; jump to draw_ys

14E  2D500           left_edge: OUTPUT s5, stax                ; set desired stax
14F  01600                      LOAD s6, 00                    ; put 255 into s5
150  2D602                      OUTPUT s6, endx                ; set desired stax
151  22155                      JUMP finished1                 ; jump to draw_ys

152                  in_middle:
152  2D500                      OUTPUT s5, stax                ; set desired stax
153  1950A                      SUB s5, 0A                     ; subtract the width of block to get the other x coordinate
154  2D502                      OUTPUT s5, endx                ; set desired endx

155  2DF01           finished1: OUTPUT sf, stay                ; set desired stay
156  2DF03                      OUTPUT sf, endy                ; set desired endy
157  20226                      CALL draw_line                 ; draws a line (careful: this subroutine overwrites s5)

158                             ;;============================================================================
158                             ;; Draws Bottom Line of Block
158                             ;;============================================================================

158  005F0                      LOAD s5, sf                    ; load sF into s5
159  1153C                      ADD s5, 3C                     ; add 40 to s5
15A  2D501                      OUTPUT s5, stay                ; set desired stay
15B  2D503                      OUTPUT s5, endy                ; set desired endy
15C  20226                      CALL draw_line                 ; draws a line (careful: this subroutine overwrites s5)

15D                             ;;============================================================================
15D                             ;; Draws Right Vertical Line of Block
15D                             ;;============================================================================

15D  2DE00                      OUTPUT se, stax                ; set desired stax
15E  2DE02                      OUTPUT se, endx                ; set desired endx
15F  2DF01                      OUTPUT sf, stay                ; set desired stay
160  005F0                      LOAD s5, sf                    ; load sF into s5
161  1153C                      ADD s5, 3C                     ; add 60 to y coordinate
162  2D503                      OUTPUT s5, endy                ; set desired endy
163  20226                      CALL draw_line                 ; draws a line (careful: this subroutine overwrites s5)

164                             ;;============================================================================
164                             ;; Draws Left Vertical Line of Block
164                             ;;============================================================================

164  005E0                      LOAD s5, se                    ; load sE into s5
165  1950A                      SUB s5, 0A                     ; subtract 10 from s5
166  2D500                      OUTPUT s5, stax                ; set desired stax
167  2D502                      OUTPUT s5, endx                ; set desired endx
168  2DF01                      OUTPUT sf, stay                ; set desired stay
169  005F0                      LOAD s5, sf                    ; load sF into s5
16A  1153C                      ADD s5, 3C                     ; add 60 to y coordinate
16B  2D503                      OUTPUT s5, endy                ; set desired endy
16C  20226                      CALL draw_line                 ; draws a line (careful: this subroutine overwrites s5)
16D  25000                      RETURN                         ; finished with draw_block subroutine



16E                             ;;============================================================================
16E                             ;; Random Block Location - Random Block Location Subroutine
16E                             ;;============================================================================

16E        random_block_location:
16E  1DE00                      COMPARE se, 00                 ; is it time to create a new variable?
16F  32172                      JUMP Z, new_random             ; jump to new random creator
170  36171                      JUMP NZ, skip_everything       ; goes back

171  25000     skip_everything: RETURN                         ; returns back (no new rand. number)

172  09507          new_random: INPUT s5, prng                 ; create to new random number
173  1D50F                      COMPARE s5, 0F                 ; check if it's in range
174  3E176                      JUMP NC, check_other_bound_range ; check lower bound of map
175  3A172                      JUMP C, new_random             ; get new variable

176        check_other_bound_range:
176  1D5B4                      COMPARE s5, B4                 ; compare s5 to 180
177  3E172                      JUMP NC, new_random            ; get a new random number
178  00F50                      LOAD sf, s5                    ; a new y coordinate generated
179  25000                      RETURN                         ; get out of subroutine

17A                             ;;============================================================================
17A                             ;; Move Helicopter Up - Move Helicopter Up Subroutine
17A                             ;;============================================================================

17A               move_heli_up:
17A  1DC15                      COMPARE sc, 15                 ; check if the helicopter is colliding with top wall
17B  3617E                      JUMP NZ, decrement             ; if not colliding, then move helicopter appropriately
17C  3E17E                      JUMP NC, decrement             ; necessary as well
17D  25000                      RETURN                         ; do not increment if colliding with top wall
17E                  decrement:
17E  19C02                      SUB sc, 02                     ; move the helicopter up
17F  25000                      RETURN                         ; get out of subroutine

180                             ;;============================================================================
180                             ;; Draw Helicopter Cockpit - Draw Helicopter Cockpit Subroutine
180                             ;;============================================================================

180        draw_helicopter_cockpit:

180                             ;;============================================================================
180                             ;; Draws Cockpit of Helicopter (Line 1a)
180                             ;;============================================================================

180                             ;; STARTING POINT
180  01564                      LOAD s5, 64                    ; load 100 into s5
181  2D500                      OUTPUT s5, stax                ; set desired stax
182  006C0                      LOAD s6, sc                    ; load sC into s5
183  2D601                      OUTPUT s6, stay                ; set desired stay

184                             ;; ENDING POINT
184  19501                      SUB s5, 01                     ; subtract 7 from s5
185  2D502                      OUTPUT s5, endx                ; set desired endx
186  19603                      SUB s6, 03                     ; go up by 5
187  2D603                      OUTPUT s6, endy                ; set desired endy
188  20226                      CALL draw_line                 ; draws a line (careful: this subroutine overwrites s5)

189                             ;;============================================================================
189                             ;; Draws Cockpit of Helicopter (Line 1b)
189                             ;;============================================================================

189                             ;; STARTING POINT
189  01564                      LOAD s5, 64                    ; load 100 into s5
18A  19501                      SUB s5, 01                     ; subtract 7 from s5
18B  2D500                      OUTPUT s5, stax                ; set desired stax
18C  006C0                      LOAD s6, sc                    ; load sC into s5
18D  19603                      SUB s6, 03                     ; go up by 5
18E  2D601                      OUTPUT s6, stay                ; set desired stay

18F                             ;; ENDING POINT
18F  19504                      SUB s5, 04                     ; subtract 7 from s5
190  2D502                      OUTPUT s5, endx                ; set desired endx
191  19602                      SUB s6, 02                     ; go up by 5
192  2D603                      OUTPUT s6, endy                ; set desired endy
193  20226                      CALL draw_line                 ; draws a line (careful: this subroutine overwrites s5)


194                             ;;============================================================================
194                             ;; Draws Cockpit of Helicopter (Line 2a)
194                             ;;============================================================================

194                             ;; STARTING POINT
194  01564                      LOAD s5, 64                    ; load 100 into s5
195  2D500                      OUTPUT s5, stax                ; set desired stax
196  006C0                      LOAD s6, sc                    ; load sC into s5
197  2D601                      OUTPUT s6, stay                ; set desired stay

198                             ;; ENDING POINT
198  19501                      SUB s5, 01                     ; subtract 1 from s5
199  2D502                      OUTPUT s5, endx                ; set desired endx
19A  11603                      ADD s6, 03                     ; go down by 3
19B  2D603                      OUTPUT s6, endy                ; set desired endy
19C  20226                      CALL draw_line                 ; draws a line (careful: this subroutine overwrites s5)

19D                             ;;============================================================================
19D                             ;; Draws Cockpit of Helicopter (Line 2b)
19D                             ;;============================================================================

19D                             ;; STARTING POINT
19D  01564                      LOAD s5, 64                    ; load 100 into s5
19E  19501                      SUB s5, 01                     ; subtract 1 from s5
19F  2D500                      OUTPUT s5, stax                ; set desired stax
1A0  006C0                      LOAD s6, sc                    ; load sC into s5
1A1  11603                      ADD s6, 03                     ; go down by 3
1A2  2D601                      OUTPUT s6, stay                ; set desired stay

1A3                             ;; ENDING POINT
1A3  19504                      SUB s5, 04                     ; subtract 7 from s5
1A4  2D502                      OUTPUT s5, endx                ; set desired endx
1A5  11602                      ADD s6, 02                     ; go down by 5
1A6  2D603                      OUTPUT s6, endy                ; set desired endy
1A7  20226                      CALL draw_line                 ; draws a line (careful: this subroutine overwrites s5)

1A8                             ;;============================================================================
1A8                             ;; Draws Cockpit of Helicopter (Line 3)
1A8                             ;;============================================================================

1A8                             ;; STARTING POINT
1A8  01564                      LOAD s5, 64                    ; load 100 into s5
1A9  19505                      SUB s5, 05                     ; load 7 into s5
1AA  2D500                      OUTPUT s5, stax                ; set desired stax
1AB  006C0                      LOAD s6, sc                    ; load sC into s5
1AC  19605                      SUB s6, 05                     ; go up by 5 using subtraction
1AD  2D601                      OUTPUT s6, stay                ; set desired stay

1AE                             ;; ENDING POINT
1AE  19507                      SUB s5, 07                     ; subtract 5 from s5
1AF  2D502                      OUTPUT s5, endx                ; set desired endx
1B0  11605                      ADD s6, 05                     ; go down by 5
1B1  2D603                      OUTPUT s6, endy                ; set desired endy
1B2  20226                      CALL draw_line                 ; draws a line (careful: this subroutine overwrites s5)

1B3                             ;;============================================================================
1B3                             ;; Draws Cockpit of Helicopter (Line 4)
1B3                             ;;============================================================================

1B3                             ;; STARTING POINT
1B3  01564                      LOAD s5, 64                    ; load 100 into s5
1B4  19505                      SUB s5, 05                     ; load 7 into s5
1B5  2D500                      OUTPUT s5, stax                ; set desired stax
1B6  006C0                      LOAD s6, sc                    ; load sC into s5
1B7  11605                      ADD s6, 05                     ; go down by 5 using addition
1B8  2D601                      OUTPUT s6, stay                ; set desired stay

1B9                             ;; ENDING POINT
1B9  19507                      SUB s5, 07                     ; subtract 5 from s5
1BA  2D502                      OUTPUT s5, endx                ; set desired endx
1BB  19605                      SUB s6, 05                     ; go back up by 5
1BC  2D603                      OUTPUT s6, endy                ; set desired endy
1BD  20226                      CALL draw_line                 ; draws a line (careful: this subroutine overwrites s5)

1BE  25000                      RETURN                         ; go back from subroutine

1BF                             ;;============================================================================
1BF                             ;; Draw Helicopter Tail - Draw Helicopter Tail Subroutine
1BF                             ;;============================================================================

1BF        draw_helicopter_tail:

1BF                             ;;============================================================================
1BF                             ;; Draws Tail of Helicopter (Line 1)
1BF                             ;;============================================================================

1BF                             ;; STARTING POINT
1BF  01564                      LOAD s5, 64                    ; load 100 into s5
1C0  1950A                      SUB s5, 0A                     ; subtract 0xA from s5
1C1  2D500                      OUTPUT s5, stax                ; set desired stax
1C2  006C0                      LOAD s6, sc                    ; load sC into s5
1C3  19602                      SUB s6, 02                     ; subtract 2 from s6
1C4  2D601                      OUTPUT s6, stay                ; set desired stay

1C5                             ;; ENDING POINT
1C5  19507                      SUB s5, 07                     ; subtract 7 from s5
1C6  2D502                      OUTPUT s5, endx                ; set desired endx
1C7  2D603                      OUTPUT s6, endy                ; set desired endy
1C8  20226                      CALL draw_line                 ; draws a line (careful: this subroutine overwrites s5)

1C9                             ;;============================================================================
1C9                             ;; Draws Tail of Helicopter (Line 2)
1C9                             ;;============================================================================

1C9                             ;; STARTING POINT
1C9  01564                      LOAD s5, 64                    ; load 100 into s5
1CA  1950C                      SUB s5, 0C                     ; subtract 0xC from s5
1CB  2D500                      OUTPUT s5, stax                ; set desired stax
1CC  006C0                      LOAD s6, sc                    ; load sC into s5
1CD  2D601                      OUTPUT s6, stay                ; set desired stay

1CE                             ;; ENDING POINT
1CE  19508                      SUB s5, 08                     ; subtract 7 from s5
1CF  2D502                      OUTPUT s5, endx                ; set desired endx
1D0  2D603                      OUTPUT s6, endy                ; set desired endy
1D1  20226                      CALL draw_line                 ; draws a line (careful: this subroutine overwrites s5)

1D2                             ;;============================================================================
1D2                             ;; Draws Tail of Helicopter (Line 3)
1D2                             ;;============================================================================

1D2                             ;; STARTING POINT
1D2  01564                      LOAD s5, 64                    ; load 100 into s5
1D3  1950A                      SUB s5, 0A                     ; subtract 0x0A from s5
1D4  19508                      SUB s5, 08                     ; subtract 0x10 from s5
1D5  2D500                      OUTPUT s5, stax                ; set desired stax
1D6  006C0                      LOAD s6, sc                    ; load sC into s5
1D7  19602                      SUB s6, 02                     ; subtract 2 from s6
1D8  2D601                      OUTPUT s6, stay                ; set desired stay

1D9                             ;; ENDING POINT
1D9  19502                      SUB s5, 02                     ; subtract 2 from s5
1DA  2D502                      OUTPUT s5, endx                ; set desired endx
1DB  19602                      SUB s6, 02                     ; subtract 2 from s6
1DC  2D603                      OUTPUT s6, endy                ; set desired endy
1DD  20226                      CALL draw_line                 ; draws a line (careful: this subroutine overwrites s5)

1DE                             ;;============================================================================
1DE                             ;; Draws Tail of Helicopter (Line 4)
1DE                             ;;============================================================================

1DE                             ;; STARTING POINT
1DE  01564                      LOAD s5, 64                    ; load 100 into s5
1DF  1950C                      SUB s5, 0C                     ; subtract 0x0C from s5
1E0  19509                      SUB s5, 09                     ; subtract 0x09 from s5
1E1  2D500                      OUTPUT s5, stax                ; set desired stax
1E2  006C0                      LOAD s6, sc                    ; load sC into s5
1E3  2D601                      OUTPUT s6, stay                ; set desired stay

1E4                             ;; ENDING POINT
1E4                             ;SUB s5, 01                          ; subtract 2 from s5
1E4  2D502                      OUTPUT s5, endx                ; set desired endx
1E5  11601                      ADD s6, 01                     ; add 1 to s6
1E6  2D603                      OUTPUT s6, endy                ; set desired endy
1E7  20226                      CALL draw_line                 ; draws a line (careful: this subroutine overwrites s5)

1E8                             ;;============================================================================
1E8                             ;; Draws Tail of Helicopter (Line 5)
1E8                             ;;============================================================================

1E8                             ;; STARTING POINT
1E8  01564                      LOAD s5, 64                    ; load 100 into s5
1E9  1950A                      SUB s5, 0A                     ; subtract 0x0A from s5
1EA  1950A                      SUB s5, 0A                     ; subtract 0x0A from s5
1EB  2D500                      OUTPUT s5, stax                ; set desired stax
1EC  006C0                      LOAD s6, sc                    ; load sC into s5
1ED  19604                      SUB s6, 04                     ; subtract 4 from s6
1EE  2D601                      OUTPUT s6, stay                ; set desired stay

1EF                             ;; ENDING POINT
1EF  2D502                      OUTPUT s5, endx                ; set desired endx
1F0  11605                      ADD s6, 05                     ; add 1 to s6
1F1  2D603                      OUTPUT s6, endy                ; set desired endy
1F2  20226                      CALL draw_line                 ; draws a line (careful: this subroutine overwrites s5)

1F3  25000                      RETURN                         ; go back from subroutine

1F4                             ;;============================================================================
1F4                             ;; Draw Helicopter Blades - Draw Helicopter Blades Subroutine
1F4                             ;;============================================================================

1F4        draw_helicopter_blades:

1F4                             ;;============================================================================
1F4                             ;; Draws Blades of Helicopter (Line 1)
1F4                             ;;============================================================================

1F4                             ;; STARTING POINT
1F4  01564                      LOAD s5, 64                    ; load 100 into s5
1F5  19505                      SUB s5, 05                     ; subtract 0xA from s5
1F6  2D500                      OUTPUT s5, stax                ; set desired stax
1F7  006C0                      LOAD s6, sc                    ; load sC into s5
1F8  19605                      SUB s6, 05                     ; subtract 2 from s6
1F9  2D601                      OUTPUT s6, stay                ; set desired stay

1FA                             ;; ENDING POINT
1FA  2D502                      OUTPUT s5, endx                ; set desired endx
1FB  19602                      SUB s6, 02                     ; subtract 2 from s6
1FC  2D603                      OUTPUT s6, endy                ; set desired endy
1FD  20226                      CALL draw_line                 ; draws a line (careful: this subroutine overwrites s5)

1FE                             ;;============================================================================
1FE                             ;; Draws Blades of Helicopter (Line 2)
1FE                             ;;============================================================================

1FE                             ;; STARTING POINT
1FE  01564                      LOAD s5, 64                    ; load 100 into s5
1FF  2D500                      OUTPUT s5, stax                ; set desired stax
200  006C0                      LOAD s6, sc                    ; load sC into s5
201  19607                      SUB s6, 07                     ; subtract 2 from s6
202  2D601                      OUTPUT s6, stay                ; set desired stay

203                             ;; ENDING POINT
203  1950A                      SUB s5, 0A                     ; subtract 10 from s5
204  2D502                      OUTPUT s5, endx                ; set desired endx
205  2D603                      OUTPUT s6, endy                ; set desired endy
206  20226                      CALL draw_line                 ; draws a line (careful: this subroutine overwrites s5)

207  25000                      RETURN                         ; go back from subroutine

208                             ;;============================================================================
208                             ;; Draw Helicopter Smoke - Draw Helicopter Smoke Subroutine
208                             ;;============================================================================

208        draw_helicopter_smoke:

208                             ;;============================================================================
208                             ;; Draws Smoke of Helicopter (Line 1)
208                             ;;============================================================================

208                             ;; Start Point
208  01564                      LOAD s5, 64                    ; load 100 into s5
209  19528                      SUB s5, 28                     ; position starting smoke right point of line 1
20A  2D500                      OUTPUT s5, stax                ; output to starting x position of line 1

20B  006C0                      LOAD s6, sc                    ; load helicopter smoke vertical position for line 1
20C  2D601                      OUTPUT s6, stay                ; output to starting y position of line 1
20D                             ;;

20D                             ;; End Point
20D  19504                      SUB s5, 04                     ; position starting smoke left point of line 1
20E  2D502                      OUTPUT s5, endx                ; output to starting y position of line 1

20F  2D603                      OUTPUT s6, endy                ; output to ending y position of line 1, matching helicopter
210  20226                      CALL draw_line                 ;draws a line (careful: this subroutine overwrites s5)
211                             ;;

211                             ;;============================================================================
211                             ;; Draws Smoke of Helicopter (Line 2)
211                             ;;============================================================================

211                             ;; Start Point
211  01564                      LOAD s5, 64                    ; load 100 into s5
212  19534                      SUB s5, 34                     ; position starting smoke right point of line 2
213  2D500                      OUTPUT s5, stax                ; output to starting x position of line 2

214  006C0                      LOAD s6, sc                    ; load starting smoke vertical position for line 2
215  11604                      ADD s6, 04                     ; add 4 to s6 (shift down by 4)
216  2D601                      OUTPUT s6, stay                ; output to starting y position of line 2
217                             ;;

217                             ;; End Point
217  19504                      SUB s5, 04                     ; subtract s5 by 4 for length of line
218  2D502                      OUTPUT s5, endx                ; output to endx

219  2D603                      OUTPUT s6, endy                ; outputs vertical locaton of smoke line 2
21A  20226                      CALL draw_line                 ;draws a line (careful: this subroutine overwrites s5)
21B                             ;;

21B                             ;;============================================================================
21B                             ;; Draws Smoke of Helicopter (Line 3)
21B                             ;;============================================================================

21B                             ;; Start Point
21B  01564                      LOAD s5, 64                    ; load 100 into s5
21C  19540                      SUB s5, 40                     ; position starting smoke right point of line 3
21D  2D500                      OUTPUT s5, stax                ; output to starting x position of line 3

21E  006C0                      LOAD s6, sc                    ; load starting smoke vertical position for line 3
21F  19604                      SUB s6, 04                     ; add 4 to s6 (shift down by 4)
220  2D601                      OUTPUT s6, stay                ; output to starting y position of line 3
221                             ;;

221                             ;; End Point
221  19504                      SUB s5, 04                     ; subtract s5 by 4 for length of line
222  2D502                      OUTPUT s5, endx                ; output to endx

223  2D603                      OUTPUT s6, endy                ; output same y position of line 3
224  20226                      CALL draw_line                 ; draws a line (careful: this subroutine overwrites s5)
225                             ;;

225  25000                      RETURN                         ; go back to subroutine



226                             ;;============================================================================
226                             ;; Draw Line - Draw Line Subroutine
226                             ;;============================================================================

226  01501           draw_line: LOAD s5, busy_go               ; load go command
227  2D504                      OUTPUT s5, busy                ; send go command
228  09504                wait: INPUT s5, busy                 ; read busy status
229  1D501                      COMPARE s5, busy_go            ; check busy status
22A  32228                      JUMP Z, wait                   ; if busy, wait more
22B  25000                      RETURN                         ; leave line drawing subroutine

22C                             ;;============================================================================
22C                             ;; Check Collisions - Check Collisions Subroutine
22C                             ;;============================================================================

22C            check_collision:
22C                             ;;============================================================================
22C                             ;; Check Collisions with Map (top wall)
22C                             ;;============================================================================
22C  01560                      LOAD s5, 60                    ; position of heli/wall collision
22D  0180F                      LOAD s8, 0F                    ; top wall vertical coordinate (15)
22E  006C0                      LOAD s6, sc                    ; get vertical position of helicopter
22F  1960A                      SUB s6, 0A                     ; the helicopter's blades 10 pixels higher
230  00760                      LOAD s7, s6                    ; used later for drawing the "spark"
231  1C860                      COMPARE s8, s6                 ; check if the two intersect
232  3224D                      JUMP Z, collision_occurred     ; jump to collision occurred
233  3E24D                      JUMP NC, collision_occurred    ; jump to collision occurred (necessary)

234                             ;;============================================================================
234                             ;; Check Collisions with Map (bottom wall)
234                             ;;============================================================================
234  018F0                      LOAD s8, F0                    ; bottom wall vertical coordinate (240)
235  006C0                      LOAD s6, sc                    ; get vertical position of helicopter
236  11605                      ADD s6, 05                     ; the helicopter's bottom is 5 pixels below
237  00760                      LOAD s7, s6                    ; used later for drawing the "spark"
238  1C860                      COMPARE s8, s6                 ; check if the two intersect
239  3224D                      JUMP Z, collision_occurred     ; jump to collision occurred

23A                             ;;============================================================================
23A                             ;; Check Collisions with Block
23A                             ;;============================================================================

23A  005E0                      LOAD s5, se                    ; get current horizontal position of block
23B  1950A                      SUB s5, 0A                     ; actual block is 10 pixels back
23C  1D564                      COMPARE s5, 64                 ; check if s5 coincides with heli (horizontal check)
23D  3223F                      JUMP Z, check_vertical         ; jump to check vertical positioning
23E  36249                      JUMP NZ, no_collision          ; jump to no_collision routine

23F             check_vertical:
23F  006F0                      LOAD s6, sf                    ; get current vertical position of block
240  007C0                      LOAD s7, sc                    ; load helicopter front position
241  1C760                loop: COMPARE s7, s6                 ; compare s7 and s6
242  3224D                      JUMP Z, collision_occurred     ; jump to collision_occured
243  11601                      ADD s6, 01                     ; add one to s6
244  008F0                      LOAD s8, sf                    ; load original value for reference only
245  1183C                      ADD s8, 3c                     ; add 60 to s8
246  1C680                      COMPARE s6, s8                 ; compare s6 to bottom of block (s8)
247  32249                      JUMP Z, no_collision           ; jump to no_collision routine
248  36241                      JUMP NZ, loop                  ; keep looping

249  19E01        no_collision: SUB se, 01                     ; decrement sE
24A  11C01                      ADD sc, 01                     ; increment sC
24B  20256                      CALL distance                  ; used for keeping the score (increments distance)
24C  25000                      RETURN                         ; leave, since no collisions occurred

24D         collision_occurred:
24D  2D500                      OUTPUT s5, stax                ; set desired stax
24E  2D701                      OUTPUT s7, stay                ; set desired stay
24F  09807                      INPUT s8, prng                 ; load random endx
250  2D802                      OUTPUT s8, endx                ; set random endx
251  09807                      INPUT s8, prng                 ; load random endy
252  2D803                      OUTPUT s8, endy                ; set random endy
253  20226                      CALL draw_line                 ; draw random line

254  01902                      LOAD s9, GAMEOVER_STATE        ; should go to gameover state instead
255  25000                      RETURN                         ; return from routine without any increments

256                             ;;============================================================================
256                             ;; Distance - Distance Subroutine
256                             ;;============================================================================

256  2DB0A            distance: OUTPUT sb, qssd_lo             ; put distance value to qssd
257  1DBFF                      COMPARE sb, FF                 ; check if max (FF) was reached
258  3225B                      JUMP Z, distance2              ; jump to distance2
259  11B01                      ADD sb, one                    ; increment distance value
25A  25000                      RETURN                         ; finished with distance subroutine

25B  11A01           distance2: ADD sa, one                    ; add one to the next degree
25C  01B00                      LOAD sb, zero                  ; reset sB
25D  2DB0A                      OUTPUT sb, qssd_lo             ; put distance value to qssd
25E  2DA0B                      OUTPUT sa, qssd_hi             ; put distance value to qssd
25F  25000                      RETURN                         ; finished with distance subroutine

7FF                             ;;============================================================================
7FF                             ;; Interrupt - Vector.
7FF                             ;;============================================================================

7FF                             ADDRESS 7FF                    ; must be located here
7FF  22012          isr_vector: JUMP isr                       ; always jump to isr

800                             ;;============================================================================
800                             ;;
800                             ;;============================================================================


PSM files that have been assembled
----------------------------------
    /home/adnan/Documents/School/EE178/fpga_video_game/latest_fpga_video_game/software/software.psm


List of defined constants
-------------------------
   CONSTANT name      Value  Source PSM file
   -------------      -----  ---------------
   BEL                07
   BS                 08
   CR                 0D
   CREDITS_STATE      03     software.psm
   DCS                90
   DEL                7F
   ESC                1B
   GAMEOVER_STATE     02     software.psm
   HT                 09
   LF                 0A
   NUL                00
   PLAY_STATE         01     software.psm
   ST                 9C
   START_STATE        00     software.psm
   VT                 0B
   beam               05     software.psm
   beam_hi            0f     software.psm
   beam_lo            03     software.psm
   beam_md            07     software.psm
   busy               04     software.psm
   busy_go            01     software.psm
   buttons            0f     software.psm
   buttons_ct         10     software.psm
   buttons_dn         04     software.psm
   buttons_lf         02     software.psm
   buttons_rt         01     software.psm
   buttons_up         08     software.psm
   datestamp_day      1D
   datestamp_month    0B
   datestamp_year     0F
   endx               02     software.psm
   endy               03     software.psm
   leds_hi            09     software.psm
   leds_lo            08     software.psm
   mode               06     software.psm
   mode_clr           01     software.psm
   mode_exp           03     software.psm
   mode_hld           00     software.psm
   mode_lin           02     software.psm
   one                01     software.psm
   prng               07     software.psm
   qssd_dp            0c     software.psm
   qssd_hi            0b     software.psm
   qssd_lo            0a     software.psm
   stax               00     software.psm
   stay               01     software.psm
   switches_hi        0e     software.psm
   switches_lo        0d     software.psm
   timestamp_hours    11
   timestamp_minutes  39
   timestamp_seconds  0D
   zero               00     software.psm


  No tables defined


List of text strings
--------------------
   STRING name  Value          Source PSM file
   -----------  -----          ---------------
   datestamp$   "29 Nov 2015"
   timestamp$   "17:57:13"


List of line labels
-------------------
    Label                    Addr  Source PSM file
 --------                    ----  ---------------
 *  boot                     000   software.psm
    check_collision          22C   software.psm
    check_other_bound_range  176   software.psm
    check_vertical           23F   software.psm
    collision_occurred       24D   software.psm
    decrement                17E   software.psm
    distance                 256   software.psm
    distance2                25B   software.psm
    draw_block               141   software.psm
    draw_helicopter          13C   software.psm
    draw_helicopter_blades   1F4   software.psm
    draw_helicopter_cockpit  180   software.psm
    draw_helicopter_smoke    208   software.psm
    draw_helicopter_tail     1BF   software.psm
    draw_line                226   software.psm
    enter_play_state         01F   software.psm
    enter_play_state2        027   software.psm
    finished1                155   software.psm
    gameover                 022   software.psm
    in_middle                152   software.psm
    isr                      012   software.psm
 *  isr_vector               7FF   software.psm
    left_edge                14E   software.psm
    loop                     241   software.psm
    main                     011   software.psm
    map                      03C   software.psm
    move_heli_up             17A   software.psm
    new_random               172   software.psm
    no_collision             249   software.psm
    play                     032   software.psm
    random_block_location    16E   software.psm
    right_edge               14A   software.psm
    skip_everything          171   software.psm
    start                    019   software.psm
    start_screen             04D   software.psm
    stay_in_gameover_state   031   software.psm
    stay_in_start_state      021   software.psm
    wait                     228   software.psm

       * Unreferenced label(s)


List of pragma blocks
---------------------
   Name  Addr range  Value
   ----  ----------  -----


Instruction usage statistics
----------------------------
   Instruction  Instances
   -----------  ---------
   ADD          17
   ADDCY        -
   AND          -
   CALL         67
   CALL@        -
   COMPARE      19
   COMPARECY    -
   DISABLE      -
   ENABLE       1
   FETCH        -
   HWBUILD      -
   INPUT        10
   JUMP         29
   JUMP@        -
   LOAD         176
   LOAD&RETURN  -
   OR           -
   OUTPUT       218
   OUTPUTK      -
   REGBANK      -
   RETURN       22
   RETURNI      1
   RL           -
   RR           -
   SL0          -
   SL1          -
   SLA          -
   SLX          -
   SR0          -
   SR1          -
   SRA          -
   SRX          -
   STAR         -
   STORE        -
   SUB          49
   SUBCY        -
   TEST         -
   TESTCY       -
   XOR          -
