KCPSM6 Assembler log file for program 'F:\fpga_video_game\latest_fpga_video_game\software\software.psm'.
Generated by KCPSM6 version v2.51
Ken Chapman - Xilinx Ltd - 29th May 2013

Assembly datestamp: 27 Nov 2015
Assembly timestamp: 04:20:42

Contents
  Assembly listing
  List of PSM files
  List of CONSTANTs
  List of TABLEs
  List of STRINGs
  List of line labels
  Instruction usage statistics


Last occupied address: 7FF hex
Nominal program memory size: 2K (2048)   address(10:0)
Actual memory size: 4096
  (Default memory size)
Occupied memory locations: 280
Memory locations available: 3816


Assembly listing

 Addr Code                            Instruction

 000                                  ;;============================================================================
 000                                  ;; File: software.psm
 000                                  ;; This is the PicoBlaze program for EE178 Lab #8.
 000                                  ;;============================================================================
 000                                  ;;============================================================================
 000                                  ;; Port address declarations.
 000                                  ;;============================================================================
 000                                  CONSTANT stax, 00                     ; port for 8-bit start-x
 000                                  CONSTANT stay, 01                     ; port for 8-bit start-y
 000                                  CONSTANT endx, 02                     ; port for 8-bit end-x
 000                                  CONSTANT endy, 03                     ; port for 8-bit end-y
 000                                  CONSTANT busy, 04                     ; port for 8-bit busy
 000                                  CONSTANT beam, 05                     ; port for 8-bit beam
 000                                  CONSTANT mode, 06                     ; port for 8-bit mode
 000                                  CONSTANT prng, 07                     ; port for 8-bit prng
 000                                  CONSTANT leds_lo, 08                  ; port for 8-bit led data out
 000                                  CONSTANT leds_hi, 09                  ; port for 8-bit led data out
 000                                  CONSTANT qssd_lo, 0A                  ; port for 8-bit qssd data out
 000                                  CONSTANT qssd_hi, 0B                  ; port for 8-bit qssd data out
 000                                  CONSTANT qssd_dp, 0C                  ; port for 8-bit qssd data out
 000                                  CONSTANT switches_lo, 0D              ; port for 8-bit switch input
 000                                  CONSTANT switches_hi, 0E              ; port for 8-bit switch input
 000                                  CONSTANT buttons, 0F                  ; port for 8-bit button input
 000                                  CONSTANT zero, 00                     ; zero
 000                                  CONSTANT one, 01                      ; one
 000                                  CONSTANT busy_go, 01                  ; go command and busy status
 000                                  CONSTANT beam_hi, 0F                  ; beam high intensity
 000                                  CONSTANT beam_md, 07                  ; beam med intensity
 000                                  CONSTANT beam_lo, 03                  ; beam low intensity
 000                                  CONSTANT mode_hld, 00                 ; mode hold framebuffer
 000                                  CONSTANT mode_clr, 01                 ; mode clear framebuffer
 000                                  CONSTANT mode_lin, 02                 ; mode linear decay
 000                                  CONSTANT mode_exp, 03                 ; mode exponential decay
 000                                  CONSTANT buttons_ct, 10               ; center
 000                                  CONSTANT buttons_up, 08               ; up
 000                                  CONSTANT buttons_dn, 04               ; down
 000                                  CONSTANT buttons_lf, 02               ; left
 000                                  CONSTANT buttons_rt, 01               ; right
 000                                  ;;============================================================================
 000                                  ;; Boot.
 000                                  ;;============================================================================
 000  01000                     boot: LOAD s0, 00[zero]                     ; initialize
 001  01100                           LOAD s1, 00[zero]                     ; initialize
 002  01200                           LOAD s2, 00[zero]                     ; initialize
 003  01300                           LOAD s3, 00[zero]                     ; initialize
 004  01400                           LOAD s4, 00[zero]                     ; initialize
 005  01C80                           LOAD sC, 80                           ; starting helicopter position
 006  01D05                           LOAD sD, 05                           ; initialize (needed later)
 007  01EFF                           LOAD sE, FF                           ; load 255 into sE (horizontal coordinate of block)
 008  01F62                           LOAD sF, 62                           ; load 108 into sF (vertical coordinate of block)
 009  01503                           LOAD s5, 03[mode_exp]                 ; load desired mode
 00A  2D506                           OUTPUT s5, 06[mode]                   ; set desired mode
 00B  0150F                           LOAD s5, 0F[beam_hi]                  ; load desired beam
 00C  2D505                           OUTPUT s5, 05[beam]                   ; set desired beam
 00D  28001                           ENABLE INTERRUPT                      ; enable interrupts
 00E                                  ;;============================================================================
 00E                                  ;; Main.
 00E                                  ;;============================================================================
 00E  0900F                     main: INPUT s0, 0F[buttons]                 ; get center button value
 00F  0910E                           INPUT s1, 0E[switches_hi]             ; get hi switch values
 010  2D008                           OUTPUT s0, 08[leds_lo]                ; put lo led values
 011                                  ;OUTPUT s1, leds_hi                  ; put hi led values
 011  2200E                           JUMP 00E[main]                        ; go back and repeat
 012                                  ;;============================================================================
 012                                  ;; Interrupt - Service Routine.
 012                                  ;;============================================================================
 012  0920F                      isr: INPUT s2, 0F[buttons]                 ; get center button value
 013  0930E                           INPUT s3, 0E[switches_hi]             ; get hi switch values
 014  0940F                           INPUT s4, 0F[buttons]                 ; get button values
 015  2D20A                           OUTPUT s2, 0A[qssd_lo]                ; put lo qssd values
 016  2D30B                           OUTPUT s3, 0B[qssd_hi]                ; put hi qssd values
 017  2D40C                           OUTPUT s4, 0C[qssd_dp]                ; put dp qssd values
 018                                  ;OUTPUT s2, stax                     ; set desired stax
 018                                  ;OUTPUT s3, stay                     ; set desired stay
 018                                  ;INPUT s5, prng                      ; load random endx
 018                                  ;OUTPUT s5, endx                     ; set random endx
 018                                  ;INPUT s5, prng                      ; load random endy
 018                                  ;OUTPUT s5, endy                     ; set random endy
 018  200FF                           CALL 0FF[draw_line]                   ; draws a line (careful: this subroutine overwrites s5)
 019  2001B                           CALL 01B[play]                        ; call play subroutine
 01A  29001                           RETURNI ENABLE                        ; done with isr
 01B                                  ;;============================================================================
 01B                                  ;; Play - Play Subroutine
 01B                                  ;;============================================================================
 01B  0950F                     play: INPUT s5, 0F[buttons]                 ; get center button values
 01C  20025                           CALL 025[map]                         ; draw the map using map subroutine
 01D  0950F                           INPUT s5, 0F[buttons]                 ; get button values
 01E  1D510                           COMPARE s5, 10[buttons_ct]            ; check if center button is pressed
 01F  30075                           CALL Z, 075[move_heli_up]             ; call subroutine that moves the helicopter up
 020  20038                           CALL 038[draw_helicopter]             ; draw the helicopter
 021  20069                           CALL 069[random_block_location]       ; determines a random place for the block (y direction only)
 022  2003C                           CALL 03C[draw_block]                  ; draw the block using draw_block subroutine
 023  20105                           CALL 105[check_collision]             ; check if any collisions happen
 024  25000                           RETURN                                ; finished with play subroutine
 025                                  ;;============================================================================
 025                                  ;; Map - Draw Map Subroutine
 025                                  ;;============================================================================
 025  01500                      map: LOAD s5, 00[zero]                     ; load zero into s5
 026  2D500                           OUTPUT s5, 00[stax]                   ; set desired stax
 027  0150F                           LOAD s5, 0F                           ; load 15 into s5
 028  2D501                           OUTPUT s5, 01[stay]                   ; set desired stay
 029  015FF                           LOAD s5, FF                           ; load 255 into s5
 02A  2D502                           OUTPUT s5, 02[endx]                   ; set desired endx
 02B  0150F                           LOAD s5, 0F                           ; load 15 into s5
 02C  2D503                           OUTPUT s5, 03[endy]                   ; set desired endy
 02D  200FF                           CALL 0FF[draw_line]                   ; draws a line (careful: this subroutine overwrites s5)
 02E  01500                           LOAD s5, 00[zero]                     ; load zero into s5
 02F  2D500                           OUTPUT s5, 00[stax]                   ; set desired stax
 030  015F0                           LOAD s5, F0                           ; load 240 into s5
 031  2D501                           OUTPUT s5, 01[stay]                   ; set desired stay
 032  015FF                           LOAD s5, FF                           ; load 255 into s5
 033  2D502                           OUTPUT s5, 02[endx]                   ; set desired endx
 034  015F0                           LOAD s5, F0                           ; load 240 into s5
 035  2D503                           OUTPUT s5, 03[endy]                   ; set desired endy
 036  200FF                           CALL 0FF[draw_line]                   ; draws a line (careful: this subroutine overwrites s5)
 037  25000                           RETURN                                ; finished with map subroutine
 038                                  ;;============================================================================
 038                                  ;; Draw Block - Draw Block Subroutine
 038                                  ;;============================================================================
 038                 draw_helicopter: 
 038  20077                           CALL 077[draw_helicopter_cockpit]     ; call the subroutine to draw the cockpit
 039  200EB                           CALL 0EB[draw_helicopter_blades]      ; call the subroutine to draw the blades
 03A  200B6                           CALL 0B6[draw_helicopter_tail]        ; call the subroutine to draw the tail
 03B  25000                           RETURN                                ; go back from drawing helicopter
 03C                                  ;;============================================================================
 03C                                  ;; Draw Block - Draw Block Subroutine
 03C                                  ;;============================================================================
 03C                      draw_block: 
 03C                                  ;;============================================================================
 03C                                  ;; Draws Top Line of Block
 03C                                  ;;============================================================================
 03C  005E0                           LOAD s5, sE                           ; load 255 into s5 (horizontal center of block)
 03D  016E1                           LOAD s6, E1                           ; load 245 into s6
 03E  1C650                           COMPARE s6, s5                        ; checking if the block is done "peaking out" from the right (initial compare: 245 ? 255)
 03F  3A045                           JUMP C, 045[right_edge]               ; jump to right_edge
 040  0160A                           LOAD s6, 0A                           ; load 10 into s6
 041  1C560                           COMPARE s5, s6                        ; comparing s5 and s6
 042  3A049                           JUMP C, 049[left_edge]                ; jump to left_edge
 043  32049                           JUMP Z, 049[left_edge]                ; jump to left_edge
 044  2204D                           JUMP 04D[in_middle]                   ; jump to in_middle
 045  2D500               right_edge: OUTPUT s5, 00[stax]                   ; set desired stax
 046  1950A                           SUB s5, 0A                            ;
 047  2D502                           OUTPUT s5, 02[endx]                   ; set desired stax
 048  22050                           JUMP 050[finished1]                   ; jump to draw_ys
 049  2D500                left_edge: OUTPUT s5, 00[stax]                   ; set desired stax
 04A  01600                           LOAD s6, 00                           ; put 255 into s5
 04B  2D602                           OUTPUT s6, 02[endx]                   ; set desired stax
 04C  22050                           JUMP 050[finished1]                   ; jump to draw_ys
 04D                       in_middle: 
 04D  2D500                           OUTPUT s5, 00[stax]                   ; set desired stax
 04E  1950A                           SUB s5, 0A                            ; subtract the width of block to get the other x coordinate
 04F  2D502                           OUTPUT s5, 02[endx]                   ; set desired endx
 050  2DF01                finished1: OUTPUT sF, 01[stay]                   ; set desired stay
 051  2DF03                           OUTPUT sF, 03[endy]                   ; set desired endy
 052  200FF                           CALL 0FF[draw_line]                   ; draws a line (careful: this subroutine overwrites s5)
 053                                  ;;============================================================================
 053                                  ;; Draws Bottom Line of Block
 053                                  ;;============================================================================
 053  005F0                           LOAD s5, sF                           ; load sF into s5
 054  1153C                           ADD s5, 3C                            ; add 40 to s5
 055  2D501                           OUTPUT s5, 01[stay]                   ; set desired stay
 056  2D503                           OUTPUT s5, 03[endy]                   ; set desired endy
 057  200FF                           CALL 0FF[draw_line]                   ; draws a line (careful: this subroutine overwrites s5)
 058                                  ;;============================================================================
 058                                  ;; Draws Right Vertical Line of Block
 058                                  ;;============================================================================
 058  2DE00                           OUTPUT sE, 00[stax]                   ; set desired stax
 059  2DE02                           OUTPUT sE, 02[endx]                   ; set desired endx
 05A  2DF01                           OUTPUT sF, 01[stay]                   ; set desired stay
 05B  005F0                           LOAD s5, sF                           ; load sF into s5
 05C  1153C                           ADD s5, 3C                            ; add 60 to y coordinate
 05D  2D503                           OUTPUT s5, 03[endy]                   ; set desired endy
 05E  200FF                           CALL 0FF[draw_line]                   ; draws a line (careful: this subroutine overwrites s5)
 05F                                  ;;============================================================================
 05F                                  ;; Draws Left Vertical Line of Block
 05F                                  ;;============================================================================
 05F  005E0                           LOAD s5, sE                           ; load sE into s5
 060  1950A                           SUB s5, 0A                            ; subtract 10 from s5
 061  2D500                           OUTPUT s5, 00[stax]                   ; set desired stax
 062  2D502                           OUTPUT s5, 02[endx]                   ; set desired endx
 063  2DF01                           OUTPUT sF, 01[stay]                   ; set desired stay
 064  005F0                           LOAD s5, sF                           ; load sF into s5
 065  1153C                           ADD s5, 3C                            ; add 60 to y coordinate
 066  2D503                           OUTPUT s5, 03[endy]                   ; set desired endy
 067  200FF                           CALL 0FF[draw_line]                   ; draws a line (careful: this subroutine overwrites s5)
 068  25000                           RETURN                                ; finished with draw_block subroutine
 069                                  ;;============================================================================
 069                                  ;; Random Block Location - Random Block Location Subroutine
 069                                  ;;============================================================================
 069           random_block_location: 
 069  1DE00                           COMPARE sE, 00                        ; is it time to create a new variable?
 06A  3206D                           JUMP Z, 06D[new_random]               ; jump to new random creator
 06B  3606C                           JUMP NZ, 06C[skip_everything]         ; goes back
 06C  25000          skip_everything: RETURN                                ; returns back
 06D  09507               new_random: INPUT s5, 07[prng]                    ; create to new random number
 06E  1D50F                           COMPARE s5, 0F                        ; check if it's in range
 06F  3E071                           JUMP NC, 071[check_other_bound_range] ; check lower bound of map
 070  3A06D                           JUMP C, 06D[new_random]               ; get new variable
 071         check_other_bound_range: 
 071  1D5B4                           COMPARE s5, B4                        ; compare s5 to 180
 072  3E06D                           JUMP NC, 06D[new_random]              ; get a new random number
 073  00F50                           LOAD sF, s5                           ; a new y coordinate generated
 074  25000                           RETURN                                ; get out of subroutine
 075                                  ;;============================================================================
 075                                  ;; Move Helicopter Up - Move Helicopter Up Subroutine
 075                                  ;;============================================================================
 075                    move_heli_up: 
 075  19C02                           SUB sC, 02                            ; move the helicopter up
 076  25000                           RETURN                                ; get out of subroutine
 077                                  ;;============================================================================
 077                                  ;; Draw Helicopter Cockpit - Draw Helicopter Cockpit Subroutine
 077                                  ;;============================================================================
 077         draw_helicopter_cockpit: 
 077                                  ;;============================================================================
 077                                  ;; Draws Cockpit of Helicopter (Line 1a)
 077                                  ;;============================================================================
 077                                  ;; STARTING POINT
 077  01564                           LOAD s5, 64                           ; load 100 into s5
 078  2D500                           OUTPUT s5, 00[stax]                   ; set desired stax
 079  006C0                           LOAD s6, sC                           ; load sC into s5
 07A  2D601                           OUTPUT s6, 01[stay]                   ; set desired stay
 07B                                  ;; ENDING POINT
 07B  19501                           SUB s5, 01                            ; subtract 7 from s5
 07C  2D502                           OUTPUT s5, 02[endx]                   ; set desired endx
 07D  19603                           SUB s6, 03                            ; go up by 5
 07E  2D603                           OUTPUT s6, 03[endy]                   ; set desired endy
 07F  200FF                           CALL 0FF[draw_line]                   ; draws a line (careful: this subroutine overwrites s5)
 080                                  ;;============================================================================
 080                                  ;; Draws Cockpit of Helicopter (Line 1b)
 080                                  ;;============================================================================
 080                                  ;; STARTING POINT
 080  01564                           LOAD s5, 64                           ; load 100 into s5
 081  19501                           SUB s5, 01                            ; subtract 7 from s5
 082  2D500                           OUTPUT s5, 00[stax]                   ; set desired stax
 083  006C0                           LOAD s6, sC                           ; load sC into s5
 084  19603                           SUB s6, 03                            ; go up by 5
 085  2D601                           OUTPUT s6, 01[stay]                   ; set desired stay
 086                                  ;; ENDING POINT
 086  19504                           SUB s5, 04                            ; subtract 7 from s5
 087  2D502                           OUTPUT s5, 02[endx]                   ; set desired endx
 088  19602                           SUB s6, 02                            ; go up by 5
 089  2D603                           OUTPUT s6, 03[endy]                   ; set desired endy
 08A  200FF                           CALL 0FF[draw_line]                   ; draws a line (careful: this subroutine overwrites s5)
 08B                                  ;;============================================================================
 08B                                  ;; Draws Cockpit of Helicopter (Line 2a)
 08B                                  ;;============================================================================
 08B                                  ;; STARTING POINT
 08B  01564                           LOAD s5, 64                           ; load 100 into s5
 08C  2D500                           OUTPUT s5, 00[stax]                   ; set desired stax
 08D  006C0                           LOAD s6, sC                           ; load sC into s5
 08E  2D601                           OUTPUT s6, 01[stay]                   ; set desired stay
 08F                                  ;; ENDING POINT
 08F  19501                           SUB s5, 01                            ; subtract 1 from s5
 090  2D502                           OUTPUT s5, 02[endx]                   ; set desired endx
 091  11603                           ADD s6, 03                            ; go down by 3
 092  2D603                           OUTPUT s6, 03[endy]                   ; set desired endy
 093  200FF                           CALL 0FF[draw_line]                   ; draws a line (careful: this subroutine overwrites s5)
 094                                  ;;============================================================================
 094                                  ;; Draws Cockpit of Helicopter (Line 2b)
 094                                  ;;============================================================================
 094                                  ;; STARTING POINT
 094  01564                           LOAD s5, 64                           ; load 100 into s5
 095  19501                           SUB s5, 01                            ; subtract 1 from s5
 096  2D500                           OUTPUT s5, 00[stax]                   ; set desired stax
 097  006C0                           LOAD s6, sC                           ; load sC into s5
 098  11603                           ADD s6, 03                            ; go down by 3
 099  2D601                           OUTPUT s6, 01[stay]                   ; set desired stay
 09A                                  ;; ENDING POINT
 09A  19504                           SUB s5, 04                            ; subtract 7 from s5
 09B  2D502                           OUTPUT s5, 02[endx]                   ; set desired endx
 09C  11602                           ADD s6, 02                            ; go down by 5
 09D  2D603                           OUTPUT s6, 03[endy]                   ; set desired endy
 09E  200FF                           CALL 0FF[draw_line]                   ; draws a line (careful: this subroutine overwrites s5)
 09F                                  ;;============================================================================
 09F                                  ;; Draws Cockpit of Helicopter (Line 3)
 09F                                  ;;============================================================================
 09F                                  ;; STARTING POINT
 09F  01564                           LOAD s5, 64                           ; load 100 into s5
 0A0  19505                           SUB s5, 05                            ; load 7 into s5
 0A1  2D500                           OUTPUT s5, 00[stax]                   ; set desired stax
 0A2  006C0                           LOAD s6, sC                           ; load sC into s5
 0A3  19605                           SUB s6, 05                            ; go up by 5 using subtraction
 0A4  2D601                           OUTPUT s6, 01[stay]                   ; set desired stay
 0A5                                  ;; ENDING POINT
 0A5  19507                           SUB s5, 07                            ; subtract 5 from s5
 0A6  2D502                           OUTPUT s5, 02[endx]                   ; set desired endx
 0A7  11605                           ADD s6, 05                            ; go down by 5
 0A8  2D603                           OUTPUT s6, 03[endy]                   ; set desired endy
 0A9  200FF                           CALL 0FF[draw_line]                   ; draws a line (careful: this subroutine overwrites s5)
 0AA                                  ;;============================================================================
 0AA                                  ;; Draws Cockpit of Helicopter (Line 4)
 0AA                                  ;;============================================================================
 0AA                                  ;; STARTING POINT
 0AA  01564                           LOAD s5, 64                           ; load 100 into s5
 0AB  19505                           SUB s5, 05                            ; load 7 into s5
 0AC  2D500                           OUTPUT s5, 00[stax]                   ; set desired stax
 0AD  006C0                           LOAD s6, sC                           ; load sC into s5
 0AE  11605                           ADD s6, 05                            ; go down by 5 using addition
 0AF  2D601                           OUTPUT s6, 01[stay]                   ; set desired stay
 0B0                                  ;; ENDING POINT
 0B0  19507                           SUB s5, 07                            ; subtract 5 from s5
 0B1  2D502                           OUTPUT s5, 02[endx]                   ; set desired endx
 0B2  19605                           SUB s6, 05                            ; go back up by 5
 0B3  2D603                           OUTPUT s6, 03[endy]                   ; set desired endy
 0B4  200FF                           CALL 0FF[draw_line]                   ; draws a line (careful: this subroutine overwrites s5)
 0B5  25000                           RETURN                                ; go back from subroutine
 0B6                                  ;;============================================================================
 0B6                                  ;; Draw Helicopter Tail - Draw Helicopter Tail Subroutine
 0B6                                  ;;============================================================================
 0B6            draw_helicopter_tail: 
 0B6                                  ;;============================================================================
 0B6                                  ;; Draws Tail of Helicopter (Line 1)
 0B6                                  ;;============================================================================
 0B6                                  ;; STARTING POINT
 0B6  01564                           LOAD s5, 64                           ; load 100 into s5
 0B7  1950A                           SUB s5, 0A                            ; subtract 0xA from s5
 0B8  2D500                           OUTPUT s5, 00[stax]                   ; set desired stax
 0B9  006C0                           LOAD s6, sC                           ; load sC into s5
 0BA  19602                           SUB s6, 02                            ; subtract 2 from s6
 0BB  2D601                           OUTPUT s6, 01[stay]                   ; set desired stay
 0BC                                  ;; ENDING POINT
 0BC  19507                           SUB s5, 07                            ; subtract 7 from s5
 0BD  2D502                           OUTPUT s5, 02[endx]                   ; set desired endx
 0BE  2D603                           OUTPUT s6, 03[endy]                   ; set desired endy
 0BF  200FF                           CALL 0FF[draw_line]                   ; draws a line (careful: this subroutine overwrites s5)
 0C0                                  ;;============================================================================
 0C0                                  ;; Draws Tail of Helicopter (Line 2)
 0C0                                  ;;============================================================================
 0C0                                  ;; STARTING POINT
 0C0  01564                           LOAD s5, 64                           ; load 100 into s5
 0C1  1950C                           SUB s5, 0C                            ; subtract 0xC from s5
 0C2  2D500                           OUTPUT s5, 00[stax]                   ; set desired stax
 0C3  006C0                           LOAD s6, sC                           ; load sC into s5
 0C4  2D601                           OUTPUT s6, 01[stay]                   ; set desired stay
 0C5                                  ;; ENDING POINT
 0C5  19508                           SUB s5, 08                            ; subtract 7 from s5
 0C6  2D502                           OUTPUT s5, 02[endx]                   ; set desired endx
 0C7  2D603                           OUTPUT s6, 03[endy]                   ; set desired endy
 0C8  200FF                           CALL 0FF[draw_line]                   ; draws a line (careful: this subroutine overwrites s5)
 0C9                                  ;;============================================================================
 0C9                                  ;; Draws Tail of Helicopter (Line 3)
 0C9                                  ;;============================================================================
 0C9                                  ;; STARTING POINT
 0C9  01564                           LOAD s5, 64                           ; load 100 into s5
 0CA  1950A                           SUB s5, 0A                            ; subtract 0x0A from s5
 0CB  19508                           SUB s5, 08                            ; subtract 0x10 from s5
 0CC  2D500                           OUTPUT s5, 00[stax]                   ; set desired stax
 0CD  006C0                           LOAD s6, sC                           ; load sC into s5
 0CE  19602                           SUB s6, 02                            ; subtract 2 from s6
 0CF  2D601                           OUTPUT s6, 01[stay]                   ; set desired stay
 0D0                                  ;; ENDING POINT
 0D0  19502                           SUB s5, 02                            ; subtract 2 from s5
 0D1  2D502                           OUTPUT s5, 02[endx]                   ; set desired endx
 0D2  19602                           SUB s6, 02                            ; subtract 2 from s6
 0D3  2D603                           OUTPUT s6, 03[endy]                   ; set desired endy
 0D4  200FF                           CALL 0FF[draw_line]                   ; draws a line (careful: this subroutine overwrites s5)
 0D5                                  ;;============================================================================
 0D5                                  ;; Draws Tail of Helicopter (Line 4)
 0D5                                  ;;============================================================================
 0D5                                  ;; STARTING POINT
 0D5  01564                           LOAD s5, 64                           ; load 100 into s5
 0D6  1950C                           SUB s5, 0C                            ; subtract 0x0C from s5
 0D7  19509                           SUB s5, 09                            ; subtract 0x09 from s5
 0D8  2D500                           OUTPUT s5, 00[stax]                   ; set desired stax
 0D9  006C0                           LOAD s6, sC                           ; load sC into s5
 0DA  2D601                           OUTPUT s6, 01[stay]                   ; set desired stay
 0DB                                  ;; ENDING POINT
 0DB                                  ;SUB s5, 01                          ; subtract 2 from s5
 0DB  2D502                           OUTPUT s5, 02[endx]                   ; set desired endx
 0DC  11601                           ADD s6, 01                            ; add 1 to s6
 0DD  2D603                           OUTPUT s6, 03[endy]                   ; set desired endy
 0DE  200FF                           CALL 0FF[draw_line]                   ; draws a line (careful: this subroutine overwrites s5)
 0DF                                  ;;============================================================================
 0DF                                  ;; Draws Tail of Helicopter (Line 5)
 0DF                                  ;;============================================================================
 0DF                                  ;; STARTING POINT
 0DF  01564                           LOAD s5, 64                           ; load 100 into s5
 0E0  1950A                           SUB s5, 0A                            ; subtract 0x0A from s5
 0E1  1950A                           SUB s5, 0A                            ; subtract 0x0A from s5
 0E2  2D500                           OUTPUT s5, 00[stax]                   ; set desired stax
 0E3  006C0                           LOAD s6, sC                           ; load sC into s5
 0E4  19604                           SUB s6, 04                            ; subtract 4 from s6
 0E5  2D601                           OUTPUT s6, 01[stay]                   ; set desired stay
 0E6                                  ;; ENDING POINT
 0E6  2D502                           OUTPUT s5, 02[endx]                   ; set desired endx
 0E7  11605                           ADD s6, 05                            ; add 1 to s6
 0E8  2D603                           OUTPUT s6, 03[endy]                   ; set desired endy
 0E9  200FF                           CALL 0FF[draw_line]                   ; draws a line (careful: this subroutine overwrites s5)
 0EA  25000                           RETURN                                ; go back from subroutine
 0EB                                  ;;============================================================================
 0EB                                  ;; Draw Helicopter Blades - Draw Helicopter Blades Subroutine
 0EB                                  ;;============================================================================
 0EB          draw_helicopter_blades: 
 0EB                                  ;;============================================================================
 0EB                                  ;; Draws Blades of Helicopter (Line 1)
 0EB                                  ;;============================================================================
 0EB                                  ;; STARTING POINT
 0EB  01564                           LOAD s5, 64                           ; load 100 into s5
 0EC  19505                           SUB s5, 05                            ; subtract 0xA from s5
 0ED  2D500                           OUTPUT s5, 00[stax]                   ; set desired stax
 0EE  006C0                           LOAD s6, sC                           ; load sC into s5
 0EF  19605                           SUB s6, 05                            ; subtract 2 from s6
 0F0  2D601                           OUTPUT s6, 01[stay]                   ; set desired stay
 0F1                                  ;; ENDING POINT
 0F1  2D502                           OUTPUT s5, 02[endx]                   ; set desired endx
 0F2  19602                           SUB s6, 02                            ; subtract 2 from s6
 0F3  2D603                           OUTPUT s6, 03[endy]                   ; set desired endy
 0F4  200FF                           CALL 0FF[draw_line]                   ; draws a line (careful: this subroutine overwrites s5)
 0F5                                  ;;============================================================================
 0F5                                  ;; Draws Blades of Helicopter (Line 2)
 0F5                                  ;;============================================================================
 0F5                                  ;; STARTING POINT
 0F5  01564                           LOAD s5, 64                           ; load 100 into s5
 0F6  2D500                           OUTPUT s5, 00[stax]                   ; set desired stax
 0F7  006C0                           LOAD s6, sC                           ; load sC into s5
 0F8  19607                           SUB s6, 07                            ; subtract 2 from s6
 0F9  2D601                           OUTPUT s6, 01[stay]                   ; set desired stay
 0FA                                  ;; ENDING POINT
 0FA  1950A                           SUB s5, 0A                            ; subtract 10 from s5
 0FB  2D502                           OUTPUT s5, 02[endx]                   ; set desired endx
 0FC  2D603                           OUTPUT s6, 03[endy]                   ; set desired endy
 0FD  200FF                           CALL 0FF[draw_line]                   ; draws a line (careful: this subroutine overwrites s5)
 0FE  25000                           RETURN                                ; go back from subroutine
 0FF                                  ;;============================================================================
 0FF                                  ;; Draw Line - Draw Line Subroutine
 0FF                                  ;;============================================================================
 0FF  01501                draw_line: LOAD s5, 01[busy_go]                  ; load go command
 100  2D504                           OUTPUT s5, 04[busy]                   ; send go command
 101  09504                     wait: INPUT s5, 04[busy]                    ; read busy status
 102  1D501                           COMPARE s5, 01[busy_go]               ; check busy status
 103  32101                           JUMP Z, 101[wait]                     ; if busy, wait more
 104  25000                           RETURN                                ; leave line drawing subroutine
 105                                  ;;============================================================================
 105                                  ;; Check Collisions - Check Collisions Subroutine
 105                                  ;;============================================================================
 105                 check_collision: 
 105  005F0                           LOAD s5, sF                           ; get current horizontal position of block
 106  1D564                           COMPARE s5, 64                        ; check if s5 coincides with heli (horizontal check)
 107  32109                           JUMP Z, 109[check_vertical]           ; jump to check vertical positioning
 108  36113                           JUMP NZ, 113[no_collision]            ; jump to no_collision routine
 109                  check_vertical: 
 109  006E0                           LOAD s6, sE                           ; get current vertical position of block
 10A  007C0                           LOAD s7, sC                           ; load helicopter front position
 10B  1C560                     loop: COMPARE s5, s6                        ; compare s5 and s6
 10C  32116                           JUMP Z, 116[collision_occurred]       ; jump to collision_occured
 10D  11601                           ADD s6, 01                            ; add one to s6
 10E  007E0                           LOAD s7, sE                           ; load original value for reference only
 10F  1173C                           ADD s7, 3C                            ; add 60 to s7
 110  1C670                           COMPARE s6, s7                        ; compare s6 to bottom of block (s7)
 111  32113                           JUMP Z, 113[no_collision]             ; jump to no_collision routine
 112  3610B                           JUMP NZ, 10B[loop]                    ; keep looping
 113  19E01             no_collision: SUB sE, 01                            ; decrement sE
 114  11C01                           ADD sC, 01                            ; increment sC
 115  25000                           RETURN                                ; leave, since no collisions occurred
 116  25000       collision_occurred: RETURN                                ; return from routine without any increments
 117                                  ;;============================================================================
 117                                  ;; Interrupt - Vector.
 117                                  ;;============================================================================
 7FF                                  ADDRESS 7FF                           ; must be located here
 7FF  22012               isr_vector: JUMP 012[isr]                         ; always jump to isr
 800                                  ;;============================================================================
 800                                  ;;
 800                                  ;;============================================================================



List of PSM files that have been assembled

F:\fpga_video_game\latest_fpga_video_game\software\software.psm



List of defined constants

 CONSTANT name     Value        Source PSM File

 timestamp_hours   04'd         
 timestamp_minutes 20'd         
 timestamp_seconds 42'd         
 datestamp_year    15'd         
 datestamp_month   11'd         
 datestamp_day     27'd         
 NUL               00           
 BEL               07           
 BS                08           
 HT                09           
 LF                0A           
 VT                0B           
 CR                0D           
 ESC               1B           
 DEL               7F           
 DCS               90           
 ST                9C           
 stax              00           software.psm
 stay              01           software.psm
 endx              02           software.psm
 endy              03           software.psm
 busy              04           software.psm
 beam              05           software.psm
 mode              06           software.psm
 prng              07           software.psm
 leds_lo           08           software.psm
 leds_hi           09           software.psm
 qssd_lo           0A           software.psm
 qssd_hi           0B           software.psm
 qssd_dp           0C           software.psm
 switches_lo       0D           software.psm
 switches_hi       0E           software.psm
 buttons           0F           software.psm
 zero              00           software.psm
 one               01           software.psm
 busy_go           01           software.psm
 beam_hi           0F           software.psm
 beam_md           07           software.psm
 beam_lo           03           software.psm
 mode_hld          00           software.psm
 mode_clr          01           software.psm
 mode_lin          02           software.psm
 mode_exp          03           software.psm
 buttons_ct        10           software.psm
 buttons_up        08           software.psm
 buttons_dn        04           software.psm
 buttons_lf        02           software.psm
 buttons_rt        01           software.psm



No TABLEs defined



List of text strings

 STRING name       String         Source PSM File

 KCPSM6_version$   "v2.51"        
 datestamp$        "27 Nov 2015"  
 timestamp$        "04:20:42"     



List of line labels

   Label                     Addr  Source PSM File

 * boot                      000   software.psm
   main                      00E   software.psm
   isr                       012   software.psm
   play                      01B   software.psm
   map                       025   software.psm
   draw_helicopter           038   software.psm
   draw_block                03C   software.psm
   right_edge                045   software.psm
   left_edge                 049   software.psm
   in_middle                 04D   software.psm
   finished1                 050   software.psm
   random_block_location     069   software.psm
   skip_everything           06C   software.psm
   new_random                06D   software.psm
   check_other_bound_range   071   software.psm
   move_heli_up              075   software.psm
   draw_helicopter_cockpit   077   software.psm
   draw_helicopter_tail      0B6   software.psm
   draw_helicopter_blades    0EB   software.psm
   draw_line                 0FF   software.psm
   wait                      101   software.psm
   check_collision           105   software.psm
   check_vertical            109   software.psm
   loop                      10B   software.psm
   no_collision              113   software.psm
   collision_occurred        116   software.psm
 * isr_vector                7FF   software.psm

      * Line label has not been referenced in any instructions.
        Hint - This may indicate unused code that could be
               removed to reduce the size of this program.



Instruction usage statistics

 Instruction    Instances

 LOAD             59
 STAR              -

 AND               -
 OR                -
 XOR               -

 ADD              13
 ADDCY             -
 SUB              40
 SUBCY             -

 TEST              -
 TESTCY            -
 COMPARE          10
 COMPARECY         -

 SL0               -
 SL1               -
 SLX               -
 SLA               -
 RL                -
 SR0               -
 SR1               -
 SRX               -
 SRA               -
 RR                -

 REGBANK           -

 INPUT             9
 OUTPUT           85
 OUTPUTK           -

 STORE             -
 FETCH             -

 DISABLE           -
 ENABLE            1
 RETURNI           1

 JUMP             19
 JUMP@             -
 CALL             30
 CALL@             -
 RETURN           13
 LOAD&RETURN       -

 HWBUILD           -



End of KCPSM6 log file.
