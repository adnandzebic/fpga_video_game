KCPSM6 Assembler log file for program 'F:\fpga_video_game\latest_fpga_video_game\software\software.psm'.
Generated by KCPSM6 version v2.51
Ken Chapman - Xilinx Ltd - 29th May 2013

Assembly datestamp: 26 Nov 2015
Assembly timestamp: 23:35:04

Contents
  Assembly listing
  List of PSM files
  List of CONSTANTs
  List of TABLEs
  List of STRINGs
  List of line labels
  Instruction usage statistics


Last occupied address: 7FF hex
Nominal program memory size: 2K (2048)   address(10:0)
Actual memory size: 4096
  (Default memory size)
Occupied memory locations: 263
Memory locations available: 3833


Assembly listing

 Addr Code                            Instruction

 000                                  ;;============================================================================
 000                                  ;; File: software.psm
 000                                  ;; This is the PicoBlaze program for EE178 Lab #8.
 000                                  ;;============================================================================
 000                                  ;;============================================================================
 000                                  ;; Port address declarations.
 000                                  ;;============================================================================
 000                                  CONSTANT stax, 00                     ; port for 8-bit start-x
 000                                  CONSTANT stay, 01                     ; port for 8-bit start-y
 000                                  CONSTANT endx, 02                     ; port for 8-bit end-x
 000                                  CONSTANT endy, 03                     ; port for 8-bit end-y
 000                                  CONSTANT busy, 04                     ; port for 8-bit busy
 000                                  CONSTANT beam, 05                     ; port for 8-bit beam
 000                                  CONSTANT mode, 06                     ; port for 8-bit mode
 000                                  CONSTANT prng, 07                     ; port for 8-bit prng
 000                                  CONSTANT leds_lo, 08                  ; port for 8-bit led data out
 000                                  CONSTANT leds_hi, 09                  ; port for 8-bit led data out
 000                                  CONSTANT qssd_lo, 0A                  ; port for 8-bit qssd data out
 000                                  CONSTANT qssd_hi, 0B                  ; port for 8-bit qssd data out
 000                                  CONSTANT qssd_dp, 0C                  ; port for 8-bit qssd data out
 000                                  CONSTANT switches_lo, 0D              ; port for 8-bit switch input
 000                                  CONSTANT switches_hi, 0E              ; port for 8-bit switch input
 000                                  CONSTANT buttons, 0F                  ; port for 8-bit button input
 000                                  CONSTANT zero, 00                     ; zero
 000                                  CONSTANT one, 01                      ; one
 000                                  CONSTANT busy_go, 01                  ; go command and busy status
 000                                  CONSTANT beam_hi, 0F                  ; beam high intensity
 000                                  CONSTANT beam_md, 07                  ; beam med intensity
 000                                  CONSTANT beam_lo, 03                  ; beam low intensity
 000                                  CONSTANT mode_hld, 00                 ; mode hold framebuffer
 000                                  CONSTANT mode_clr, 01                 ; mode clear framebuffer
 000                                  CONSTANT mode_lin, 02                 ; mode linear decay
 000                                  CONSTANT mode_exp, 03                 ; mode exponential decay
 000                                  CONSTANT buttons_ct, 10               ; center
 000                                  CONSTANT buttons_up, 08               ; up
 000                                  CONSTANT buttons_dn, 04               ; down
 000                                  CONSTANT buttons_lf, 02               ; left
 000                                  CONSTANT buttons_rt, 01               ; right
 000                                  ;;============================================================================
 000                                  ;; Boot.
 000                                  ;;============================================================================
 000  01000                     boot: LOAD s0, 00[zero]                     ; initialize
 001  01100                           LOAD s1, 00[zero]                     ; initialize
 002  01200                           LOAD s2, 00[zero]                     ; initialize
 003  01300                           LOAD s3, 00[zero]                     ; initialize
 004  01400                           LOAD s4, 00[zero]                     ; initialize
 005  01C80                           LOAD sC, 80                           ; starting helicopter position
 006  01D05                           LOAD sD, 05                           ; initialize (needed later)
 007  01EFF                           LOAD sE, FF                           ; load 255 into sE (horizontal coordinate of block)
 008  01F62                           LOAD sF, 62                           ; load 108 into sF (vertical coordinate of block)
 009  01503                           LOAD s5, 03[mode_exp]                 ; load desired mode
 00A  2D506                           OUTPUT s5, 06[mode]                   ; set desired mode
 00B  0150F                           LOAD s5, 0F[beam_hi]                  ; load desired beam
 00C  2D505                           OUTPUT s5, 05[beam]                   ; set desired beam
 00D  28001                           ENABLE INTERRUPT                      ; enable interrupts
 00E                                  ;;============================================================================
 00E                                  ;; Main.
 00E                                  ;;============================================================================
 00E  0900F                     main: INPUT s0, 0F[buttons]                 ; get center button value
 00F  0910E                           INPUT s1, 0E[switches_hi]             ; get hi switch values
 010  2D008                           OUTPUT s0, 08[leds_lo]                ; put lo led values
 011                                  ;OUTPUT s1, leds_hi                  ; put hi led values
 011  2200E                           JUMP 00E[main]                        ; go back and repeat
 012                                  ;;============================================================================
 012                                  ;; Interrupt - Service Routine.
 012                                  ;;============================================================================
 012  0920F                      isr: INPUT s2, 0F[buttons]                 ; get center button value
 013  0930E                           INPUT s3, 0E[switches_hi]             ; get hi switch values
 014  0940F                           INPUT s4, 0F[buttons]                 ; get button values
 015  2D20A                           OUTPUT s2, 0A[qssd_lo]                ; put lo qssd values
 016  2D30B                           OUTPUT s3, 0B[qssd_hi]                ; put hi qssd values
 017  2D40C                           OUTPUT s4, 0C[qssd_dp]                ; put dp qssd values
 018                                  ;OUTPUT s2, stax                     ; set desired stax
 018                                  ;OUTPUT s3, stay                     ; set desired stay
 018                                  ;INPUT s5, prng                      ; load random endx
 018                                  ;OUTPUT s5, endx                     ; set random endx
 018                                  ;INPUT s5, prng                      ; load random endy
 018                                  ;OUTPUT s5, endy                     ; set random endy
 018  20100                           CALL 100[draw_line]                   ; draws a line (careful: this subroutine overwrites s5)
 019  2001B                           CALL 01B[play]                        ; call play subroutine
 01A  29001                           RETURNI ENABLE                        ; done with isr
 01B                                  ;;============================================================================
 01B                                  ;; Play - Play Subroutine
 01B                                  ;;============================================================================
 01B  0950F                     play: INPUT s5, 0F[buttons]                 ; get center button values
 01C  20026                           CALL 026[map]                         ; draw the map using map subroutine
 01D  0950F                           INPUT s5, 0F[buttons]                 ; get button values
 01E  1D510                           COMPARE s5, 10[buttons_ct]            ; check if center button is pressed
 01F  30076                           CALL Z, 076[move_heli_up]             ; call subroutine that moves the helicopter up
 020  20039                           CALL 039[draw_helicopter]             ; draw the helicopter
 021  2006A                           CALL 06A[random_block_location]       ; determines a random place for the block (y direction only)
 022  2003D                           CALL 03D[draw_block]                  ; draw the block using draw_block subroutine
 023  19E01                           SUB sE, 01                            ;
 024  11C01                           ADD sC, 01                            ;
 025  25000                           RETURN                                ; finished with play subroutine
 026                                  ;;============================================================================
 026                                  ;; Map - Draw Map Subroutine
 026                                  ;;============================================================================
 026  01500                      map: LOAD s5, 00[zero]                     ; load zero into s5
 027  2D500                           OUTPUT s5, 00[stax]                   ; set desired stax
 028  0150F                           LOAD s5, 0F                           ; load 15 into s5
 029  2D501                           OUTPUT s5, 01[stay]                   ; set desired stay
 02A  015FF                           LOAD s5, FF                           ; load 255 into s5
 02B  2D502                           OUTPUT s5, 02[endx]                   ; set desired endx
 02C  0150F                           LOAD s5, 0F                           ; load 15 into s5
 02D  2D503                           OUTPUT s5, 03[endy]                   ; set desired endy
 02E  20100                           CALL 100[draw_line]                   ; draws a line (careful: this subroutine overwrites s5)
 02F  01500                           LOAD s5, 00[zero]                     ; load zero into s5
 030  2D500                           OUTPUT s5, 00[stax]                   ; set desired stax
 031  015F0                           LOAD s5, F0                           ; load 240 into s5
 032  2D501                           OUTPUT s5, 01[stay]                   ; set desired stay
 033  015FF                           LOAD s5, FF                           ; load 255 into s5
 034  2D502                           OUTPUT s5, 02[endx]                   ; set desired endx
 035  015F0                           LOAD s5, F0                           ; load 240 into s5
 036  2D503                           OUTPUT s5, 03[endy]                   ; set desired endy
 037  20100                           CALL 100[draw_line]                   ; draws a line (careful: this subroutine overwrites s5)
 038  25000                           RETURN                                ; finished with map subroutine
 039                                  ;;============================================================================
 039                                  ;; Draw Block - Draw Block Subroutine
 039                                  ;;============================================================================
 039                 draw_helicopter: 
 039  20078                           CALL 078[draw_helicopter_cockpit]     ; call the subroutine to draw the cockpit
 03A  200EC                           CALL 0EC[draw_helicopter_blades]      ; call the subroutine to draw the blades
 03B  200B7                           CALL 0B7[draw_helicopter_tail]        ; call the subroutine to draw the tail
 03C  25000                           RETURN                                ; go back from drawing helicopter
 03D                                  ;;============================================================================
 03D                                  ;; Draw Block - Draw Block Subroutine
 03D                                  ;;============================================================================
 03D                      draw_block: 
 03D                                  ;;============================================================================
 03D                                  ;; Draws Top Line of Block
 03D                                  ;;============================================================================
 03D  005E0                           LOAD s5, sE                           ; load 255 into s5 (horizontal center of block)
 03E  016E1                           LOAD s6, E1                           ; load 245 into s6
 03F  1C650                           COMPARE s6, s5                        ; checking if the block is done "peaking out" from the right (initial compare: 245 ? 255)
 040  3A046                           JUMP C, 046[right_edge]               ; jump to right_edge
 041  0160A                           LOAD s6, 0A                           ; load 10 into s6
 042  1C560                           COMPARE s5, s6                        ; comparing s5 and s6
 043  3A04A                           JUMP C, 04A[left_edge]                ; jump to left_edge
 044  3204A                           JUMP Z, 04A[left_edge]                ; jump to left_edge
 045  2204E                           JUMP 04E[in_middle]                   ; jump to in_middle
 046  2D500               right_edge: OUTPUT s5, 00[stax]                   ; set desired stax
 047  1950A                           SUB s5, 0A                            ;
 048  2D502                           OUTPUT s5, 02[endx]                   ; set desired stax
 049  22051                           JUMP 051[finished1]                   ; jump to draw_ys
 04A  2D500                left_edge: OUTPUT s5, 00[stax]                   ; set desired stax
 04B  01600                           LOAD s6, 00                           ; put 255 into s5
 04C  2D602                           OUTPUT s6, 02[endx]                   ; set desired stax
 04D  22051                           JUMP 051[finished1]                   ; jump to draw_ys
 04E                       in_middle: 
 04E  2D500                           OUTPUT s5, 00[stax]                   ; set desired stax
 04F  1950A                           SUB s5, 0A                            ; subtract the width of block to get the other x coordinate
 050  2D502                           OUTPUT s5, 02[endx]                   ; set desired endx
 051  2DF01                finished1: OUTPUT sF, 01[stay]                   ; set desired stay
 052  2DF03                           OUTPUT sF, 03[endy]                   ; set desired endy
 053  20100                           CALL 100[draw_line]                   ; draws a line (careful: this subroutine overwrites s5)
 054                                  ;;============================================================================
 054                                  ;; Draws Bottom Line of Block
 054                                  ;;============================================================================
 054  005F0                           LOAD s5, sF                           ; load sF into s5
 055  1153C                           ADD s5, 3C                            ; add 40 to s5
 056  2D501                           OUTPUT s5, 01[stay]                   ; set desired stay
 057  2D503                           OUTPUT s5, 03[endy]                   ; set desired endy
 058  20100                           CALL 100[draw_line]                   ; draws a line (careful: this subroutine overwrites s5)
 059                                  ;;============================================================================
 059                                  ;; Draws Right Vertical Line of Block
 059                                  ;;============================================================================
 059  2DE00                           OUTPUT sE, 00[stax]                   ; set desired stax
 05A  2DE02                           OUTPUT sE, 02[endx]                   ; set desired endx
 05B  2DF01                           OUTPUT sF, 01[stay]                   ; set desired stay
 05C  005F0                           LOAD s5, sF                           ; load sF into s5
 05D  1153C                           ADD s5, 3C                            ; add 60 to y coordinate
 05E  2D503                           OUTPUT s5, 03[endy]                   ; set desired endy
 05F  20100                           CALL 100[draw_line]                   ; draws a line (careful: this subroutine overwrites s5)
 060                                  ;;============================================================================
 060                                  ;; Draws Left Vertical Line of Block
 060                                  ;;============================================================================
 060  005E0                           LOAD s5, sE                           ; load sE into s5
 061  1950A                           SUB s5, 0A                            ; subtract 10 from s5
 062  2D500                           OUTPUT s5, 00[stax]                   ; set desired stax
 063  2D502                           OUTPUT s5, 02[endx]                   ; set desired endx
 064  2DF01                           OUTPUT sF, 01[stay]                   ; set desired stay
 065  005F0                           LOAD s5, sF                           ; load sF into s5
 066  1153C                           ADD s5, 3C                            ; add 60 to y coordinate
 067  2D503                           OUTPUT s5, 03[endy]                   ; set desired endy
 068  20100                           CALL 100[draw_line]                   ; draws a line (careful: this subroutine overwrites s5)
 069  25000                           RETURN                                ; finished with draw_block subroutine
 06A                                  ;;============================================================================
 06A                                  ;; Random Block Location - Random Block Location Subroutine
 06A                                  ;;============================================================================
 06A           random_block_location: 
 06A  1DE00                           COMPARE sE, 00                        ; is it time to create a new variable?
 06B  3206E                           JUMP Z, 06E[new_random]               ; jump to new random creator
 06C  3606D                           JUMP NZ, 06D[skip_everything]         ; goes back
 06D  25000          skip_everything: RETURN                                ; returns back
 06E  09507               new_random: INPUT s5, 07[prng]                    ; create to new random number
 06F  1D50F                           COMPARE s5, 0F                        ; check if it's in range
 070  3E072                           JUMP NC, 072[check_other_bound_range] ; check lower bound of map
 071  3A06E                           JUMP C, 06E[new_random]               ; get new variable
 072         check_other_bound_range: 
 072  1D5B4                           COMPARE s5, B4                        ; compare s5 to 180
 073  3E06E                           JUMP NC, 06E[new_random]              ; get a new random number
 074  00F50                           LOAD sF, s5                           ; a new y coordinate generated
 075  25000                           RETURN                                ; get out of subroutine
 076                                  ;;============================================================================
 076                                  ;; Move Helicopter Up - Move Helicopter Up Subroutine
 076                                  ;;============================================================================
 076                    move_heli_up: 
 076  19C02                           SUB sC, 02                            ; move the helicopter up
 077  25000                           RETURN                                ; get out of subroutine
 078                                  ;;============================================================================
 078                                  ;; Draw Helicopter Cockpit - Draw Helicopter Cockpit Subroutine
 078                                  ;;============================================================================
 078         draw_helicopter_cockpit: 
 078                                  ;;============================================================================
 078                                  ;; Draws Cockpit of Helicopter (Line 1a)
 078                                  ;;============================================================================
 078                                  ;; STARTING POINT
 078  01564                           LOAD s5, 64                           ; load 100 into s5
 079  2D500                           OUTPUT s5, 00[stax]                   ; set desired stax
 07A  006C0                           LOAD s6, sC                           ; load sC into s5
 07B  2D601                           OUTPUT s6, 01[stay]                   ; set desired stay
 07C                                  ;; ENDING POINT
 07C  19501                           SUB s5, 01                            ; subtract 7 from s5
 07D  2D502                           OUTPUT s5, 02[endx]                   ; set desired endx
 07E  19603                           SUB s6, 03                            ; go up by 5
 07F  2D603                           OUTPUT s6, 03[endy]                   ; set desired endy
 080  20100                           CALL 100[draw_line]                   ; draws a line (careful: this subroutine overwrites s5)
 081                                  ;;============================================================================
 081                                  ;; Draws Cockpit of Helicopter (Line 1b)
 081                                  ;;============================================================================
 081                                  ;; STARTING POINT
 081  01564                           LOAD s5, 64                           ; load 100 into s5
 082  19501                           SUB s5, 01                            ; subtract 7 from s5
 083  2D500                           OUTPUT s5, 00[stax]                   ; set desired stax
 084  006C0                           LOAD s6, sC                           ; load sC into s5
 085  19603                           SUB s6, 03                            ; go up by 5
 086  2D601                           OUTPUT s6, 01[stay]                   ; set desired stay
 087                                  ;; ENDING POINT
 087  19504                           SUB s5, 04                            ; subtract 7 from s5
 088  2D502                           OUTPUT s5, 02[endx]                   ; set desired endx
 089  19602                           SUB s6, 02                            ; go up by 5
 08A  2D603                           OUTPUT s6, 03[endy]                   ; set desired endy
 08B  20100                           CALL 100[draw_line]                   ; draws a line (careful: this subroutine overwrites s5)
 08C                                  ;;============================================================================
 08C                                  ;; Draws Cockpit of Helicopter (Line 2a)
 08C                                  ;;============================================================================
 08C                                  ;; STARTING POINT
 08C  01564                           LOAD s5, 64                           ; load 100 into s5
 08D  2D500                           OUTPUT s5, 00[stax]                   ; set desired stax
 08E  006C0                           LOAD s6, sC                           ; load sC into s5
 08F  2D601                           OUTPUT s6, 01[stay]                   ; set desired stay
 090                                  ;; ENDING POINT
 090  19501                           SUB s5, 01                            ; subtract 1 from s5
 091  2D502                           OUTPUT s5, 02[endx]                   ; set desired endx
 092  11603                           ADD s6, 03                            ; go down by 3
 093  2D603                           OUTPUT s6, 03[endy]                   ; set desired endy
 094  20100                           CALL 100[draw_line]                   ; draws a line (careful: this subroutine overwrites s5)
 095                                  ;;============================================================================
 095                                  ;; Draws Cockpit of Helicopter (Line 2b)
 095                                  ;;============================================================================
 095                                  ;; STARTING POINT
 095  01564                           LOAD s5, 64                           ; load 100 into s5
 096  19501                           SUB s5, 01                            ; subtract 1 from s5
 097  2D500                           OUTPUT s5, 00[stax]                   ; set desired stax
 098  006C0                           LOAD s6, sC                           ; load sC into s5
 099  11603                           ADD s6, 03                            ; go down by 3
 09A  2D601                           OUTPUT s6, 01[stay]                   ; set desired stay
 09B                                  ;; ENDING POINT
 09B  19504                           SUB s5, 04                            ; subtract 7 from s5
 09C  2D502                           OUTPUT s5, 02[endx]                   ; set desired endx
 09D  11602                           ADD s6, 02                            ; go down by 5
 09E  2D603                           OUTPUT s6, 03[endy]                   ; set desired endy
 09F  20100                           CALL 100[draw_line]                   ; draws a line (careful: this subroutine overwrites s5)
 0A0                                  ;;============================================================================
 0A0                                  ;; Draws Cockpit of Helicopter (Line 3)
 0A0                                  ;;============================================================================
 0A0                                  ;; STARTING POINT
 0A0  01564                           LOAD s5, 64                           ; load 100 into s5
 0A1  19505                           SUB s5, 05                            ; load 7 into s5
 0A2  2D500                           OUTPUT s5, 00[stax]                   ; set desired stax
 0A3  006C0                           LOAD s6, sC                           ; load sC into s5
 0A4  19605                           SUB s6, 05                            ; go up by 5 using subtraction
 0A5  2D601                           OUTPUT s6, 01[stay]                   ; set desired stay
 0A6                                  ;; ENDING POINT
 0A6  19507                           SUB s5, 07                            ; subtract 5 from s5
 0A7  2D502                           OUTPUT s5, 02[endx]                   ; set desired endx
 0A8  11605                           ADD s6, 05                            ; go down by 5
 0A9  2D603                           OUTPUT s6, 03[endy]                   ; set desired endy
 0AA  20100                           CALL 100[draw_line]                   ; draws a line (careful: this subroutine overwrites s5)
 0AB                                  ;;============================================================================
 0AB                                  ;; Draws Cockpit of Helicopter (Line 4)
 0AB                                  ;;============================================================================
 0AB                                  ;; STARTING POINT
 0AB  01564                           LOAD s5, 64                           ; load 100 into s5
 0AC  19505                           SUB s5, 05                            ; load 7 into s5
 0AD  2D500                           OUTPUT s5, 00[stax]                   ; set desired stax
 0AE  006C0                           LOAD s6, sC                           ; load sC into s5
 0AF  11605                           ADD s6, 05                            ; go down by 5 using addition
 0B0  2D601                           OUTPUT s6, 01[stay]                   ; set desired stay
 0B1                                  ;; ENDING POINT
 0B1  19507                           SUB s5, 07                            ; subtract 5 from s5
 0B2  2D502                           OUTPUT s5, 02[endx]                   ; set desired endx
 0B3  19605                           SUB s6, 05                            ; go back up by 5
 0B4  2D603                           OUTPUT s6, 03[endy]                   ; set desired endy
 0B5  20100                           CALL 100[draw_line]                   ; draws a line (careful: this subroutine overwrites s5)
 0B6  25000                           RETURN                                ; go back from subroutine
 0B7                                  ;;============================================================================
 0B7                                  ;; Draw Helicopter Tail - Draw Helicopter Tail Subroutine
 0B7                                  ;;============================================================================
 0B7            draw_helicopter_tail: 
 0B7                                  ;;============================================================================
 0B7                                  ;; Draws Tail of Helicopter (Line 1)
 0B7                                  ;;============================================================================
 0B7                                  ;; STARTING POINT
 0B7  01564                           LOAD s5, 64                           ; load 100 into s5
 0B8  1950A                           SUB s5, 0A                            ; subtract 0xA from s5
 0B9  2D500                           OUTPUT s5, 00[stax]                   ; set desired stax
 0BA  006C0                           LOAD s6, sC                           ; load sC into s5
 0BB  19602                           SUB s6, 02                            ; subtract 2 from s6
 0BC  2D601                           OUTPUT s6, 01[stay]                   ; set desired stay
 0BD                                  ;; ENDING POINT
 0BD  19507                           SUB s5, 07                            ; subtract 7 from s5
 0BE  2D502                           OUTPUT s5, 02[endx]                   ; set desired endx
 0BF  2D603                           OUTPUT s6, 03[endy]                   ; set desired endy
 0C0  20100                           CALL 100[draw_line]                   ; draws a line (careful: this subroutine overwrites s5)
 0C1                                  ;;============================================================================
 0C1                                  ;; Draws Tail of Helicopter (Line 2)
 0C1                                  ;;============================================================================
 0C1                                  ;; STARTING POINT
 0C1  01564                           LOAD s5, 64                           ; load 100 into s5
 0C2  1950C                           SUB s5, 0C                            ; subtract 0xC from s5
 0C3  2D500                           OUTPUT s5, 00[stax]                   ; set desired stax
 0C4  006C0                           LOAD s6, sC                           ; load sC into s5
 0C5  2D601                           OUTPUT s6, 01[stay]                   ; set desired stay
 0C6                                  ;; ENDING POINT
 0C6  19508                           SUB s5, 08                            ; subtract 7 from s5
 0C7  2D502                           OUTPUT s5, 02[endx]                   ; set desired endx
 0C8  2D603                           OUTPUT s6, 03[endy]                   ; set desired endy
 0C9  20100                           CALL 100[draw_line]                   ; draws a line (careful: this subroutine overwrites s5)
 0CA                                  ;;============================================================================
 0CA                                  ;; Draws Tail of Helicopter (Line 3)
 0CA                                  ;;============================================================================
 0CA                                  ;; STARTING POINT
 0CA  01564                           LOAD s5, 64                           ; load 100 into s5
 0CB  1950A                           SUB s5, 0A                            ; subtract 0x0A from s5
 0CC  19508                           SUB s5, 08                            ; subtract 0x10 from s5
 0CD  2D500                           OUTPUT s5, 00[stax]                   ; set desired stax
 0CE  006C0                           LOAD s6, sC                           ; load sC into s5
 0CF  19602                           SUB s6, 02                            ; subtract 2 from s6
 0D0  2D601                           OUTPUT s6, 01[stay]                   ; set desired stay
 0D1                                  ;; ENDING POINT
 0D1  19502                           SUB s5, 02                            ; subtract 2 from s5
 0D2  2D502                           OUTPUT s5, 02[endx]                   ; set desired endx
 0D3  19602                           SUB s6, 02                            ; subtract 2 from s6
 0D4  2D603                           OUTPUT s6, 03[endy]                   ; set desired endy
 0D5  20100                           CALL 100[draw_line]                   ; draws a line (careful: this subroutine overwrites s5)
 0D6                                  ;;============================================================================
 0D6                                  ;; Draws Tail of Helicopter (Line 4)
 0D6                                  ;;============================================================================
 0D6                                  ;; STARTING POINT
 0D6  01564                           LOAD s5, 64                           ; load 100 into s5
 0D7  1950C                           SUB s5, 0C                            ; subtract 0x0C from s5
 0D8  19509                           SUB s5, 09                            ; subtract 0x09 from s5
 0D9  2D500                           OUTPUT s5, 00[stax]                   ; set desired stax
 0DA  006C0                           LOAD s6, sC                           ; load sC into s5
 0DB  2D601                           OUTPUT s6, 01[stay]                   ; set desired stay
 0DC                                  ;; ENDING POINT
 0DC                                  ;SUB s5, 01                          ; subtract 2 from s5
 0DC  2D502                           OUTPUT s5, 02[endx]                   ; set desired endx
 0DD  11601                           ADD s6, 01                            ; add 1 to s6
 0DE  2D603                           OUTPUT s6, 03[endy]                   ; set desired endy
 0DF  20100                           CALL 100[draw_line]                   ; draws a line (careful: this subroutine overwrites s5)
 0E0                                  ;;============================================================================
 0E0                                  ;; Draws Tail of Helicopter (Line 5)
 0E0                                  ;;============================================================================
 0E0                                  ;; STARTING POINT
 0E0  01564                           LOAD s5, 64                           ; load 100 into s5
 0E1  1950A                           SUB s5, 0A                            ; subtract 0x0A from s5
 0E2  1950A                           SUB s5, 0A                            ; subtract 0x0A from s5
 0E3  2D500                           OUTPUT s5, 00[stax]                   ; set desired stax
 0E4  006C0                           LOAD s6, sC                           ; load sC into s5
 0E5  19604                           SUB s6, 04                            ; subtract 4 from s6
 0E6  2D601                           OUTPUT s6, 01[stay]                   ; set desired stay
 0E7                                  ;; ENDING POINT
 0E7  2D502                           OUTPUT s5, 02[endx]                   ; set desired endx
 0E8  11605                           ADD s6, 05                            ; add 1 to s6
 0E9  2D603                           OUTPUT s6, 03[endy]                   ; set desired endy
 0EA  20100                           CALL 100[draw_line]                   ; draws a line (careful: this subroutine overwrites s5)
 0EB  25000                           RETURN                                ; go back from subroutine
 0EC                                  ;;============================================================================
 0EC                                  ;; Draw Helicopter Blades - Draw Helicopter Blades Subroutine
 0EC                                  ;;============================================================================
 0EC          draw_helicopter_blades: 
 0EC                                  ;;============================================================================
 0EC                                  ;; Draws Blades of Helicopter (Line 1)
 0EC                                  ;;============================================================================
 0EC                                  ;; STARTING POINT
 0EC  01564                           LOAD s5, 64                           ; load 100 into s5
 0ED  19505                           SUB s5, 05                            ; subtract 0xA from s5
 0EE  2D500                           OUTPUT s5, 00[stax]                   ; set desired stax
 0EF  006C0                           LOAD s6, sC                           ; load sC into s5
 0F0  19605                           SUB s6, 05                            ; subtract 2 from s6
 0F1  2D601                           OUTPUT s6, 01[stay]                   ; set desired stay
 0F2                                  ;; ENDING POINT
 0F2  2D502                           OUTPUT s5, 02[endx]                   ; set desired endx
 0F3  19602                           SUB s6, 02                            ; subtract 2 from s6
 0F4  2D603                           OUTPUT s6, 03[endy]                   ; set desired endy
 0F5  20100                           CALL 100[draw_line]                   ; draws a line (careful: this subroutine overwrites s5)
 0F6                                  ;;============================================================================
 0F6                                  ;; Draws Blades of Helicopter (Line 2)
 0F6                                  ;;============================================================================
 0F6                                  ;; STARTING POINT
 0F6  01564                           LOAD s5, 64                           ; load 100 into s5
 0F7  2D500                           OUTPUT s5, 00[stax]                   ; set desired stax
 0F8  006C0                           LOAD s6, sC                           ; load sC into s5
 0F9  19607                           SUB s6, 07                            ; subtract 2 from s6
 0FA  2D601                           OUTPUT s6, 01[stay]                   ; set desired stay
 0FB                                  ;; ENDING POINT
 0FB  1950A                           SUB s5, 0A                            ; subtract 10 from s5
 0FC  2D502                           OUTPUT s5, 02[endx]                   ; set desired endx
 0FD  2D603                           OUTPUT s6, 03[endy]                   ; set desired endy
 0FE  20100                           CALL 100[draw_line]                   ; draws a line (careful: this subroutine overwrites s5)
 0FF  25000                           RETURN                                ; go back from subroutine
 100                                  ;;============================================================================
 100                                  ;; Draw Line - Draw Line Subroutine
 100                                  ;;============================================================================
 100  01501                draw_line: LOAD s5, 01[busy_go]                  ; load go command
 101  2D504                           OUTPUT s5, 04[busy]                   ; send go command
 102  09504                     wait: INPUT s5, 04[busy]                    ; read busy status
 103  1D501                           COMPARE s5, 01[busy_go]               ; check busy status
 104  32102                           JUMP Z, 102[wait]                     ; if busy, wait more
 105  25000                           RETURN                                ; leave line drawing subroutine
 106                                  ;;============================================================================
 106                                  ;; Interrupt - Vector.
 106                                  ;;============================================================================
 7FF                                  ADDRESS 7FF                           ; must be located here
 7FF  22012               isr_vector: JUMP 012[isr]                         ; always jump to isr
 800                                  ;;============================================================================
 800                                  ;;
 800                                  ;;============================================================================



List of PSM files that have been assembled

F:\fpga_video_game\latest_fpga_video_game\software\software.psm



List of defined constants

 CONSTANT name     Value        Source PSM File

 timestamp_hours   23'd         
 timestamp_minutes 35'd         
 timestamp_seconds 04'd         
 datestamp_year    15'd         
 datestamp_month   11'd         
 datestamp_day     26'd         
 NUL               00           
 BEL               07           
 BS                08           
 HT                09           
 LF                0A           
 VT                0B           
 CR                0D           
 ESC               1B           
 DEL               7F           
 DCS               90           
 ST                9C           
 stax              00           software.psm
 stay              01           software.psm
 endx              02           software.psm
 endy              03           software.psm
 busy              04           software.psm
 beam              05           software.psm
 mode              06           software.psm
 prng              07           software.psm
 leds_lo           08           software.psm
 leds_hi           09           software.psm
 qssd_lo           0A           software.psm
 qssd_hi           0B           software.psm
 qssd_dp           0C           software.psm
 switches_lo       0D           software.psm
 switches_hi       0E           software.psm
 buttons           0F           software.psm
 zero              00           software.psm
 one               01           software.psm
 busy_go           01           software.psm
 beam_hi           0F           software.psm
 beam_md           07           software.psm
 beam_lo           03           software.psm
 mode_hld          00           software.psm
 mode_clr          01           software.psm
 mode_lin          02           software.psm
 mode_exp          03           software.psm
 buttons_ct        10           software.psm
 buttons_up        08           software.psm
 buttons_dn        04           software.psm
 buttons_lf        02           software.psm
 buttons_rt        01           software.psm



No TABLEs defined



List of text strings

 STRING name       String         Source PSM File

 KCPSM6_version$   "v2.51"        
 datestamp$        "26 Nov 2015"  
 timestamp$        "23:35:04"     



List of line labels

   Label                     Addr  Source PSM File

 * boot                      000   software.psm
   main                      00E   software.psm
   isr                       012   software.psm
   play                      01B   software.psm
   map                       026   software.psm
   draw_helicopter           039   software.psm
   draw_block                03D   software.psm
   right_edge                046   software.psm
   left_edge                 04A   software.psm
   in_middle                 04E   software.psm
   finished1                 051   software.psm
   random_block_location     06A   software.psm
   skip_everything           06D   software.psm
   new_random                06E   software.psm
   check_other_bound_range   072   software.psm
   move_heli_up              076   software.psm
   draw_helicopter_cockpit   078   software.psm
   draw_helicopter_tail      0B7   software.psm
   draw_helicopter_blades    0EC   software.psm
   draw_line                 100   software.psm
   wait                      102   software.psm
 * isr_vector                7FF   software.psm

      * Line label has not been referenced in any instructions.
        Hint - This may indicate unused code that could be
               removed to reduce the size of this program.



Instruction usage statistics

 Instruction    Instances

 LOAD             55
 STAR              -

 AND               -
 OR                -
 XOR               -

 ADD              11
 ADDCY             -
 SUB              40
 SUBCY             -

 TEST              -
 TESTCY            -
 COMPARE           7
 COMPARECY         -

 SL0               -
 SL1               -
 SLX               -
 SLA               -
 RL                -
 SR0               -
 SR1               -
 SRX               -
 SRA               -
 RR                -

 REGBANK           -

 INPUT             9
 OUTPUT           85
 OUTPUTK           -

 STORE             -
 FETCH             -

 DISABLE           -
 ENABLE            1
 RETURNI           1

 JUMP             14
 JUMP@             -
 CALL             29
 CALL@             -
 RETURN           11
 LOAD&RETURN       -

 HWBUILD           -



End of KCPSM6 log file.
