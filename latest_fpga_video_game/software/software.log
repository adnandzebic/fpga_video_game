Open Picoblaze Assembler log for program "software.psm"
Generated by opbasm v 1.2
  Assembled on 2015-11-30T02:36:33
  Picoblaze-6 mode

  Last occupied address: 7FF hex
  Nominal program memory size: 2K (2048)  address(10:0)
  Actual memory size: 4096
  Occupied memory locations: 594
  Memory locations available: 3502
  Scratchpad size: 256


Assembly listing
----------------
000                             ;;============================================================================
000                             ;; File: software.psm
000                             ;; This is the PicoBlaze program for EE178 Lab #8.
000                             ;;============================================================================

000                             ;;============================================================================
000                             ;; Port address declarations.
000                             ;;============================================================================

000                             CONSTANT stax, 00              ; port for 8-bit start-x
000                             CONSTANT stay, 01              ; port for 8-bit start-y
000                             CONSTANT endx, 02              ; port for 8-bit end-x
000                             CONSTANT endy, 03              ; port for 8-bit end-y
000                             CONSTANT busy, 04              ; port for 8-bit busy
000                             CONSTANT beam, 05              ; port for 8-bit beam
000                             CONSTANT mode, 06              ; port for 8-bit mode
000                             CONSTANT prng, 07              ; port for 8-bit prng
000                             CONSTANT leds_lo, 08           ; port for 8-bit led data out
000                             CONSTANT leds_hi, 09           ; port for 8-bit led data out
000                             CONSTANT qssd_lo, 0a           ; port for 8-bit qssd data out
000                             CONSTANT qssd_hi, 0b           ; port for 8-bit qssd data out
000                             CONSTANT qssd_dp, 0c           ; port for 8-bit qssd data out
000                             CONSTANT switches_lo, 0d       ; port for 8-bit switch input
000                             CONSTANT switches_hi, 0e       ; port for 8-bit switch input
000                             CONSTANT buttons, 0f           ; port for 8-bit button input

000                             CONSTANT zero, 00              ; zero
000                             CONSTANT one, 01               ; one

000                             CONSTANT busy_go, 01           ; go command and busy status

000                             CONSTANT beam_hi, 0f           ; beam high intensity
000                             CONSTANT beam_md, 07           ; beam med intensity
000                             CONSTANT beam_lo, 03           ; beam low intensity

000                             CONSTANT mode_hld, 00          ; mode hold framebuffer
000                             CONSTANT mode_clr, 01          ; mode clear framebuffer
000                             CONSTANT mode_lin, 02          ; mode linear decay
000                             CONSTANT mode_exp, 03          ; mode exponential decay

000                             CONSTANT buttons_ct, 10        ; center
000                             CONSTANT buttons_up, 08        ; up
000                             CONSTANT buttons_dn, 04        ; down
000                             CONSTANT buttons_lf, 02        ; left
000                             CONSTANT buttons_rt, 01        ; right

000                             ;;============================================================================
000                             ;; Macro State declarations
000                             ;;============================================================================

000                             CONSTANT START_STATE, 00       ; start screen state
000                             CONSTANT PLAY_STATE, 01        ; play state
000                             CONSTANT GAMEOVER_STATE, 02    ; game over screen state
000                             CONSTANT CREDITS_STATE, 03     ; credits screen state (not used for now)

000                             ;;============================================================================
000                             ;; Boot.
000                             ;;============================================================================

000  01000                boot: LOAD s0, zero                  ; initialize
001  01100                      LOAD s1, zero                  ; initialize
002  01200                      LOAD s2, zero                  ; initialize
003  01300                      LOAD s3, zero                  ; initialize
004  01400                      LOAD s4, zero                  ; initialize
005  01900                      LOAD s9, START_STATE           ; initial state is to enter start screen
006  01A00                      LOAD sa, 00                    ; initial distance (score)
007  01B00                      LOAD sb, 00                    ; initial distance (score)
008  01C80                      LOAD sc, 80                    ; starting helicopter position
009  01D05                      LOAD sd, 05                    ; initialize (needed later)
00A  01EFF                      LOAD se, FF                    ; load 255 into sE (horizontal coordinate of block)
00B  01F62                      LOAD sf, 62                    ; load 108 into sF (vertical coordinate of block)
00C  01503                      LOAD s5, mode_exp              ; load desired mode
00D  2D506                      OUTPUT s5, mode                ; set desired mode
00E  0150F                      LOAD s5, beam_hi               ; load desired beam
00F  2D505                      OUTPUT s5, beam                ; set desired beam
010  28001                      ENABLE INTERRUPT               ; enable interrupts

011                             ;;============================================================================
011                             ;; Main.
011                             ;;============================================================================

011                       main:
011  22011                      JUMP main                      ; go back and repeat

012                             ;;============================================================================
012                             ;; Interrupt - Service Routine.
012                             ;;============================================================================

012  1D900                 isr: COMPARE s9, START_STATE        ; check if in the start state
013  30019                      CALL Z, start                  ; call the start screen state
014  1D901                      COMPARE s9, PLAY_STATE         ; check if in the play state
015  30032                      CALL Z, play                   ; call play subroutine
016  1D902                      COMPARE s9, GAMEOVER_STATE     ; check if in the gameover state
017  30022                      CALL Z, gameover               ; call the gameover subroutine

018  29001                      RETURNI ENABLE                 ; done with isr

019                             ;;============================================================================
019                             ;; Start - Start Subroutine
019                             ;;============================================================================

019  0950F               start: INPUT s5, buttons              ; get center button values
01A  20047                      CALL start_screen              ; draw the map using map subroutine

01B  0950F                      INPUT s5, buttons              ; get button values
01C  1D510                      COMPARE s5, buttons_ct         ; check if center button is pressed
01D  3201F                      JUMP Z, enter_play_state       ; jump to enter_play_state
01E  36021                      JUMP NZ, stay_in_start_state   ; remain in current state with a jump to stay_in_start_state

01F           enter_play_state:
01F  01901                      LOAD s9, PLAY_STATE            ; load play_state and enter play mode
020  25000                      RETURN                         ; return from start subroutine

021        stay_in_start_state:
021  25000                      RETURN                         ; return from start subroutine

022                             ;;============================================================================
022                             ;; Game Over - Game Over Subroutine
022                             ;;============================================================================

022  0950F            gameover: INPUT s5, buttons              ; get center button values
023                             ;CALL map                            ; draw the map using map subroutine

023  0950F                      INPUT s5, buttons              ; get button values
024  1D510                      COMPARE s5, buttons_ct         ; check if center button is pressed
025  32027                      JUMP Z, enter_play_state2      ; jump to enter_play_state2
026  36031                      JUMP NZ, stay_in_gameover_state ; remain in current state with a jump to stay_in_gameover_state

027          enter_play_state2:
027  01901                      LOAD s9, PLAY_STATE            ; load play_state and enter play mode

028                             ;; RESET EVERYTHING BEFORE RETURNING
028  01A00                      LOAD sa, 00                    ; initial distance (score)
029  01B00                      LOAD sb, 00                    ; initial distance (score)
02A  2DB0A                      OUTPUT sb, qssd_lo             ; reset qssd_lo
02B  2DA0B                      OUTPUT sa, qssd_hi             ; reset qssd_hi
02C  01C80                      LOAD sc, 80                    ; starting helicopter position
02D  01D05                      LOAD sd, 05                    ; initialize (needed later)
02E  01EFF                      LOAD se, FF                    ; load 255 into sE (horizontal coordinate of block)
02F  01F62                      LOAD sf, 62                    ; load 108 into sF (vertical coordinate of block)
030  25000                      RETURN                         ; return from start subroutine

031        stay_in_gameover_state:
031  25000                      RETURN                         ; return from start subroutine

032                             ;;============================================================================
032                             ;; Play - Play Subroutine
032                             ;;============================================================================

032  0950F                play: INPUT s5, buttons              ; get center button values
033  2003C                      CALL map                       ; draw the map using map subroutine

034  0950F                      INPUT s5, buttons              ; get button values
035  1D510                      COMPARE s5, buttons_ct         ; check if center button is pressed
036  30161                      CALL Z, move_heli_up           ; call subroutine that moves the helicopter up

037  20124                      CALL draw_helicopter           ; draw the helicopter
038  20155                      CALL random_block_location     ; determines a random place for the block (y direction only)
039  20128                      CALL draw_block                ; draw the block using draw_block subroutine
03A  2021D                      CALL check_collision           ; check if any collisions happen

03B  25000                      RETURN                         ; finished with play subroutine

03C                             ;;============================================================================
03C                             ;; Map - Draw Map Subroutine
03C                             ;;============================================================================

03C                        map:

03C                             ;;============================================================================
03C                             ;; Draws Top Line of Map (Line 1)
03C                             ;;============================================================================

03C  01000                      LOAD s0, 00                    ; load 00 into s0
03D  0110F                      LOAD s1, 0F                    ; load 0F into s1
03E  012FF                      LOAD s2, FF                    ; load FF into s2
03F  0130F                      LOAD s3, 0F                    ; load 0F into s3
040  2020D                      CALL draw_line                 ; draws the line

041                             ;;============================================================================
041                             ;; Draws Bottom Line of Map (Line 2)
041                             ;;============================================================================

041  01000                      LOAD s0, 00                    ; load 00 into s0
042  011F0                      LOAD s1, F0                    ; load 0F into s1
043  012FF                      LOAD s2, FF                    ; load FF into s2
044  013F0                      LOAD s3, F0                    ; load F0 into s3
045  2020D                      CALL draw_line                 ; draws the line

046  25000                      RETURN                         ; go back from drawing map

047                             ;;============================================================================
047                             ;; Start Screen - Draw Start Screen Subroutine
047                             ;;============================================================================

047               start_screen:

047                             ;;============================================================================
047                             ;; Draws Decoration (Line 1a)
047                             ;;============================================================================

047  01000                      LOAD s0, 00                    ; load 00 into s0
048  0110A                      LOAD s1, 0A                    ; load 0A into s1
049  012FF                      LOAD s2, FF                    ; load FF into s2
04A  0130A                      LOAD s3, 0A                    ; load 0A into s3
04B  2020D                      CALL draw_line                 ; draws the line

04C                             ;;===========================================================================
04C                             ;; Draws Decoration (Line 2a)
04C                             ;;============================================================================

04C  01000                      LOAD s0, 00                    ; load 00 into s0
04D  0110C                      LOAD s1, 0C                    ; load 0C into s1
04E  012FF                      LOAD s2, FF                    ; load FF into s2
04F  0130C                      LOAD s3, 0C                    ; load 0C into s3
050  2020D                      CALL draw_line                 ; draws the line

051                             ;;===========================================================================
051                             ;; Draws Decoration (Line 3a)
051                             ;;============================================================================

051  01000                      LOAD s0, 00                    ; load 00 into s0
052  0110E                      LOAD s1, 0E                    ; load 0E into s1
053  012FF                      LOAD s2, FF                    ; load FF into s2
054  0130E                      LOAD s3, 0E                    ; load 0E into s3
055  2020D                      CALL draw_line                 ; draws the line

056                             ;;============================================================================
056                             ;; Draws Decoration (Line 1b)
056                             ;;============================================================================

056  01000                      LOAD s0, 00                    ; load 00 into s0
057  01188                      LOAD s1, 88                    ; load 88 into s1
058  012FF                      LOAD s2, FF                    ; load FF into s2
059  01388                      LOAD s3, 88                    ; load 88 into s3
05A  2020D                      CALL draw_line                 ; draws the line

05B                             ;;===========================================================================
05B                             ;; Draws Decoration (Line 2b)
05B                             ;;============================================================================

05B  01000                      LOAD s0, 00                    ; load 00 into s0
05C  0118A                      LOAD s1, 8A                    ; load 8A into s1
05D  012FF                      LOAD s2, FF                    ; load FF into s2
05E  0138A                      LOAD s3, 8A                    ; load 8A into s3
05F  2020D                      CALL draw_line                 ; draws the line

060                             ;;===========================================================================
060                             ;; Draws Decoration (Line 3b)
060                             ;;============================================================================

060  01000                      LOAD s0, 00                    ; load 00 into s0
061  0118C                      LOAD s1, 8C                    ; load 8A into s1
062  012FF                      LOAD s2, FF                    ; load FF into s2
063  0138C                      LOAD s3, 8C                    ; load 8C into s3
064  2020D                      CALL draw_line                 ; draws the line

065                             ;;============================================================================
065                             ;; Draws the letter H (Line 1)
065                             ;;============================================================================

065                             ;; STARTING POINT
065  0150A                      LOAD s5, 0A                    ; load 10 into s5
066  2D500                      OUTPUT s5, stax                ; set desired stax
067  0161E                      LOAD s6, 1E                    ; load 30 into s6
068  2D601                      OUTPUT s6, stay                ; set desired stay

069                             ;; ENDING POINT
069  2D502                      OUTPUT s5, endx                ; set desired endx
06A  0163C                      LOAD s6, 3C                    ; load 60 into s6
06B  2D603                      OUTPUT s6, endy                ; set desired endy
06C  20217                      CALL old_draw_line             ; draws a line (careful: this subroutine overwrites s5)

06D                             ;;============================================================================
06D                             ;; Draws the letter H (Line 2)
06D                             ;;============================================================================

06D                             ;; STARTING POINT
06D  0150A                      LOAD s5, 0A                    ; load 10 into s5
06E  2D500                      OUTPUT s5, stax                ; set desired stax
06F  0162D                      LOAD s6, 2D                    ; load 45 into s6
070  2D601                      OUTPUT s6, stay                ; set desired stay

071                             ;; ENDING POINT
071  0151E                      LOAD s5, 1E                    ; load 30 into s5
072  2D502                      OUTPUT s5, endx                ; set desired endx
073  2D603                      OUTPUT s6, endy                ; set desired endy
074  20217                      CALL old_draw_line             ; draws a line (careful: this subroutine overwrites s5)

075                             ;;============================================================================
075                             ;; Draws the letter H (Line 3)
075                             ;;============================================================================

075                             ;; STARTING POINT
075  0151E                      LOAD s5, 1E                    ; load 30 into s5
076  2D500                      OUTPUT s5, stax                ; set desired stax
077  0161E                      LOAD s6, 1E                    ; load 30 into s6
078  2D601                      OUTPUT s6, stay                ; set desired stay

079                             ;; ENDING POINT
079  2D502                      OUTPUT s5, endx                ; set desired endx
07A  0163C                      LOAD s6, 3C                    ; load 60 into s6
07B  2D603                      OUTPUT s6, endy                ; set desired endy
07C  20217                      CALL old_draw_line             ; draws a line (careful: this subroutine overwrites s5)

07D                             ;;============================================================================
07D                             ;; Draws the letter E (Line 1)
07D                             ;;============================================================================

07D                             ;; STARTING POINT
07D  01528                      LOAD s5, 28                    ; load 40 into s5
07E  2D500                      OUTPUT s5, stax                ; set desired stax
07F  0161E                      LOAD s6, 1E                    ; load 30 into s6
080  2D601                      OUTPUT s6, stay                ; set desired stay

081                             ;; ENDING POINT
081  2D502                      OUTPUT s5, endx                ; set desired endx
082  0163C                      LOAD s6, 3C                    ; load 60 into s6
083  2D603                      OUTPUT s6, endy                ; set desired endy
084  20217                      CALL old_draw_line             ; draws a line (careful: this subroutine overwrites s5)

085                             ;;============================================================================
085                             ;; Draws the letter E (Line 2)
085                             ;;============================================================================

085                             ;; STARTING POINT
085  01528                      LOAD s5, 28                    ; load 40 into s5
086  2D500                      OUTPUT s5, stax                ; set desired stax
087  0161E                      LOAD s6, 1E                    ; load 30 into s6
088  2D601                      OUTPUT s6, stay                ; set desired stay

089                             ;; ENDING POINT
089  0153C                      LOAD s5, 3C                    ; load 60 into s5
08A  2D502                      OUTPUT s5, endx                ; set desired endx
08B  2D603                      OUTPUT s6, endy                ; set desired endy
08C  20217                      CALL old_draw_line             ; draws a line (careful: this subroutine overwrites s5)

08D                             ;;============================================================================
08D                             ;; Draws the letter E (Line 3)
08D                             ;;============================================================================

08D                             ;; STARTING POINT
08D  01528                      LOAD s5, 28                    ; load 40 into s5
08E  2D500                      OUTPUT s5, stax                ; set desired stax
08F  0162D                      LOAD s6, 2D                    ; load 45 into s6
090  2D601                      OUTPUT s6, stay                ; set desired stay

091                             ;; ENDING POINT
091  0153C                      LOAD s5, 3C                    ; load 60 into s5
092  2D502                      OUTPUT s5, endx                ; set desired endx
093  2D603                      OUTPUT s6, endy                ; set desired endy
094  20217                      CALL old_draw_line             ; draws a line (careful: this subroutine overwrites s5)

095                             ;;============================================================================
095                             ;; Draws the letter E (Line 3)
095                             ;;============================================================================

095                             ;; STARTING POINT
095  01528                      LOAD s5, 28                    ; load 40 into s5
096  2D500                      OUTPUT s5, stax                ; set desired stax
097  0163C                      LOAD s6, 3C                    ; load 45 into s6
098  2D601                      OUTPUT s6, stay                ; set desired stay

099                             ;; ENDING POINT
099  0153C                      LOAD s5, 3C                    ; load 60 into s5
09A  2D502                      OUTPUT s5, endx                ; set desired endx
09B  2D603                      OUTPUT s6, endy                ; set desired endy
09C  20217                      CALL old_draw_line             ; draws a line (careful: this subroutine overwrites s5)

09D                             ;;============================================================================
09D                             ;; Draws the letter L (Line 1)
09D                             ;;============================================================================

09D                             ;; STARTING POINT
09D  01546                      LOAD s5, 46                    ; load 70 into s5
09E  2D500                      OUTPUT s5, stax                ; set desired stax
09F  0161E                      LOAD s6, 1E                    ; load 30 into s6
0A0  2D601                      OUTPUT s6, stay                ; set desired stay

0A1                             ;; ENDING POINT
0A1  2D502                      OUTPUT s5, endx                ; set desired endx
0A2  0163C                      LOAD s6, 3C                    ; load 60 into s6
0A3  2D603                      OUTPUT s6, endy                ; set desired endy
0A4  20217                      CALL old_draw_line             ; draws a line (careful: this subroutine overwrites s5)

0A5                             ;;============================================================================
0A5                             ;; Draws the letter L (Line 2)
0A5                             ;;============================================================================

0A5                             ;; STARTING POINT
0A5  01546                      LOAD s5, 46                    ; load 70 into s5
0A6  2D500                      OUTPUT s5, stax                ; set desired stax
0A7  0163C                      LOAD s6, 3C                    ; load 45 into s6
0A8  2D601                      OUTPUT s6, stay                ; set desired stay

0A9                             ;; ENDING POINT
0A9  0155A                      LOAD s5, 5A                    ; load 90 into s5
0AA  2D502                      OUTPUT s5, endx                ; set desired endx
0AB  2D603                      OUTPUT s6, endy                ; set desired endy
0AC  20217                      CALL old_draw_line             ; draws a line (careful: this subroutine overwrites s5)

0AD                             ;;============================================================================
0AD                             ;; Draws the letter I (Line 1)
0AD                             ;;============================================================================

0AD                             ;; STARTING POINT
0AD  01564                      LOAD s5, 64                    ; load 70 into s5
0AE  2D500                      OUTPUT s5, stax                ; set desired stax
0AF  0161E                      LOAD s6, 1E                    ; load 30 into s6
0B0  2D601                      OUTPUT s6, stay                ; set desired stay

0B1                             ;; ENDING POINT
0B1  2D502                      OUTPUT s5, endx                ; set desired endx
0B2  0163C                      LOAD s6, 3C                    ; load 60 into s6
0B3  2D603                      OUTPUT s6, endy                ; set desired endy
0B4  20217                      CALL old_draw_line             ; draws a line (careful: this subroutine overwrites s5)

0B5                             ;;============================================================================
0B5                             ;; Draws the letter C (Line 1)
0B5                             ;;============================================================================

0B5                             ;; STARTING POINT
0B5  01582                      LOAD s5, 82                    ; load 130 into s5
0B6  2D500                      OUTPUT s5, stax                ; set desired stax
0B7  0161E                      LOAD s6, 1E                    ; load 45 into s6
0B8  2D601                      OUTPUT s6, stay                ; set desired stay

0B9                             ;; ENDING POINT
0B9  01573                      LOAD s5, 73                    ; load 115 into s5
0BA  2D502                      OUTPUT s5, endx                ; set desired endx
0BB  2D603                      OUTPUT s6, endy                ; set desired endy
0BC  20217                      CALL old_draw_line             ; draws a line (careful: this subroutine overwrites s5)

0BD                             ;;============================================================================
0BD                             ;; Draws the letter C (Line 2)
0BD                             ;;============================================================================

0BD                             ;; STARTING POINT
0BD  01573                      LOAD s5, 73                    ; load 115 into s5
0BE  2D500                      OUTPUT s5, stax                ; set desired stax
0BF  0161E                      LOAD s6, 1E                    ; load 45 into s6
0C0  2D601                      OUTPUT s6, stay                ; set desired stay

0C1                             ;; ENDING POINT
0C1  0156E                      LOAD s5, 6E                    ; load 110 into s5
0C2  2D502                      OUTPUT s5, endx                ; set desired endx
0C3  01623                      LOAD s6, 23                    ; load 35 into s6
0C4  2D603                      OUTPUT s6, endy                ; set desired endy
0C5  20217                      CALL old_draw_line             ; draws a line (careful: this subroutine overwrites s5)

0C6                             ;;============================================================================
0C6                             ;; Draws the letter C (Line 3)
0C6                             ;;============================================================================

0C6                             ;; STARTING POINT
0C6  0156E                      LOAD s5, 6E                    ; load 110 into s5
0C7  2D500                      OUTPUT s5, stax                ; set desired stax
0C8  01623                      LOAD s6, 23                    ; load 35 into s6
0C9  2D601                      OUTPUT s6, stay                ; set desired stay

0CA                             ;; ENDING POINT
0CA  2D502                      OUTPUT s5, endx                ; set desired endx
0CB  01637                      LOAD s6, 37                    ; load 55 into s6
0CC  2D603                      OUTPUT s6, endy                ; set desired endy
0CD  20217                      CALL old_draw_line             ; draws a line (careful: this subroutine overwrites s5)

0CE                             ;;============================================================================
0CE                             ;; Draws the letter C (Line 4)
0CE                             ;;============================================================================

0CE                             ;; STARTING POINT
0CE  0156E                      LOAD s5, 6E                    ; load 110 into s5
0CF  2D500                      OUTPUT s5, stax                ; set desired stax
0D0  01637                      LOAD s6, 37                    ; load 55 into s6
0D1  2D601                      OUTPUT s6, stay                ; set desired stay

0D2                             ;; ENDING POINT
0D2  01573                      LOAD s5, 73                    ; load 130 into s5
0D3  2D502                      OUTPUT s5, endx                ; set desired endx
0D4  0163B                      LOAD s6, 3B                    ; load 44 into s6
0D5  2D603                      OUTPUT s6, endy                ; set desired endy
0D6  20217                      CALL old_draw_line             ; draws a line (careful: this subroutine overwrites s5)

0D7                             ;;============================================================================
0D7                             ;; Draws the letter C (Line 5)
0D7                             ;;============================================================================

0D7                             ;; STARTING POINT
0D7  01582                      LOAD s5, 82                    ; load 130 into s5
0D8  2D500                      OUTPUT s5, stax                ; set desired stax
0D9  0163C                      LOAD s6, 3C                    ; load 45 into s6
0DA  2D601                      OUTPUT s6, stay                ; set desired stay

0DB                             ;; ENDING POINT
0DB  01573                      LOAD s5, 73                    ; load 115 into s5
0DC  2D502                      OUTPUT s5, endx                ; set desired endx
0DD  2D603                      OUTPUT s6, endy                ; set desired endy
0DE  20217                      CALL old_draw_line             ; draws a line (careful: this subroutine overwrites s5)

0DF                             ;;============================================================================
0DF                             ;; Draws the letter O (Line 1)
0DF                             ;;============================================================================

0DF                             ;; STARTING POINT
0DF  01591                      LOAD s5, 91                    ; load 145 into s5
0E0  2D500                      OUTPUT s5, stax                ; set desired stax
0E1  0161E                      LOAD s6, 1E                    ; load 30 into s6
0E2  2D601                      OUTPUT s6, stay                ; set desired stay

0E3                             ;; ENDING POINT
0E3  0159B                      LOAD s5, 9B                    ; load 155 into s5
0E4  2D502                      OUTPUT s5, endx                ; set desired endx
0E5  2D603                      OUTPUT s6, endy                ; set desired endy
0E6  20217                      CALL old_draw_line             ; draws a line (careful: this subroutine overwrites s5)

0E7                             ;;============================================================================
0E7                             ;; Draws the letter O (Line 2)
0E7                             ;;============================================================================

0E7                             ;; STARTING POINT
0E7  01591                      LOAD s5, 91                    ; load 145 into s5
0E8  2D500                      OUTPUT s5, stax                ; set desired stax
0E9  0161E                      LOAD s6, 1E                    ; load 45 into s6
0EA  2D601                      OUTPUT s6, stay                ; set desired stay

0EB                             ;; ENDING POINT
0EB  0158C                      LOAD s5, 8C                    ; load 110 into s5
0EC  2D502                      OUTPUT s5, endx                ; set desired endx
0ED  0161E                      LOAD s6, 1E                    ; load 35 into s6
0EE  2D603                      OUTPUT s6, endy                ; set desired endy
0EF  20217                      CALL old_draw_line             ; draws a line (careful: this subroutine overwrites s5)

0F0                             ;;============================================================================
0F0                             ;; Draws the letter O (Line 3)
0F0                             ;;============================================================================

0F0                             ;; STARTING POINT
0F0  0158C                      LOAD s5, 8C                    ; load 140 into s5
0F1  2D500                      OUTPUT s5, stax                ; set desired stax
0F2  0161E                      LOAD s6, 1E                    ; load 30 into s6
0F3  2D601                      OUTPUT s6, stay                ; set desired stay

0F4                             ;; ENDING POINT
0F4  2D502                      OUTPUT s5, endx                ; set desired endx
0F5  0163C                      LOAD s6, 3C                    ; load 60 into s6
0F6  2D603                      OUTPUT s6, endy                ; set desired endy
0F7  20217                      CALL old_draw_line             ; draws a line (careful: this subroutine overwrites s5)

0F8                             ;;============================================================================
0F8                             ;; Draws the letter O (Line 4)
0F8                             ;;============================================================================

0F8                             ;; STARTING POINT
0F8  0158C                      LOAD s5, 8C                    ; load 110 into s5
0F9  2D500                      OUTPUT s5, stax                ; set desired stax
0FA  0163C                      LOAD s6, 3C                    ; load 55 into s6
0FB  2D601                      OUTPUT s6, stay                ; set desired stay

0FC                             ;; ENDING POINT
0FC  01591                      LOAD s5, 91                    ; load 145 into s5
0FD  2D502                      OUTPUT s5, endx                ; set desired endx
0FE  0163C                      LOAD s6, 3C                    ; load 30 into s6
0FF  2D603                      OUTPUT s6, endy                ; set desired endy
100  20217                      CALL old_draw_line             ; draws a line (careful: this subroutine overwrites s5)

101                             ;;============================================================================
101                             ;; Draws the letter O (Line 5)
101                             ;;============================================================================

101                             ;; STARTING POINT
101  01591                      LOAD s5, 91                    ; load 145 into s5
102  2D500                      OUTPUT s5, stax                ; set desired stax
103  0163C                      LOAD s6, 3C                    ; load 30 into s6
104  2D601                      OUTPUT s6, stay                ; set desired stay

105                             ;; ENDING POINT
105  0159B                      LOAD s5, 9B                    ; load 155 into s5
106  2D502                      OUTPUT s5, endx                ; set desired endx
107  2D603                      OUTPUT s6, endy                ; set desired endy
108  20217                      CALL old_draw_line             ; draws a line (careful: this subroutine overwrites s5)

109                             ;;============================================================================
109                             ;; Draws the letter O (Line 6)
109                             ;;============================================================================

109                             ;; STARTING POINT
109  0159B                      LOAD s5, 9B                    ; load 110 into s5
10A  2D500                      OUTPUT s5, stax                ; set desired stax
10B  0163C                      LOAD s6, 3C                    ; load 55 into s6
10C  2D601                      OUTPUT s6, stay                ; set desired stay

10D                             ;; ENDING POINT
10D  015A0                      LOAD s5, A0                    ; load 160 into s5
10E  2D502                      OUTPUT s5, endx                ; set desired endx
10F  0163C                      LOAD s6, 3C                    ; load 30 into s6
110  2D603                      OUTPUT s6, endy                ; set desired endy
111  20217                      CALL old_draw_line             ; draws a line (careful: this subroutine overwrites s5)

112                             ;;============================================================================
112                             ;; Draws the letter O (Line 7)
112                             ;;============================================================================

112                             ;; STARTING POINT
112  015A0                      LOAD s5, A0                    ; load 160 into s5
113  2D500                      OUTPUT s5, stax                ; set desired stax
114  0161E                      LOAD s6, 1E                    ; load 30 into s6
115  2D601                      OUTPUT s6, stay                ; set desired stay

116                             ;; ENDING POINT
116  2D502                      OUTPUT s5, endx                ; set desired endx
117  0163C                      LOAD s6, 3C                    ; load 60 into s6
118  2D603                      OUTPUT s6, endy                ; set desired endy
119  20217                      CALL old_draw_line             ; draws a line (careful: this subroutine overwrites s5)

11A                             ;;============================================================================
11A                             ;; Draws the letter O (Line 8)
11A                             ;;============================================================================

11A                             ;; STARTING POINT
11A  015A0                      LOAD s5, A0                    ; load 160 into s5
11B  2D500                      OUTPUT s5, stax                ; set desired stax
11C  0161E                      LOAD s6, 1E                    ; load 30 into s6
11D  2D601                      OUTPUT s6, stay                ; set desired stay

11E                             ;; ENDING POINT
11E  0159B                      LOAD s5, 9B                    ; load 155 into s5
11F  2D502                      OUTPUT s5, endx                ; set desired endx
120  0161E                      LOAD s6, 1E                    ; load 30 into s6
121  2D603                      OUTPUT s6, endy                ; set desired endy
122  20217                      CALL old_draw_line             ; draws a line (careful: this subroutine overwrites s5)



123  25000                      RETURN                         ; leave start_screen subroutine

124                             ;;============================================================================
124                             ;; Draw Helicopter - Draw Helicopter Subroutine
124                             ;;============================================================================

124            draw_helicopter:

124  20167                      CALL draw_helicopter_cockpit   ; call the subroutine to draw the cockpit
125  201DB                      CALL draw_helicopter_blades    ; call the subroutine to draw the blades
126  201A6                      CALL draw_helicopter_tail      ; call the subroutine to draw the tail
127                             ;CALL draw_helicopter_smoke         ; call the subroutine to draw the smoke

127  25000                      RETURN                         ; go back from drawing helicopter


128                             ;;============================================================================
128                             ;; Draw Block - Draw Block Subroutine
128                             ;;============================================================================

128                 draw_block:

128                             ;;============================================================================
128                             ;; Draws Top Line of Block
128                             ;;============================================================================

128  005E0                      LOAD s5, se                    ; load 255 into s5 (horizontal center of block)
129  016E1                      LOAD s6, E1                    ; load 245 into s6
12A  1C650                      COMPARE s6, s5                 ; checking if the block is done "peaking out" from the right (initial compare: 245 ? 255)
12B  3A131                      JUMP C, right_edge             ; jump to right_edge
12C  0160A                      LOAD s6, 0A                    ; load 10 into s6
12D  1C560                      COMPARE s5, s6                 ; comparing s5 and s6
12E  3A135                      JUMP C, left_edge              ; jump to left_edge
12F  32135                      JUMP Z, left_edge              ; jump to left_edge
130  22139                      JUMP in_middle                 ; jump to in_middle

131  2D500          right_edge: OUTPUT s5, stax                ; set desired stax
132  1950A                      SUB s5, 0A                     ;
133  2D502                      OUTPUT s5, endx                ; set desired stax
134  2213C                      JUMP finished1                 ; jump to draw_ys

135  2D500           left_edge: OUTPUT s5, stax                ; set desired stax
136  01600                      LOAD s6, 00                    ; put 255 into s5
137  2D602                      OUTPUT s6, endx                ; set desired stax
138  2213C                      JUMP finished1                 ; jump to draw_ys

139                  in_middle:
139  2D500                      OUTPUT s5, stax                ; set desired stax
13A  1950A                      SUB s5, 0A                     ; subtract the width of block to get the other x coordinate
13B  2D502                      OUTPUT s5, endx                ; set desired endx

13C  2DF01           finished1: OUTPUT sf, stay                ; set desired stay
13D  2DF03                      OUTPUT sf, endy                ; set desired endy
13E  20217                      CALL old_draw_line             ; draws a line (careful: this subroutine overwrites s5)

13F                             ;;============================================================================
13F                             ;; Draws Bottom Line of Block
13F                             ;;============================================================================

13F  005F0                      LOAD s5, sf                    ; load sF into s5
140  1153C                      ADD s5, 3C                     ; add 40 to s5
141  2D501                      OUTPUT s5, stay                ; set desired stay
142  2D503                      OUTPUT s5, endy                ; set desired endy
143  20217                      CALL old_draw_line             ; draws a line (careful: this subroutine overwrites s5)

144                             ;;============================================================================
144                             ;; Draws Right Vertical Line of Block
144                             ;;============================================================================

144  2DE00                      OUTPUT se, stax                ; set desired stax
145  2DE02                      OUTPUT se, endx                ; set desired endx
146  2DF01                      OUTPUT sf, stay                ; set desired stay
147  005F0                      LOAD s5, sf                    ; load sF into s5
148  1153C                      ADD s5, 3C                     ; add 60 to y coordinate
149  2D503                      OUTPUT s5, endy                ; set desired endy
14A  20217                      CALL old_draw_line             ; draws a line (careful: this subroutine overwrites s5)

14B                             ;;============================================================================
14B                             ;; Draws Left Vertical Line of Block
14B                             ;;============================================================================

14B  005E0                      LOAD s5, se                    ; load sE into s5
14C  1950A                      SUB s5, 0A                     ; subtract 10 from s5
14D  2D500                      OUTPUT s5, stax                ; set desired stax
14E  2D502                      OUTPUT s5, endx                ; set desired endx
14F  2DF01                      OUTPUT sf, stay                ; set desired stay
150  005F0                      LOAD s5, sf                    ; load sF into s5
151  1153C                      ADD s5, 3C                     ; add 60 to y coordinate
152  2D503                      OUTPUT s5, endy                ; set desired endy
153  20217                      CALL old_draw_line             ; draws a line (careful: this subroutine overwrites s5)
154  25000                      RETURN                         ; finished with draw_block subroutine



155                             ;;============================================================================
155                             ;; Random Block Location - Random Block Location Subroutine
155                             ;;============================================================================

155        random_block_location:
155  1DE00                      COMPARE se, 00                 ; is it time to create a new variable?
156  32159                      JUMP Z, new_random             ; jump to new random creator
157  36158                      JUMP NZ, skip_everything       ; goes back

158  25000     skip_everything: RETURN                         ; returns back (no new rand. number)

159  09507          new_random: INPUT s5, prng                 ; create to new random number
15A  1D50F                      COMPARE s5, 0F                 ; check if it's in range
15B  3E15D                      JUMP NC, check_other_bound_range ; check lower bound of map
15C  3A159                      JUMP C, new_random             ; get new variable

15D        check_other_bound_range:
15D  1D5B4                      COMPARE s5, B4                 ; compare s5 to 180
15E  3E159                      JUMP NC, new_random            ; get a new random number
15F  00F50                      LOAD sf, s5                    ; a new y coordinate generated
160  25000                      RETURN                         ; get out of subroutine

161                             ;;============================================================================
161                             ;; Move Helicopter Up - Move Helicopter Up Subroutine
161                             ;;============================================================================

161               move_heli_up:
161  1DC15                      COMPARE sc, 15                 ; check if the helicopter is colliding with top wall
162  36165                      JUMP NZ, decrement             ; if not colliding, then move helicopter appropriately
163  3E165                      JUMP NC, decrement             ; necessary as well
164  25000                      RETURN                         ; do not increment if colliding with top wall
165                  decrement:
165  19C02                      SUB sc, 02                     ; move the helicopter up
166  25000                      RETURN                         ; get out of subroutine

167                             ;;============================================================================
167                             ;; Draw Helicopter Cockpit - Draw Helicopter Cockpit Subroutine
167                             ;;============================================================================

167        draw_helicopter_cockpit:

167                             ;;============================================================================
167                             ;; Draws Cockpit of Helicopter (Line 1a)
167                             ;;============================================================================

167                             ;; STARTING POINT
167  01564                      LOAD s5, 64                    ; load 100 into s5
168  2D500                      OUTPUT s5, stax                ; set desired stax
169  006C0                      LOAD s6, sc                    ; load sC into s5
16A  2D601                      OUTPUT s6, stay                ; set desired stay

16B                             ;; ENDING POINT
16B  19501                      SUB s5, 01                     ; subtract 7 from s5
16C  2D502                      OUTPUT s5, endx                ; set desired endx
16D  19603                      SUB s6, 03                     ; go up by 5
16E  2D603                      OUTPUT s6, endy                ; set desired endy
16F  20217                      CALL old_draw_line             ; draws a line (careful: this subroutine overwrites s5)

170                             ;;============================================================================
170                             ;; Draws Cockpit of Helicopter (Line 1b)
170                             ;;============================================================================

170                             ;; STARTING POINT
170  01564                      LOAD s5, 64                    ; load 100 into s5
171  19501                      SUB s5, 01                     ; subtract 7 from s5
172  2D500                      OUTPUT s5, stax                ; set desired stax
173  006C0                      LOAD s6, sc                    ; load sC into s5
174  19603                      SUB s6, 03                     ; go up by 5
175  2D601                      OUTPUT s6, stay                ; set desired stay

176                             ;; ENDING POINT
176  19504                      SUB s5, 04                     ; subtract 7 from s5
177  2D502                      OUTPUT s5, endx                ; set desired endx
178  19602                      SUB s6, 02                     ; go up by 5
179  2D603                      OUTPUT s6, endy                ; set desired endy
17A  20217                      CALL old_draw_line             ; draws a line (careful: this subroutine overwrites s5)


17B                             ;;============================================================================
17B                             ;; Draws Cockpit of Helicopter (Line 2a)
17B                             ;;============================================================================

17B                             ;; STARTING POINT
17B  01564                      LOAD s5, 64                    ; load 100 into s5
17C  2D500                      OUTPUT s5, stax                ; set desired stax
17D  006C0                      LOAD s6, sc                    ; load sC into s5
17E  2D601                      OUTPUT s6, stay                ; set desired stay

17F                             ;; ENDING POINT
17F  19501                      SUB s5, 01                     ; subtract 1 from s5
180  2D502                      OUTPUT s5, endx                ; set desired endx
181  11603                      ADD s6, 03                     ; go down by 3
182  2D603                      OUTPUT s6, endy                ; set desired endy
183  20217                      CALL old_draw_line             ; draws a line (careful: this subroutine overwrites s5)

184                             ;;============================================================================
184                             ;; Draws Cockpit of Helicopter (Line 2b)
184                             ;;============================================================================

184                             ;; STARTING POINT
184  01564                      LOAD s5, 64                    ; load 100 into s5
185  19501                      SUB s5, 01                     ; subtract 1 from s5
186  2D500                      OUTPUT s5, stax                ; set desired stax
187  006C0                      LOAD s6, sc                    ; load sC into s5
188  11603                      ADD s6, 03                     ; go down by 3
189  2D601                      OUTPUT s6, stay                ; set desired stay

18A                             ;; ENDING POINT
18A  19504                      SUB s5, 04                     ; subtract 7 from s5
18B  2D502                      OUTPUT s5, endx                ; set desired endx
18C  11602                      ADD s6, 02                     ; go down by 5
18D  2D603                      OUTPUT s6, endy                ; set desired endy
18E  20217                      CALL old_draw_line             ; draws a line (careful: this subroutine overwrites s5)

18F                             ;;============================================================================
18F                             ;; Draws Cockpit of Helicopter (Line 3)
18F                             ;;============================================================================

18F                             ;; STARTING POINT
18F  01564                      LOAD s5, 64                    ; load 100 into s5
190  19505                      SUB s5, 05                     ; load 7 into s5
191  2D500                      OUTPUT s5, stax                ; set desired stax
192  006C0                      LOAD s6, sc                    ; load sC into s5
193  19605                      SUB s6, 05                     ; go up by 5 using subtraction
194  2D601                      OUTPUT s6, stay                ; set desired stay

195                             ;; ENDING POINT
195  19507                      SUB s5, 07                     ; subtract 5 from s5
196  2D502                      OUTPUT s5, endx                ; set desired endx
197  11605                      ADD s6, 05                     ; go down by 5
198  2D603                      OUTPUT s6, endy                ; set desired endy
199  20217                      CALL old_draw_line             ; draws a line (careful: this subroutine overwrites s5)

19A                             ;;============================================================================
19A                             ;; Draws Cockpit of Helicopter (Line 4)
19A                             ;;============================================================================

19A                             ;; STARTING POINT
19A  01564                      LOAD s5, 64                    ; load 100 into s5
19B  19505                      SUB s5, 05                     ; load 7 into s5
19C  2D500                      OUTPUT s5, stax                ; set desired stax
19D  006C0                      LOAD s6, sc                    ; load sC into s5
19E  11605                      ADD s6, 05                     ; go down by 5 using addition
19F  2D601                      OUTPUT s6, stay                ; set desired stay

1A0                             ;; ENDING POINT
1A0  19507                      SUB s5, 07                     ; subtract 5 from s5
1A1  2D502                      OUTPUT s5, endx                ; set desired endx
1A2  19605                      SUB s6, 05                     ; go back up by 5
1A3  2D603                      OUTPUT s6, endy                ; set desired endy
1A4  20217                      CALL old_draw_line             ; draws a line (careful: this subroutine overwrites s5)

1A5  25000                      RETURN                         ; go back from subroutine

1A6                             ;;============================================================================
1A6                             ;; Draw Helicopter Tail - Draw Helicopter Tail Subroutine
1A6                             ;;============================================================================

1A6        draw_helicopter_tail:

1A6                             ;;============================================================================
1A6                             ;; Draws Tail of Helicopter (Line 1)
1A6                             ;;============================================================================

1A6                             ;; STARTING POINT
1A6  01564                      LOAD s5, 64                    ; load 100 into s5
1A7  1950A                      SUB s5, 0A                     ; subtract 0xA from s5
1A8  2D500                      OUTPUT s5, stax                ; set desired stax
1A9  006C0                      LOAD s6, sc                    ; load sC into s5
1AA  19602                      SUB s6, 02                     ; subtract 2 from s6
1AB  2D601                      OUTPUT s6, stay                ; set desired stay

1AC                             ;; ENDING POINT
1AC  19507                      SUB s5, 07                     ; subtract 7 from s5
1AD  2D502                      OUTPUT s5, endx                ; set desired endx
1AE  2D603                      OUTPUT s6, endy                ; set desired endy
1AF  20217                      CALL old_draw_line             ; draws a line (careful: this subroutine overwrites s5)

1B0                             ;;============================================================================
1B0                             ;; Draws Tail of Helicopter (Line 2)
1B0                             ;;============================================================================

1B0                             ;; STARTING POINT
1B0  01564                      LOAD s5, 64                    ; load 100 into s5
1B1  1950C                      SUB s5, 0C                     ; subtract 0xC from s5
1B2  2D500                      OUTPUT s5, stax                ; set desired stax
1B3  006C0                      LOAD s6, sc                    ; load sC into s5
1B4  2D601                      OUTPUT s6, stay                ; set desired stay

1B5                             ;; ENDING POINT
1B5  19508                      SUB s5, 08                     ; subtract 7 from s5
1B6  2D502                      OUTPUT s5, endx                ; set desired endx
1B7  2D603                      OUTPUT s6, endy                ; set desired endy
1B8  20217                      CALL old_draw_line             ; draws a line (careful: this subroutine overwrites s5)

1B9                             ;;============================================================================
1B9                             ;; Draws Tail of Helicopter (Line 3)
1B9                             ;;============================================================================

1B9                             ;; STARTING POINT
1B9  01564                      LOAD s5, 64                    ; load 100 into s5
1BA  1950A                      SUB s5, 0A                     ; subtract 0x0A from s5
1BB  19508                      SUB s5, 08                     ; subtract 0x10 from s5
1BC  2D500                      OUTPUT s5, stax                ; set desired stax
1BD  006C0                      LOAD s6, sc                    ; load sC into s5
1BE  19602                      SUB s6, 02                     ; subtract 2 from s6
1BF  2D601                      OUTPUT s6, stay                ; set desired stay

1C0                             ;; ENDING POINT
1C0  19502                      SUB s5, 02                     ; subtract 2 from s5
1C1  2D502                      OUTPUT s5, endx                ; set desired endx
1C2  19602                      SUB s6, 02                     ; subtract 2 from s6
1C3  2D603                      OUTPUT s6, endy                ; set desired endy
1C4  20217                      CALL old_draw_line             ; draws a line (careful: this subroutine overwrites s5)

1C5                             ;;============================================================================
1C5                             ;; Draws Tail of Helicopter (Line 4)
1C5                             ;;============================================================================

1C5                             ;; STARTING POINT
1C5  01564                      LOAD s5, 64                    ; load 100 into s5
1C6  1950C                      SUB s5, 0C                     ; subtract 0x0C from s5
1C7  19509                      SUB s5, 09                     ; subtract 0x09 from s5
1C8  2D500                      OUTPUT s5, stax                ; set desired stax
1C9  006C0                      LOAD s6, sc                    ; load sC into s5
1CA  2D601                      OUTPUT s6, stay                ; set desired stay

1CB                             ;; ENDING POINT
1CB                             ;SUB s5, 01                          ; subtract 2 from s5
1CB  2D502                      OUTPUT s5, endx                ; set desired endx
1CC  11601                      ADD s6, 01                     ; add 1 to s6
1CD  2D603                      OUTPUT s6, endy                ; set desired endy
1CE  20217                      CALL old_draw_line             ; draws a line (careful: this subroutine overwrites s5)

1CF                             ;;============================================================================
1CF                             ;; Draws Tail of Helicopter (Line 5)
1CF                             ;;============================================================================

1CF                             ;; STARTING POINT
1CF  01564                      LOAD s5, 64                    ; load 100 into s5
1D0  1950A                      SUB s5, 0A                     ; subtract 0x0A from s5
1D1  1950A                      SUB s5, 0A                     ; subtract 0x0A from s5
1D2  2D500                      OUTPUT s5, stax                ; set desired stax
1D3  006C0                      LOAD s6, sc                    ; load sC into s5
1D4  19604                      SUB s6, 04                     ; subtract 4 from s6
1D5  2D601                      OUTPUT s6, stay                ; set desired stay

1D6                             ;; ENDING POINT
1D6  2D502                      OUTPUT s5, endx                ; set desired endx
1D7  11605                      ADD s6, 05                     ; add 1 to s6
1D8  2D603                      OUTPUT s6, endy                ; set desired endy
1D9  20217                      CALL old_draw_line             ; draws a line (careful: this subroutine overwrites s5)

1DA  25000                      RETURN                         ; go back from subroutine

1DB                             ;;============================================================================
1DB                             ;; Draw Helicopter Blades - Draw Helicopter Blades Subroutine
1DB                             ;;============================================================================

1DB        draw_helicopter_blades:

1DB                             ;;============================================================================
1DB                             ;; Draws Blades of Helicopter (Line 1)
1DB                             ;;============================================================================

1DB                             ;; STARTING POINT
1DB  01564                      LOAD s5, 64                    ; load 100 into s5
1DC  19505                      SUB s5, 05                     ; subtract 0xA from s5
1DD  2D500                      OUTPUT s5, stax                ; set desired stax
1DE  006C0                      LOAD s6, sc                    ; load sC into s5
1DF  19605                      SUB s6, 05                     ; subtract 2 from s6
1E0  2D601                      OUTPUT s6, stay                ; set desired stay

1E1                             ;; ENDING POINT
1E1  2D502                      OUTPUT s5, endx                ; set desired endx
1E2  19602                      SUB s6, 02                     ; subtract 2 from s6
1E3  2D603                      OUTPUT s6, endy                ; set desired endy
1E4  20217                      CALL old_draw_line             ; draws a line (careful: this subroutine overwrites s5)

1E5                             ;;============================================================================
1E5                             ;; Draws Blades of Helicopter (Line 2)
1E5                             ;;============================================================================

1E5                             ;; STARTING POINT
1E5  01564                      LOAD s5, 64                    ; load 100 into s5
1E6  2D500                      OUTPUT s5, stax                ; set desired stax
1E7  006C0                      LOAD s6, sc                    ; load sC into s5
1E8  19607                      SUB s6, 07                     ; subtract 2 from s6
1E9  2D601                      OUTPUT s6, stay                ; set desired stay

1EA                             ;; ENDING POINT
1EA  1950A                      SUB s5, 0A                     ; subtract 10 from s5
1EB  2D502                      OUTPUT s5, endx                ; set desired endx
1EC  2D603                      OUTPUT s6, endy                ; set desired endy
1ED  20217                      CALL old_draw_line             ; draws a line (careful: this subroutine overwrites s5)

1EE  25000                      RETURN                         ; go back from subroutine

1EF                             ;;============================================================================
1EF                             ;; Draw Helicopter Smoke - Draw Helicopter Smoke Subroutine
1EF                             ;;============================================================================

1EF        draw_helicopter_smoke:

1EF                             ;;============================================================================
1EF                             ;; Draws Smoke of Helicopter (Line 1)
1EF                             ;;============================================================================

1EF                             ;; Start Point
1EF  01564                      LOAD s5, 64                    ; load 100 into s5
1F0  19528                      SUB s5, 28                     ; position starting smoke right point of line 1
1F1  2D500                      OUTPUT s5, stax                ; output to starting x position of line 1

1F2  006C0                      LOAD s6, sc                    ; load helicopter smoke vertical position for line 1
1F3  2D601                      OUTPUT s6, stay                ; output to starting y position of line 1
1F4                             ;;

1F4                             ;; End Point
1F4  19504                      SUB s5, 04                     ; position starting smoke left point of line 1
1F5  2D502                      OUTPUT s5, endx                ; output to starting y position of line 1

1F6  2D603                      OUTPUT s6, endy                ; output to ending y position of line 1, matching helicopter
1F7  20217                      CALL old_draw_line             ;draws a line (careful: this subroutine overwrites s5)
1F8                             ;;

1F8                             ;;============================================================================
1F8                             ;; Draws Smoke of Helicopter (Line 2)
1F8                             ;;============================================================================

1F8                             ;; Start Point
1F8  01564                      LOAD s5, 64                    ; load 100 into s5
1F9  19534                      SUB s5, 34                     ; position starting smoke right point of line 2
1FA  2D500                      OUTPUT s5, stax                ; output to starting x position of line 2

1FB  006C0                      LOAD s6, sc                    ; load starting smoke vertical position for line 2
1FC  11604                      ADD s6, 04                     ; add 4 to s6 (shift down by 4)
1FD  2D601                      OUTPUT s6, stay                ; output to starting y position of line 2
1FE                             ;;

1FE                             ;; End Point
1FE  19504                      SUB s5, 04                     ; subtract s5 by 4 for length of line
1FF  2D502                      OUTPUT s5, endx                ; output to endx

200  2D603                      OUTPUT s6, endy                ; outputs vertical locaton of smoke line 2
201  20217                      CALL old_draw_line             ;draws a line (careful: this subroutine overwrites s5)
202                             ;;

202                             ;;============================================================================
202                             ;; Draws Smoke of Helicopter (Line 3)
202                             ;;============================================================================

202                             ;; Start Point
202  01564                      LOAD s5, 64                    ; load 100 into s5
203  19540                      SUB s5, 40                     ; position starting smoke right point of line 3
204  2D500                      OUTPUT s5, stax                ; output to starting x position of line 3

205  006C0                      LOAD s6, sc                    ; load starting smoke vertical position for line 3
206  19604                      SUB s6, 04                     ; add 4 to s6 (shift down by 4)
207  2D601                      OUTPUT s6, stay                ; output to starting y position of line 3
208                             ;;

208                             ;; End Point
208  19504                      SUB s5, 04                     ; subtract s5 by 4 for length of line
209  2D502                      OUTPUT s5, endx                ; output to endx

20A  2D603                      OUTPUT s6, endy                ; output same y position of line 3
20B  20217                      CALL old_draw_line             ; draws a line (careful: this subroutine overwrites s5)
20C                             ;;

20C  25000                      RETURN                         ; go back to subroutine



20D                             ;;============================================================================
20D                             ;; Draw Line - Draw Line Subroutine
20D                             ;;============================================================================

20D  2D000           draw_line: OUTPUT s0, stax                ; write stax
20E  2D101                      OUTPUT s1, stay                ; write stay
20F  2D202                      OUTPUT s2, endx                ; write endx
210  2D303                      OUTPUT s3, endy                ; write endy
211  01501                      LOAD s5, busy_go               ; load go command
212  2D504                      OUTPUT s5, busy                ; send go command
213  09504                wait: INPUT s5, busy                 ; read busy status
214  1D501                      COMPARE s5, busy_go            ; check busy status
215  32213                      JUMP Z, wait                   ; if busy, wait more
216  25000                      RETURN                         ; leave line drawing subroutine

217                             ;;============================================================================
217                             ;; Old Draw Line - Old Draw Line Subroutine (WILL DELETE LATER)
217                             ;;============================================================================

217              old_draw_line:
217  01501                      LOAD s5, busy_go               ; load go command
218  2D504                      OUTPUT s5, busy                ; send go command
219  09504               wait0: INPUT s5, busy                 ; read busy status
21A  1D501                      COMPARE s5, busy_go            ; check busy status
21B  32219                      JUMP Z, wait0                  ; if busy, wait more
21C  25000                      RETURN                         ; leave line drawing subroutine

21D                             ;;============================================================================
21D                             ;; Check Collisions - Check Collisions Subroutine
21D                             ;;============================================================================

21D            check_collision:
21D                             ;;============================================================================
21D                             ;; Check Collisions with Map (top wall)
21D                             ;;============================================================================
21D  01560                      LOAD s5, 60                    ; position of heli/wall collision
21E  0180F                      LOAD s8, 0F                    ; top wall vertical coordinate (15)
21F  006C0                      LOAD s6, sc                    ; get vertical position of helicopter
220  1960A                      SUB s6, 0A                     ; the helicopter's blades 10 pixels higher
221  00760                      LOAD s7, s6                    ; used later for drawing the "spark"
222  1C860                      COMPARE s8, s6                 ; check if the two intersect
223  3223E                      JUMP Z, collision_occurred     ; jump to collision occurred
224  3E23E                      JUMP NC, collision_occurred    ; jump to collision occurred (necessary)

225                             ;;============================================================================
225                             ;; Check Collisions with Map (bottom wall)
225                             ;;============================================================================
225  018F0                      LOAD s8, F0                    ; bottom wall vertical coordinate (240)
226  006C0                      LOAD s6, sc                    ; get vertical position of helicopter
227  11605                      ADD s6, 05                     ; the helicopter's bottom is 5 pixels below
228  00760                      LOAD s7, s6                    ; used later for drawing the "spark"
229  1C860                      COMPARE s8, s6                 ; check if the two intersect
22A  3223E                      JUMP Z, collision_occurred     ; jump to collision occurred

22B                             ;;============================================================================
22B                             ;; Check Collisions with Block
22B                             ;;============================================================================

22B  005E0                      LOAD s5, se                    ; get current horizontal position of block
22C  1950A                      SUB s5, 0A                     ; actual block is 10 pixels back
22D  1D564                      COMPARE s5, 64                 ; check if s5 coincides with heli (horizontal check)
22E  32230                      JUMP Z, check_vertical         ; jump to check vertical positioning
22F  3623A                      JUMP NZ, no_collision          ; jump to no_collision routine

230             check_vertical:
230  006F0                      LOAD s6, sf                    ; get current vertical position of block
231  007C0                      LOAD s7, sc                    ; load helicopter front position
232  1C760                loop: COMPARE s7, s6                 ; compare s7 and s6
233  3223E                      JUMP Z, collision_occurred     ; jump to collision_occured
234  11601                      ADD s6, 01                     ; add one to s6
235  008F0                      LOAD s8, sf                    ; load original value for reference only
236  1183C                      ADD s8, 3c                     ; add 60 to s8
237  1C680                      COMPARE s6, s8                 ; compare s6 to bottom of block (s8)
238  3223A                      JUMP Z, no_collision           ; jump to no_collision routine
239  36232                      JUMP NZ, loop                  ; keep looping

23A  19E01        no_collision: SUB se, 01                     ; decrement sE
23B  11C01                      ADD sc, 01                     ; increment sC
23C  20247                      CALL distance                  ; used for keeping the score (increments distance)
23D  25000                      RETURN                         ; leave, since no collisions occurred

23E         collision_occurred:
23E  2D500                      OUTPUT s5, stax                ; set desired stax
23F  2D701                      OUTPUT s7, stay                ; set desired stay
240  09807                      INPUT s8, prng                 ; load random endx
241  2D802                      OUTPUT s8, endx                ; set random endx
242  09807                      INPUT s8, prng                 ; load random endy
243  2D803                      OUTPUT s8, endy                ; set random endy
244  2020D                      CALL draw_line                 ; draw random line

245  01902                      LOAD s9, GAMEOVER_STATE        ; should go to gameover state instead
246  25000                      RETURN                         ; return from routine without any increments

247                             ;;============================================================================
247                             ;; Distance - Distance Subroutine
247                             ;;============================================================================

247  2DB0A            distance: OUTPUT sb, qssd_lo             ; put distance value to qssd
248  1DBFF                      COMPARE sb, FF                 ; check if max (FF) was reached
249  3224C                      JUMP Z, distance2              ; jump to distance2
24A  11B01                      ADD sb, one                    ; increment distance value
24B  25000                      RETURN                         ; finished with distance subroutine

24C  11A01           distance2: ADD sa, one                    ; add one to the next degree
24D  01B00                      LOAD sb, zero                  ; reset sB
24E  2DB0A                      OUTPUT sb, qssd_lo             ; put distance value to qssd
24F  2DA0B                      OUTPUT sa, qssd_hi             ; put distance value to qssd
250  25000                      RETURN                         ; finished with distance subroutine

7FF                             ;;============================================================================
7FF                             ;; Interrupt - Vector.
7FF                             ;;============================================================================

7FF                             ADDRESS 7FF                    ; must be located here
7FF  22012          isr_vector: JUMP isr                       ; always jump to isr

800                             ;;============================================================================
800                             ;;
800                             ;;============================================================================


PSM files that have been assembled
----------------------------------
    /home/adnan/Documents/School/EE178/fpga_video_game/latest_fpga_video_game/software/software.psm


List of defined constants
-------------------------
   CONSTANT name      Value  Source PSM file
   -------------      -----  ---------------
   BEL                07
   BS                 08
   CR                 0D
   CREDITS_STATE      03     software.psm
   DCS                90
   DEL                7F
   ESC                1B
   GAMEOVER_STATE     02     software.psm
   HT                 09
   LF                 0A
   NUL                00
   PLAY_STATE         01     software.psm
   ST                 9C
   START_STATE        00     software.psm
   VT                 0B
   beam               05     software.psm
   beam_hi            0f     software.psm
   beam_lo            03     software.psm
   beam_md            07     software.psm
   busy               04     software.psm
   busy_go            01     software.psm
   buttons            0f     software.psm
   buttons_ct         10     software.psm
   buttons_dn         04     software.psm
   buttons_lf         02     software.psm
   buttons_rt         01     software.psm
   buttons_up         08     software.psm
   datestamp_day      1E
   datestamp_month    0B
   datestamp_year     0F
   endx               02     software.psm
   endy               03     software.psm
   leds_hi            09     software.psm
   leds_lo            08     software.psm
   mode               06     software.psm
   mode_clr           01     software.psm
   mode_exp           03     software.psm
   mode_hld           00     software.psm
   mode_lin           02     software.psm
   one                01     software.psm
   prng               07     software.psm
   qssd_dp            0c     software.psm
   qssd_hi            0b     software.psm
   qssd_lo            0a     software.psm
   stax               00     software.psm
   stay               01     software.psm
   switches_hi        0e     software.psm
   switches_lo        0d     software.psm
   timestamp_hours    02
   timestamp_minutes  24
   timestamp_seconds  21
   zero               00     software.psm


  No tables defined


List of text strings
--------------------
   STRING name  Value          Source PSM file
   -----------  -----          ---------------
   datestamp$   "30 Nov 2015"
   timestamp$   "02:36:33"


List of line labels
-------------------
    Label                    Addr  Source PSM file
 --------                    ----  ---------------
 *  boot                     000   software.psm
    check_collision          21D   software.psm
    check_other_bound_range  15D   software.psm
    check_vertical           230   software.psm
    collision_occurred       23E   software.psm
    decrement                165   software.psm
    distance                 247   software.psm
    distance2                24C   software.psm
    draw_block               128   software.psm
    draw_helicopter          124   software.psm
    draw_helicopter_blades   1DB   software.psm
    draw_helicopter_cockpit  167   software.psm
 *  draw_helicopter_smoke    1EF   software.psm
    draw_helicopter_tail     1A6   software.psm
    draw_line                20D   software.psm
    enter_play_state         01F   software.psm
    enter_play_state2        027   software.psm
    finished1                13C   software.psm
    gameover                 022   software.psm
    in_middle                139   software.psm
    isr                      012   software.psm
 *  isr_vector               7FF   software.psm
    left_edge                135   software.psm
    loop                     232   software.psm
    main                     011   software.psm
    map                      03C   software.psm
    move_heli_up             161   software.psm
    new_random               159   software.psm
    no_collision             23A   software.psm
    old_draw_line            217   software.psm
    play                     032   software.psm
    random_block_location    155   software.psm
    right_edge               131   software.psm
    skip_everything          158   software.psm
    start                    019   software.psm
    start_screen             047   software.psm
    stay_in_gameover_state   031   software.psm
    stay_in_start_state      021   software.psm
    wait                     213   software.psm
    wait0                    219   software.psm

       * Unreferenced label(s)


List of pragma blocks
---------------------
   Name  Addr range  Value
   ----  ----------  -----


Instruction usage statistics
----------------------------
   Instruction  Instances
   -----------  ---------
   ADD          17
   ADDCY        -
   AND          -
   CALL         66
   CALL@        -
   COMPARE      20
   COMPARECY    -
   DISABLE      -
   ENABLE       1
   FETCH        -
   HWBUILD      -
   INPUT        11
   JUMP         30
   JUMP@        -
   LOAD         185
   LOAD&RETURN  -
   OR           -
   OUTPUT       191
   OUTPUTK      -
   REGBANK      -
   RETURN       23
   RETURNI      1
   RL           -
   RR           -
   SL0          -
   SL1          -
   SLA          -
   SLX          -
   SR0          -
   SR1          -
   SRA          -
   SRX          -
   STAR         -
   STORE        -
   SUB          49
   SUBCY        -
   TEST         -
   TESTCY       -
   XOR          -
