Open Picoblaze Assembler log for program "software.psm"
Generated by opbasm v 1.2
  Assembled on 2015-11-29T05:09:36
  Picoblaze-6 mode

  Last occupied address: 7FF hex
  Nominal program memory size: 2K (2048)  address(10:0)
  Actual memory size: 4096
  Occupied memory locations: 324
  Memory locations available: 3772
  Scratchpad size: 256


Assembly listing
----------------
000                             ;;============================================================================
000                             ;; File: software.psm
000                             ;; This is the PicoBlaze program for EE178 Lab #8.
000                             ;;============================================================================

000                             ;;============================================================================
000                             ;; Port address declarations.
000                             ;;============================================================================

000                             CONSTANT stax, 00              ; port for 8-bit start-x
000                             CONSTANT stay, 01              ; port for 8-bit start-y
000                             CONSTANT endx, 02              ; port for 8-bit end-x
000                             CONSTANT endy, 03              ; port for 8-bit end-y
000                             CONSTANT busy, 04              ; port for 8-bit busy
000                             CONSTANT beam, 05              ; port for 8-bit beam
000                             CONSTANT mode, 06              ; port for 8-bit mode
000                             CONSTANT prng, 07              ; port for 8-bit prng
000                             CONSTANT leds_lo, 08           ; port for 8-bit led data out
000                             CONSTANT leds_hi, 09           ; port for 8-bit led data out
000                             CONSTANT qssd_lo, 0a           ; port for 8-bit qssd data out
000                             CONSTANT qssd_hi, 0b           ; port for 8-bit qssd data out
000                             CONSTANT qssd_dp, 0c           ; port for 8-bit qssd data out
000                             CONSTANT switches_lo, 0d       ; port for 8-bit switch input
000                             CONSTANT switches_hi, 0e       ; port for 8-bit switch input
000                             CONSTANT buttons, 0f           ; port for 8-bit button input

000                             CONSTANT zero, 00              ; zero
000                             CONSTANT one, 01               ; one

000                             CONSTANT busy_go, 01           ; go command and busy status

000                             CONSTANT beam_hi, 0f           ; beam high intensity
000                             CONSTANT beam_md, 07           ; beam med intensity
000                             CONSTANT beam_lo, 03           ; beam low intensity

000                             CONSTANT mode_hld, 00          ; mode hold framebuffer
000                             CONSTANT mode_clr, 01          ; mode clear framebuffer
000                             CONSTANT mode_lin, 02          ; mode linear decay
000                             CONSTANT mode_exp, 03          ; mode exponential decay

000                             CONSTANT buttons_ct, 10        ; center
000                             CONSTANT buttons_up, 08        ; up
000                             CONSTANT buttons_dn, 04        ; down
000                             CONSTANT buttons_lf, 02        ; left
000                             CONSTANT buttons_rt, 01        ; right

000                             ;;============================================================================
000                             ;; Boot.
000                             ;;============================================================================

000  01000                boot: LOAD s0, zero                  ; initialize
001  01100                      LOAD s1, zero                  ; initialize
002  01200                      LOAD s2, zero                  ; initialize
003  01300                      LOAD s3, zero                  ; initialize
004  01400                      LOAD s4, zero                  ; initialize
005  01B00                      LOAD sb, 00                    ; initial distance
006  01C80                      LOAD sc, 80                    ; starting helicopter position
007  01D05                      LOAD sd, 05                    ; initialize (needed later)
008  01EFF                      LOAD se, FF                    ; load 255 into sE (horizontal coordinate of block)
009  01F62                      LOAD sf, 62                    ; load 108 into sF (vertical coordinate of block)
00A  01503                      LOAD s5, mode_exp              ; load desired mode
00B  2D506                      OUTPUT s5, mode                ; set desired mode
00C  0150F                      LOAD s5, beam_hi               ; load desired beam
00D  2D505                      OUTPUT s5, beam                ; set desired beam
00E  28001                      ENABLE INTERRUPT               ; enable interrupts

00F                             ;;============================================================================
00F                             ;; Main.
00F                             ;;============================================================================

00F  0900F                main: INPUT s0, buttons              ; get center button value
010  0910E                      INPUT s1, switches_hi          ; get hi switch values
011  2D008                      OUTPUT s0, leds_lo             ; put lo led values
012                             ;OUTPUT s1, leds_hi                  ; put hi led values
012  2200F                      JUMP main                      ; go back and repeat

013                             ;;============================================================================
013                             ;; Interrupt - Service Routine.
013                             ;;============================================================================

013  0920F                 isr: INPUT s2, buttons              ; get center button value
014  0930E                      INPUT s3, switches_hi          ; get hi switch values
015  0940F                      INPUT s4, buttons              ; get button values
016                             ;OUTPUT s2, qssd_lo                  ; put lo qssd values
016                             ;OUTPUT s3, qssd_hi                  ; put hi qssd values
016                             ;OUTPUT s4, qssd_dp                  ; put dp qssd values
016                             ;OUTPUT s2, stax                     ; set desired stax
016                             ;OUTPUT s3, stay                     ; set desired stay
016                             ;INPUT s5, prng                      ; load random endx
016                             ;OUTPUT s5, endx                     ; set random endx
016                             ;INPUT s5, prng                      ; load random endy
016                             ;OUTPUT s5, endy                     ; set random endy
016                             ;CALL draw_line                      ; draws a line (careful: this subroutine overwrites s5)
016  20018                      CALL play                      ; call play subroutine
017  29001                      RETURNI ENABLE                 ; done with isr

018                             ;;============================================================================
018                             ;; Play - Play Subroutine
018                             ;;============================================================================

018  0950F                play: INPUT s5, buttons              ; get center button values
019  20022                      CALL map                       ; draw the map using map subroutine

01A  0950F                      INPUT s5, buttons              ; get button values
01B  1D510                      COMPARE s5, buttons_ct         ; check if center button is pressed
01C  30071                      CALL Z, move_heli_up           ; call subroutine that moves the helicopter up

01D  20033                      CALL draw_helicopter           ; draw the helicopter
01E  20065                      CALL random_block_location     ; determines a random place for the block (y direction only)
01F  20038                      CALL draw_block                ; draw the block using draw_block subroutine
020  2011F                      CALL check_collision           ; check if any collisions happen

021  25000                      RETURN                         ; finished with play subroutine

022                             ;;============================================================================
022                             ;; Map - Draw Map Subroutine
022                             ;;============================================================================

022                        map:

022                             ;;============================================================================
022                             ;; Draws Top Line of Map (Line 1)
022                             ;;============================================================================

022                             ;; STARTING POINT
022  01500                      LOAD s5, 00                    ; load 00 into s5
023  2D500                      OUTPUT s5, stax                ; set desired stax
024  0160F                      LOAD s6, 0F                    ; load 15 into s5
025  2D601                      OUTPUT s6, stay                ; set desired stay

026                             ;; ENDING POINT
026  015FF                      LOAD s5, FF                    ; set s5 to 255
027  2D502                      OUTPUT s5, endx                ; set desired endx
028  2D603                      OUTPUT s6, endy                ; set desired endy
029  20119                      CALL draw_line                 ; draws a line (careful: this subroutine overwrites s5)

02A                             ;;============================================================================
02A                             ;; Draws Bottom Line of Map (Line 2)
02A                             ;;============================================================================

02A                             ;; STARTING POINT
02A  01500                      LOAD s5, 00                    ; load 00 into s5
02B  2D500                      OUTPUT s5, stax                ; set desired stax
02C  016F0                      LOAD s6, F0                    ; load 240 into s5
02D  2D601                      OUTPUT s6, stay                ; set desired stay

02E                             ;; ENDING POINT
02E  015FF                      LOAD s5, FF                    ; set s5 to 255
02F  2D502                      OUTPUT s5, endx                ; set desired endx
030  2D603                      OUTPUT s6, endy                ; set desired endy
031  20119                      CALL draw_line                 ; draws a line (careful: this subroutine overwrites s5)
032  25000                      RETURN                         ; leave map subroutine

033                             ;;============================================================================
033                             ;; Draw Helicopter - Draw Helicopter Subroutine
033                             ;;============================================================================

033            draw_helicopter:

033  20073                      CALL draw_helicopter_cockpit   ; call the subroutine to draw the cockpit
034  200E7                      CALL draw_helicopter_blades    ; call the subroutine to draw the blades
035  200B2                      CALL draw_helicopter_tail      ; call the subroutine to draw the tail
036  200FB                      CALL draw_helicopter_smoke     ; call the subroutine to draw the smoke

037  25000                      RETURN                         ; go back from drawing helicopter


038                             ;;============================================================================
038                             ;; Draw Block - Draw Block Subroutine
038                             ;;============================================================================

038                 draw_block:

038                             ;;============================================================================
038                             ;; Draws Top Line of Block
038                             ;;============================================================================

038  005E0                      LOAD s5, se                    ; load 255 into s5 (horizontal center of block)
039  016E1                      LOAD s6, E1                    ; load 245 into s6
03A  1C650                      COMPARE s6, s5                 ; checking if the block is done "peaking out" from the right (initial compare: 245 ? 255)
03B  3A041                      JUMP C, right_edge             ; jump to right_edge
03C  0160A                      LOAD s6, 0A                    ; load 10 into s6
03D  1C560                      COMPARE s5, s6                 ; comparing s5 and s6
03E  3A045                      JUMP C, left_edge              ; jump to left_edge
03F  32045                      JUMP Z, left_edge              ; jump to left_edge
040  22049                      JUMP in_middle                 ; jump to in_middle

041  2D500          right_edge: OUTPUT s5, stax                ; set desired stax
042  1950A                      SUB s5, 0A                     ;
043  2D502                      OUTPUT s5, endx                ; set desired stax
044  2204C                      JUMP finished1                 ; jump to draw_ys

045  2D500           left_edge: OUTPUT s5, stax                ; set desired stax
046  01600                      LOAD s6, 00                    ; put 255 into s5
047  2D602                      OUTPUT s6, endx                ; set desired stax
048  2204C                      JUMP finished1                 ; jump to draw_ys

049                  in_middle:
049  2D500                      OUTPUT s5, stax                ; set desired stax
04A  1950A                      SUB s5, 0A                     ; subtract the width of block to get the other x coordinate
04B  2D502                      OUTPUT s5, endx                ; set desired endx

04C  2DF01           finished1: OUTPUT sf, stay                ; set desired stay
04D  2DF03                      OUTPUT sf, endy                ; set desired endy
04E  20119                      CALL draw_line                 ; draws a line (careful: this subroutine overwrites s5)

04F                             ;;============================================================================
04F                             ;; Draws Bottom Line of Block
04F                             ;;============================================================================

04F  005F0                      LOAD s5, sf                    ; load sF into s5
050  1153C                      ADD s5, 3C                     ; add 40 to s5
051  2D501                      OUTPUT s5, stay                ; set desired stay
052  2D503                      OUTPUT s5, endy                ; set desired endy
053  20119                      CALL draw_line                 ; draws a line (careful: this subroutine overwrites s5)

054                             ;;============================================================================
054                             ;; Draws Right Vertical Line of Block
054                             ;;============================================================================

054  2DE00                      OUTPUT se, stax                ; set desired stax
055  2DE02                      OUTPUT se, endx                ; set desired endx
056  2DF01                      OUTPUT sf, stay                ; set desired stay
057  005F0                      LOAD s5, sf                    ; load sF into s5
058  1153C                      ADD s5, 3C                     ; add 60 to y coordinate
059  2D503                      OUTPUT s5, endy                ; set desired endy
05A  20119                      CALL draw_line                 ; draws a line (careful: this subroutine overwrites s5)

05B                             ;;============================================================================
05B                             ;; Draws Left Vertical Line of Block
05B                             ;;============================================================================

05B  005E0                      LOAD s5, se                    ; load sE into s5
05C  1950A                      SUB s5, 0A                     ; subtract 10 from s5
05D  2D500                      OUTPUT s5, stax                ; set desired stax
05E  2D502                      OUTPUT s5, endx                ; set desired endx
05F  2DF01                      OUTPUT sf, stay                ; set desired stay
060  005F0                      LOAD s5, sf                    ; load sF into s5
061  1153C                      ADD s5, 3C                     ; add 60 to y coordinate
062  2D503                      OUTPUT s5, endy                ; set desired endy
063  20119                      CALL draw_line                 ; draws a line (careful: this subroutine overwrites s5)
064  25000                      RETURN                         ; finished with draw_block subroutine



065                             ;;============================================================================
065                             ;; Random Block Location - Random Block Location Subroutine
065                             ;;============================================================================

065        random_block_location:
065  1DE00                      COMPARE se, 00                 ; is it time to create a new variable?
066  32069                      JUMP Z, new_random             ; jump to new random creator
067  36068                      JUMP NZ, skip_everything       ; goes back

068  25000     skip_everything: RETURN                         ; returns back (no new rand. number)

069  09507          new_random: INPUT s5, prng                 ; create to new random number
06A  1D50F                      COMPARE s5, 0F                 ; check if it's in range
06B  3E06D                      JUMP NC, check_other_bound_range ; check lower bound of map
06C  3A069                      JUMP C, new_random             ; get new variable

06D        check_other_bound_range:
06D  1D5B4                      COMPARE s5, B4                 ; compare s5 to 180
06E  3E069                      JUMP NC, new_random            ; get a new random number
06F  00F50                      LOAD sf, s5                    ; a new y coordinate generated
070  25000                      RETURN                         ; get out of subroutine

071                             ;;============================================================================
071                             ;; Move Helicopter Up - Move Helicopter Up Subroutine
071                             ;;============================================================================

071               move_heli_up:
071  19C02                      SUB sc, 02                     ; move the helicopter up
072  25000                      RETURN                         ; get out of subroutine

073                             ;;============================================================================
073                             ;; Draw Helicopter Cockpit - Draw Helicopter Cockpit Subroutine
073                             ;;============================================================================

073        draw_helicopter_cockpit:

073                             ;;============================================================================
073                             ;; Draws Cockpit of Helicopter (Line 1a)
073                             ;;============================================================================

073                             ;; STARTING POINT
073  01564                      LOAD s5, 64                    ; load 100 into s5
074  2D500                      OUTPUT s5, stax                ; set desired stax
075  006C0                      LOAD s6, sc                    ; load sC into s5
076  2D601                      OUTPUT s6, stay                ; set desired stay

077                             ;; ENDING POINT
077  19501                      SUB s5, 01                     ; subtract 7 from s5
078  2D502                      OUTPUT s5, endx                ; set desired endx
079  19603                      SUB s6, 03                     ; go up by 5
07A  2D603                      OUTPUT s6, endy                ; set desired endy
07B  20119                      CALL draw_line                 ; draws a line (careful: this subroutine overwrites s5)

07C                             ;;============================================================================
07C                             ;; Draws Cockpit of Helicopter (Line 1b)
07C                             ;;============================================================================

07C                             ;; STARTING POINT
07C  01564                      LOAD s5, 64                    ; load 100 into s5
07D  19501                      SUB s5, 01                     ; subtract 7 from s5
07E  2D500                      OUTPUT s5, stax                ; set desired stax
07F  006C0                      LOAD s6, sc                    ; load sC into s5
080  19603                      SUB s6, 03                     ; go up by 5
081  2D601                      OUTPUT s6, stay                ; set desired stay

082                             ;; ENDING POINT
082  19504                      SUB s5, 04                     ; subtract 7 from s5
083  2D502                      OUTPUT s5, endx                ; set desired endx
084  19602                      SUB s6, 02                     ; go up by 5
085  2D603                      OUTPUT s6, endy                ; set desired endy
086  20119                      CALL draw_line                 ; draws a line (careful: this subroutine overwrites s5)


087                             ;;============================================================================
087                             ;; Draws Cockpit of Helicopter (Line 2a)
087                             ;;============================================================================

087                             ;; STARTING POINT
087  01564                      LOAD s5, 64                    ; load 100 into s5
088  2D500                      OUTPUT s5, stax                ; set desired stax
089  006C0                      LOAD s6, sc                    ; load sC into s5
08A  2D601                      OUTPUT s6, stay                ; set desired stay

08B                             ;; ENDING POINT
08B  19501                      SUB s5, 01                     ; subtract 1 from s5
08C  2D502                      OUTPUT s5, endx                ; set desired endx
08D  11603                      ADD s6, 03                     ; go down by 3
08E  2D603                      OUTPUT s6, endy                ; set desired endy
08F  20119                      CALL draw_line                 ; draws a line (careful: this subroutine overwrites s5)

090                             ;;============================================================================
090                             ;; Draws Cockpit of Helicopter (Line 2b)
090                             ;;============================================================================

090                             ;; STARTING POINT
090  01564                      LOAD s5, 64                    ; load 100 into s5
091  19501                      SUB s5, 01                     ; subtract 1 from s5
092  2D500                      OUTPUT s5, stax                ; set desired stax
093  006C0                      LOAD s6, sc                    ; load sC into s5
094  11603                      ADD s6, 03                     ; go down by 3
095  2D601                      OUTPUT s6, stay                ; set desired stay

096                             ;; ENDING POINT
096  19504                      SUB s5, 04                     ; subtract 7 from s5
097  2D502                      OUTPUT s5, endx                ; set desired endx
098  11602                      ADD s6, 02                     ; go down by 5
099  2D603                      OUTPUT s6, endy                ; set desired endy
09A  20119                      CALL draw_line                 ; draws a line (careful: this subroutine overwrites s5)

09B                             ;;============================================================================
09B                             ;; Draws Cockpit of Helicopter (Line 3)
09B                             ;;============================================================================

09B                             ;; STARTING POINT
09B  01564                      LOAD s5, 64                    ; load 100 into s5
09C  19505                      SUB s5, 05                     ; load 7 into s5
09D  2D500                      OUTPUT s5, stax                ; set desired stax
09E  006C0                      LOAD s6, sc                    ; load sC into s5
09F  19605                      SUB s6, 05                     ; go up by 5 using subtraction
0A0  2D601                      OUTPUT s6, stay                ; set desired stay

0A1                             ;; ENDING POINT
0A1  19507                      SUB s5, 07                     ; subtract 5 from s5
0A2  2D502                      OUTPUT s5, endx                ; set desired endx
0A3  11605                      ADD s6, 05                     ; go down by 5
0A4  2D603                      OUTPUT s6, endy                ; set desired endy
0A5  20119                      CALL draw_line                 ; draws a line (careful: this subroutine overwrites s5)

0A6                             ;;============================================================================
0A6                             ;; Draws Cockpit of Helicopter (Line 4)
0A6                             ;;============================================================================

0A6                             ;; STARTING POINT
0A6  01564                      LOAD s5, 64                    ; load 100 into s5
0A7  19505                      SUB s5, 05                     ; load 7 into s5
0A8  2D500                      OUTPUT s5, stax                ; set desired stax
0A9  006C0                      LOAD s6, sc                    ; load sC into s5
0AA  11605                      ADD s6, 05                     ; go down by 5 using addition
0AB  2D601                      OUTPUT s6, stay                ; set desired stay

0AC                             ;; ENDING POINT
0AC  19507                      SUB s5, 07                     ; subtract 5 from s5
0AD  2D502                      OUTPUT s5, endx                ; set desired endx
0AE  19605                      SUB s6, 05                     ; go back up by 5
0AF  2D603                      OUTPUT s6, endy                ; set desired endy
0B0  20119                      CALL draw_line                 ; draws a line (careful: this subroutine overwrites s5)

0B1  25000                      RETURN                         ; go back from subroutine

0B2                             ;;============================================================================
0B2                             ;; Draw Helicopter Tail - Draw Helicopter Tail Subroutine
0B2                             ;;============================================================================

0B2        draw_helicopter_tail:

0B2                             ;;============================================================================
0B2                             ;; Draws Tail of Helicopter (Line 1)
0B2                             ;;============================================================================

0B2                             ;; STARTING POINT
0B2  01564                      LOAD s5, 64                    ; load 100 into s5
0B3  1950A                      SUB s5, 0A                     ; subtract 0xA from s5
0B4  2D500                      OUTPUT s5, stax                ; set desired stax
0B5  006C0                      LOAD s6, sc                    ; load sC into s5
0B6  19602                      SUB s6, 02                     ; subtract 2 from s6
0B7  2D601                      OUTPUT s6, stay                ; set desired stay

0B8                             ;; ENDING POINT
0B8  19507                      SUB s5, 07                     ; subtract 7 from s5
0B9  2D502                      OUTPUT s5, endx                ; set desired endx
0BA  2D603                      OUTPUT s6, endy                ; set desired endy
0BB  20119                      CALL draw_line                 ; draws a line (careful: this subroutine overwrites s5)

0BC                             ;;============================================================================
0BC                             ;; Draws Tail of Helicopter (Line 2)
0BC                             ;;============================================================================

0BC                             ;; STARTING POINT
0BC  01564                      LOAD s5, 64                    ; load 100 into s5
0BD  1950C                      SUB s5, 0C                     ; subtract 0xC from s5
0BE  2D500                      OUTPUT s5, stax                ; set desired stax
0BF  006C0                      LOAD s6, sc                    ; load sC into s5
0C0  2D601                      OUTPUT s6, stay                ; set desired stay

0C1                             ;; ENDING POINT
0C1  19508                      SUB s5, 08                     ; subtract 7 from s5
0C2  2D502                      OUTPUT s5, endx                ; set desired endx
0C3  2D603                      OUTPUT s6, endy                ; set desired endy
0C4  20119                      CALL draw_line                 ; draws a line (careful: this subroutine overwrites s5)

0C5                             ;;============================================================================
0C5                             ;; Draws Tail of Helicopter (Line 3)
0C5                             ;;============================================================================

0C5                             ;; STARTING POINT
0C5  01564                      LOAD s5, 64                    ; load 100 into s5
0C6  1950A                      SUB s5, 0A                     ; subtract 0x0A from s5
0C7  19508                      SUB s5, 08                     ; subtract 0x10 from s5
0C8  2D500                      OUTPUT s5, stax                ; set desired stax
0C9  006C0                      LOAD s6, sc                    ; load sC into s5
0CA  19602                      SUB s6, 02                     ; subtract 2 from s6
0CB  2D601                      OUTPUT s6, stay                ; set desired stay

0CC                             ;; ENDING POINT
0CC  19502                      SUB s5, 02                     ; subtract 2 from s5
0CD  2D502                      OUTPUT s5, endx                ; set desired endx
0CE  19602                      SUB s6, 02                     ; subtract 2 from s6
0CF  2D603                      OUTPUT s6, endy                ; set desired endy
0D0  20119                      CALL draw_line                 ; draws a line (careful: this subroutine overwrites s5)

0D1                             ;;============================================================================
0D1                             ;; Draws Tail of Helicopter (Line 4)
0D1                             ;;============================================================================

0D1                             ;; STARTING POINT
0D1  01564                      LOAD s5, 64                    ; load 100 into s5
0D2  1950C                      SUB s5, 0C                     ; subtract 0x0C from s5
0D3  19509                      SUB s5, 09                     ; subtract 0x09 from s5
0D4  2D500                      OUTPUT s5, stax                ; set desired stax
0D5  006C0                      LOAD s6, sc                    ; load sC into s5
0D6  2D601                      OUTPUT s6, stay                ; set desired stay

0D7                             ;; ENDING POINT
0D7                             ;SUB s5, 01                          ; subtract 2 from s5
0D7  2D502                      OUTPUT s5, endx                ; set desired endx
0D8  11601                      ADD s6, 01                     ; add 1 to s6
0D9  2D603                      OUTPUT s6, endy                ; set desired endy
0DA  20119                      CALL draw_line                 ; draws a line (careful: this subroutine overwrites s5)

0DB                             ;;============================================================================
0DB                             ;; Draws Tail of Helicopter (Line 5)
0DB                             ;;============================================================================

0DB                             ;; STARTING POINT
0DB  01564                      LOAD s5, 64                    ; load 100 into s5
0DC  1950A                      SUB s5, 0A                     ; subtract 0x0A from s5
0DD  1950A                      SUB s5, 0A                     ; subtract 0x0A from s5
0DE  2D500                      OUTPUT s5, stax                ; set desired stax
0DF  006C0                      LOAD s6, sc                    ; load sC into s5
0E0  19604                      SUB s6, 04                     ; subtract 4 from s6
0E1  2D601                      OUTPUT s6, stay                ; set desired stay

0E2                             ;; ENDING POINT
0E2  2D502                      OUTPUT s5, endx                ; set desired endx
0E3  11605                      ADD s6, 05                     ; add 1 to s6
0E4  2D603                      OUTPUT s6, endy                ; set desired endy
0E5  20119                      CALL draw_line                 ; draws a line (careful: this subroutine overwrites s5)

0E6  25000                      RETURN                         ; go back from subroutine

0E7                             ;;============================================================================
0E7                             ;; Draw Helicopter Blades - Draw Helicopter Blades Subroutine
0E7                             ;;============================================================================

0E7        draw_helicopter_blades:

0E7                             ;;============================================================================
0E7                             ;; Draws Blades of Helicopter (Line 1)
0E7                             ;;============================================================================

0E7                             ;; STARTING POINT
0E7  01564                      LOAD s5, 64                    ; load 100 into s5
0E8  19505                      SUB s5, 05                     ; subtract 0xA from s5
0E9  2D500                      OUTPUT s5, stax                ; set desired stax
0EA  006C0                      LOAD s6, sc                    ; load sC into s5
0EB  19605                      SUB s6, 05                     ; subtract 2 from s6
0EC  2D601                      OUTPUT s6, stay                ; set desired stay

0ED                             ;; ENDING POINT
0ED  2D502                      OUTPUT s5, endx                ; set desired endx
0EE  19602                      SUB s6, 02                     ; subtract 2 from s6
0EF  2D603                      OUTPUT s6, endy                ; set desired endy
0F0  20119                      CALL draw_line                 ; draws a line (careful: this subroutine overwrites s5)

0F1                             ;;============================================================================
0F1                             ;; Draws Blades of Helicopter (Line 2)
0F1                             ;;============================================================================

0F1                             ;; STARTING POINT
0F1  01564                      LOAD s5, 64                    ; load 100 into s5
0F2  2D500                      OUTPUT s5, stax                ; set desired stax
0F3  006C0                      LOAD s6, sc                    ; load sC into s5
0F4  19607                      SUB s6, 07                     ; subtract 2 from s6
0F5  2D601                      OUTPUT s6, stay                ; set desired stay

0F6                             ;; ENDING POINT
0F6  1950A                      SUB s5, 0A                     ; subtract 10 from s5
0F7  2D502                      OUTPUT s5, endx                ; set desired endx
0F8  2D603                      OUTPUT s6, endy                ; set desired endy
0F9  20119                      CALL draw_line                 ; draws a line (careful: this subroutine overwrites s5)

0FA  25000                      RETURN                         ; go back from subroutine

0FB                             ;;============================================================================
0FB                             ;; Draw Helicopter Smoke - Draw Helicopter Smoke Subroutine
0FB                             ;;============================================================================

0FB        draw_helicopter_smoke:

0FB                             ;;============================================================================
0FB                             ;; Draws Smoke of Helicopter (Line 1)
0FB                             ;;============================================================================

0FB                             ;; Start Point
0FB  01564                      LOAD s5, 64                    ; load 100 into s5
0FC  19528                      SUB s5, 28                     ; position starting smoke right point of line 1
0FD  2D500                      OUTPUT s5, stax                ; output to starting x position of line 1

0FE  006C0                      LOAD s6, sc                    ; load helicopter smoke vertical position for line 1
0FF  2D601                      OUTPUT s6, stay                ; output to starting y position of line 1
100                             ;;

100                             ;; End Point
100  19504                      SUB s5, 04                     ; position starting smoke left point of line 1
101  2D502                      OUTPUT s5, endx                ; output to starting y position of line 1

102  2D603                      OUTPUT s6, endy                ; output to ending y position of line 1, matching helicopter
103  20119                      CALL draw_line                 ;draws a line (careful: this subroutine overwrites s5)
104                             ;;

104                             ;;============================================================================
104                             ;; Draws Smoke of Helicopter (Line 2)
104                             ;;============================================================================

104                             ;; Start Point
104  01564                      LOAD s5, 64                    ; load 100 into s5
105  19534                      SUB s5, 34                     ; position starting smoke right point of line 2
106  2D500                      OUTPUT s5, stax                ; output to starting x position of line 2

107  006C0                      LOAD s6, sc                    ; load starting smoke vertical position for line 2
108  11604                      ADD s6, 04                     ; add 4 to s6 (shift down by 4)
109  2D601                      OUTPUT s6, stay                ; output to starting y position of line 2
10A                             ;;

10A                             ;; End Point
10A  19504                      SUB s5, 04                     ; subtract s5 by 4 for length of line
10B  2D502                      OUTPUT s5, endx                ; output to endx

10C  2D603                      OUTPUT s6, endy                ; outputs vertical locaton of smoke line 2
10D  20119                      CALL draw_line                 ;draws a line (careful: this subroutine overwrites s5)
10E                             ;;

10E                             ;;============================================================================
10E                             ;; Draws Smoke of Helicopter (Line 3)
10E                             ;;============================================================================

10E                             ;; Start Point
10E  01564                      LOAD s5, 64                    ; load 100 into s5
10F  19540                      SUB s5, 40                     ; position starting smoke right point of line 3
110  2D500                      OUTPUT s5, stax                ; output to starting x position of line 3

111  006C0                      LOAD s6, sc                    ; load starting smoke vertical position for line 3
112  19604                      SUB s6, 04                     ; add 4 to s6 (shift down by 4)
113  2D601                      OUTPUT s6, stay                ; output to starting y position of line 3
114                             ;;

114                             ;; End Point
114  19504                      SUB s5, 04                     ; subtract s5 by 4 for length of line
115  2D502                      OUTPUT s5, endx                ; output to endx

116  2D603                      OUTPUT s6, endy                ; output same y position of line 3
117  20119                      CALL draw_line                 ; draws a line (careful: this subroutine overwrites s5)
118                             ;;

118  25000                      RETURN                         ; go back to subroutine



119                             ;;============================================================================
119                             ;; Draw Line - Draw Line Subroutine
119                             ;;============================================================================

119  01501           draw_line: LOAD s5, busy_go               ; load go command
11A  2D504                      OUTPUT s5, busy                ; send go command
11B  09504                wait: INPUT s5, busy                 ; read busy status
11C  1D501                      COMPARE s5, busy_go            ; check busy status
11D  3211B                      JUMP Z, wait                   ; if busy, wait more
11E  25000                      RETURN                         ; leave line drawing subroutine

11F                             ;;============================================================================
11F                             ;; Check Collisions - Check Collisions Subroutine
11F                             ;;============================================================================

11F            check_collision:
11F  005E0                      LOAD s5, se                    ; get current horizontal position of block
120  1950A                      SUB s5, 0A                     ; actual block is 10 pixels back
121  1D564                      COMPARE s5, 64                 ; check if s5 coincides with heli (horizontal check)
122  32124                      JUMP Z, check_vertical         ; jump to check vertical positioning
123  3612E                      JUMP NZ, no_collision          ; jump to no_collision routine

124             check_vertical:
124  006F0                      LOAD s6, sf                    ; get current vertical position of block
125  007C0                      LOAD s7, sc                    ; load helicopter front position
126  1C760                loop: COMPARE s7, s6                 ; compare s7 and s6
127  32132                      JUMP Z, collision_occurred     ; jump to collision_occured
128  11601                      ADD s6, 01                     ; add one to s6
129  008F0                      LOAD s8, sf                    ; load original value for reference only
12A  1183C                      ADD s8, 3c                     ; add 60 to s8
12B  1C680                      COMPARE s6, s8                 ; compare s6 to bottom of block (s8)
12C  3212E                      JUMP Z, no_collision           ; jump to no_collision routine
12D  36126                      JUMP NZ, loop                  ; keep looping

12E  19E01        no_collision: SUB se, 01                     ; decrement sE
12F  11C01                      ADD sc, 01                     ; increment sC
130  20139                      CALL distance                  ; used for keeping the score (increments distance)
131  25000                      RETURN                         ; leave, since no collisions occurred

132         collision_occurred:
132  2D500                      OUTPUT s5, stax                ; set desired stax
133  2D701                      OUTPUT s7, stay                ; set desired stay
134  09807                      INPUT s8, prng                 ; load random endx
135  2D802                      OUTPUT s8, endx                ; set random endx
136  09807                      INPUT s8, prng                 ; load random endy
137  2D803                      OUTPUT s8, endy                ; set random endy
138  25000                      RETURN                         ; return from routine without any increments

139                             ;;============================================================================
139                             ;; Distance - Distance Subroutine
139                             ;;============================================================================

139  2DB0A            distance: OUTPUT sb, qssd_lo             ; put distance value to qssd
13A  1DB99                      COMPARE sb, 99                 ; check if max (99) was reached
13B  3213E                      JUMP Z, distance2              ; jump to distance2
13C  11B01                      ADD sb, one                    ; increment distance value
13D  25000                      RETURN                         ; finished with distance subroutine

13E  11A01           distance2: ADD sa, one                    ; add one to the next degree
13F  01B00                      LOAD sb, zero                  ; reset sB
140  2DB0A                      OUTPUT sb, qssd_lo             ; put distance value to qssd
141  2DA0B                      OUTPUT sa, qssd_hi             ; put distance value to qssd
142  25000                      RETURN                         ; finished with distance subroutine

7FF                             ;;============================================================================
7FF                             ;; Interrupt - Vector.
7FF                             ;;============================================================================

7FF                             ADDRESS 7FF                    ; must be located here
7FF  22013          isr_vector: JUMP isr                       ; always jump to isr

800                             ;;============================================================================
800                             ;;
800                             ;;============================================================================


PSM files that have been assembled
----------------------------------
    /home/adnan/Documents/School/EE178/fpga_video_game/latest_fpga_video_game/software/software.psm


List of defined constants
-------------------------
   CONSTANT name      Value  Source PSM file
   -------------      -----  ---------------
   BEL                07
   BS                 08
   CR                 0D
   DCS                90
   DEL                7F
   ESC                1B
   HT                 09
   LF                 0A
   NUL                00
   ST                 9C
   VT                 0B
   beam               05     software.psm
   beam_hi            0f     software.psm
   beam_lo            03     software.psm
   beam_md            07     software.psm
   busy               04     software.psm
   busy_go            01     software.psm
   buttons            0f     software.psm
   buttons_ct         10     software.psm
   buttons_dn         04     software.psm
   buttons_lf         02     software.psm
   buttons_rt         01     software.psm
   buttons_up         08     software.psm
   datestamp_day      1D
   datestamp_month    0B
   datestamp_year     0F
   endx               02     software.psm
   endy               03     software.psm
   leds_hi            09     software.psm
   leds_lo            08     software.psm
   mode               06     software.psm
   mode_clr           01     software.psm
   mode_exp           03     software.psm
   mode_hld           00     software.psm
   mode_lin           02     software.psm
   one                01     software.psm
   prng               07     software.psm
   qssd_dp            0c     software.psm
   qssd_hi            0b     software.psm
   qssd_lo            0a     software.psm
   stax               00     software.psm
   stay               01     software.psm
   switches_hi        0e     software.psm
   switches_lo        0d     software.psm
   timestamp_hours    05
   timestamp_minutes  09
   timestamp_seconds  24
   zero               00     software.psm


  No tables defined


List of text strings
--------------------
   STRING name  Value          Source PSM file
   -----------  -----          ---------------
   datestamp$   "29 Nov 2015"
   timestamp$   "05:09:36"


List of line labels
-------------------
    Label                    Addr  Source PSM file
 --------                    ----  ---------------
 *  boot                     000   software.psm
    check_collision          11F   software.psm
    check_other_bound_range  06D   software.psm
    check_vertical           124   software.psm
    collision_occurred       132   software.psm
    distance                 139   software.psm
    distance2                13E   software.psm
    draw_block               038   software.psm
    draw_helicopter          033   software.psm
    draw_helicopter_blades   0E7   software.psm
    draw_helicopter_cockpit  073   software.psm
    draw_helicopter_smoke    0FB   software.psm
    draw_helicopter_tail     0B2   software.psm
    draw_line                119   software.psm
    finished1                04C   software.psm
    in_middle                049   software.psm
    isr                      013   software.psm
 *  isr_vector               7FF   software.psm
    left_edge                045   software.psm
    loop                     126   software.psm
    main                     00F   software.psm
    map                      022   software.psm
    move_heli_up             071   software.psm
    new_random               069   software.psm
    no_collision             12E   software.psm
    play                     018   software.psm
    random_block_location    065   software.psm
    right_edge               041   software.psm
    skip_everything          068   software.psm
    wait                     11B   software.psm

       * Unreferenced label(s)


List of pragma blocks
---------------------
   Name  Addr range  Value
   ----  ----------  -----


Instruction usage statistics
----------------------------
   Instruction  Instances
   -----------  ---------
   ADD          16
   ADDCY        -
   AND          -
   CALL         34
   CALL@        -
   COMPARE      11
   COMPARECY    -
   DISABLE      -
   ENABLE       1
   FETCH        -
   HWBUILD      -
   INPUT        11
   JUMP         20
   JUMP@        -
   LOAD         65
   LOAD&RETURN  -
   OR           -
   OUTPUT       101
   OUTPUTK      -
   REGBANK      -
   RETURN       16
   RETURNI      1
   RL           -
   RR           -
   SL0          -
   SL1          -
   SLA          -
   SLX          -
   SR0          -
   SR1          -
   SRA          -
   SRX          -
   STAR         -
   STORE        -
   SUB          48
   SUBCY        -
   TEST         -
   TESTCY       -
   XOR          -
