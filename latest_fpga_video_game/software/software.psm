;;============================================================================
;; File: software.psm
;; This is the PicoBlaze program for EE178 Lab #8.
;;============================================================================

;;============================================================================
;; Port address declarations.
;;============================================================================

CONSTANT stax            , 00 ; port for 8-bit start-x
CONSTANT stay            , 01 ; port for 8-bit start-y
CONSTANT endx            , 02 ; port for 8-bit end-x
CONSTANT endy            , 03 ; port for 8-bit end-y
CONSTANT busy            , 04 ; port for 8-bit busy
CONSTANT beam            , 05 ; port for 8-bit beam
CONSTANT mode            , 06 ; port for 8-bit mode
CONSTANT prng            , 07 ; port for 8-bit prng
CONSTANT leds_lo         , 08 ; port for 8-bit led data out
CONSTANT leds_hi         , 09 ; port for 8-bit led data out
CONSTANT qssd_lo         , 0a ; port for 8-bit qssd data out
CONSTANT qssd_hi         , 0b ; port for 8-bit qssd data out
CONSTANT qssd_dp         , 0c ; port for 8-bit qssd data out
CONSTANT switches_lo     , 0d ; port for 8-bit switch input
CONSTANT switches_hi     , 0e ; port for 8-bit switch input
CONSTANT buttons         , 0f ; port for 8-bit button input
CONSTANT red             , 10 ; port for 8-bit red value
CONSTANT green           , 11 ; port for 8-bit green value
CONSTANT blue            , 11 ; port for 8-bit green value

CONSTANT zero            , 00 ; zero
CONSTANT one             , 01 ; one

CONSTANT busy_go         , 01 ; go command and busy status

CONSTANT beam_hi         , 0f ; beam high intensity
CONSTANT beam_md         , 07 ; beam med intensity
CONSTANT beam_lo         , 03 ; beam low intensity

CONSTANT mode_hld        , 00 ; mode hold framebuffer
CONSTANT mode_clr        , 01 ; mode clear framebuffer
CONSTANT mode_lin        , 02 ; mode linear decay
CONSTANT mode_exp        , 03 ; mode exponential decay

CONSTANT buttons_ct      , 10 ; center
CONSTANT buttons_up      , 08 ; up
CONSTANT buttons_dn      , 04 ; down
CONSTANT buttons_lf      , 02 ; left
CONSTANT buttons_rt      , 01 ; right

CONSTANT start_menu_1    , 00 ;
CONSTANT start_menu_2    , 3C ;
CONSTANT start_menu_3    , 78;

;;============================================================================
;; Macro State declarations
;;============================================================================

CONSTANT START_STATE     , 00 ; start screen state
CONSTANT PLAY_STATE      , 01 ; play state
CONSTANT GAMEOVER_STATE  , 02 ; game over screen state
CONSTANT CREDITS_STATE   , 03 ; credits screen state (not used for now)

;;============================================================================
;; Boot.
;;============================================================================

         boot: LOAD s0, zero                       ; initialize
               LOAD s1, zero                       ; initialize
               LOAD s2, zero                       ; initialize
               LOAD s3, zero                       ; initialize
               LOAD s4, zero                       ; initialize
               LOAD s9, START_STATE                ; initial state is to enter start screen
               LOAD sA, 00                         ; initial distance (score)
               LOAD sB, 00                         ; initial distance (score)
               LOAD sC, 80                         ; starting helicopter position
               LOAD sD, 05                         ; initialize (needed later)
               LOAD sE, FF                         ; load 255 into sE (horizontal coordinate of block)
               LOAD sF, 62                         ; load 108 into sF (vertical coordinate of block)
               LOAD s5, mode_exp                   ; load desired mode
               OUTPUT s5, mode                     ; set desired mode
               LOAD s5, beam_hi                    ; load desired beam
               OUTPUT s5, beam                     ; set desired beam
               LOAD s5, FF                         ; load FF into s5 (red value)
               OUTPUT s5, red                      ; set desired red
               ENABLE INTERRUPT                    ; enable interrupts

;;============================================================================
;; Main.
;;============================================================================

         main: 
               JUMP main                           ; go back and repeat

;;============================================================================
;; Interrupt - Service Routine.
;;============================================================================

          isr: 

               COMPARE s9, START_STATE             ; check if in the start state
               CALL Z, start                       ; call the start screen state
               COMPARE s9, PLAY_STATE              ; check if in the play state
               CALL Z, play                        ; call play subroutine
               COMPARE s9, GAMEOVER_STATE          ; check if in the gameover state
               CALL Z, gameover                    ; call the gameover subroutine
               COMPARE s9, CREDITS_STATE           ; check if in the credits state
               CALL Z, credits                     ; call credits subroutine
               
               RETURNI ENABLE                      ; done with isr
               
;;============================================================================
;; Start - Start Subroutine
;;============================================================================

        start: REGBANK A                           ;
               INPUT s5, buttons                   ; get center button values
               CALL start_screen                   ; draw the map using map subroutine

               INPUT s5, buttons                   ; get button values
               COMPARE s5, buttons_ct              ; check if center button is pressed
               JUMP Z, enter_play_state            ; jump to enter_play_state
               
               REGBANK B                           ;
               ADD s0, one                         ; counter for determining jump between credit/start
               COMPARE s0, F0                      ; check if 120 seconds
               JUMP Z, enter_credit_state          ; if 2 seconds or 120 frames, jump to credit
               JUMP NZ, stay_in_start_state        ; if not 2 seconds or 120 frames, stay in start
enter_play_state:
               REGBANK B                           ;
               LOAD s0, zero                       ;
               REGBANK A                           ;
               LOAD s9, PLAY_STATE                 ; load play_state and enter play mode
               RETURN                            ; return from start subroutine

enter_start_menu:
			   REGBANK B						   ;
			   LOAD s0, zero					   ; clear counter regbank
			   REGBANK A						   ;
			   LOAD s9, START_STATE				   ; load start state
			   RETURN							   ; return to isr
			   
stay_in_start_state:
			   REGBANK A						   ; declare REGBANK A
               RETURN                          ; return from start subroutine
               
               
;;============================================================================
;; Credits - Credit Subroutine
;;============================================================================
      credits:
               REGBANK A                           ;
               CALL draw_credits                   ; draw the credits screen

               INPUT s5, buttons                   ; get button values
               COMPARE s5, buttons_ct              ; check if center button is pressed
               JUMP Z, enter_play_state            ; jump to enter_play_state
               
               REGBANK B                            ; Utilize REGBANK B for counter
               ADD s0, one                          ; counter for determining when to jump between credit/start
               COMPARE s0, F0                       ; 2 seconds / 120 frames -> jump back to start
               JUMP Z, enter_start_menu             ; if 120 frames, jump back to start
               JUMP NZ, stay_in_credit_state        ;
               
enter_credit_state:
               LOAD s0, zero                        ; if entering credit state, clear REGBANK B s0
               REGBANK A                            ;
               LOAD s9, CREDITS_STATE               ; set to credits state
               RETURN                               ;
               
stay_in_credit_state:
               RETURN                               ;
               
;;============================================================================
;; Game Over - Game Over Subroutine
;;============================================================================

     gameover:
               CALL map                            ; draw the map using map subroutine
               CALL draw_helicopter                ; draw the helicopter
               CALL draw_block                     ; draw the obstacle (block)
               CALL draw_gameover                  ; draw gameover message


               LOAD s5, 64                         ; collision point (horizontal)
               OUTPUT s5, stax                     ; set desired stax
               OUTPUT sC, stay                     ; set desired stay
               INPUT s8, prng                      ; load random endx
               OUTPUT s8, endx                     ; set random endx
               INPUT s8, prng                      ; load random endy
               OUTPUT s8, endy                     ; set random endy
               CALL old_draw_line                      ; draw random line

		;	   INPUT s5, buttons                   ; get button values
               ;COMPARE s5, buttons_dn              ; check if down button is pressed
               ;JUMP Z, enter_start_menu			   ; jump to enter_start_state
			   
               INPUT s5, buttons                   ; get button values
               COMPARE s5, buttons_up              ; check if up button is pressed
               JUMP Z, enter_play_state2           ; jump to enter_play_state2
               JUMP NZ, stay_in_gameover_state     ; remain in current state with a jump to stay_in_gameover_state

               

enter_play_state2:
               LOAD s9, PLAY_STATE                 ; load play_state and enter play mode
               
               ;; RESET EVERYTHING BEFORE RETURNING
               LOAD sA, 00                         ; initial distance (score)
               LOAD sB, 00                         ; initial distance (score)
               OUTPUT sB, qssd_lo                  ; reset qssd_lo
           OUTPUT sA, qssd_hi                  ; reset qssd_hi
               LOAD sC, 80                         ; starting helicopter position
               LOAD sD, 05                         ; initialize (needed later)
               LOAD sE, FF                         ; load 255 into sE (horizontal coordinate of block)
               LOAD sF, 62                         ; load 108 into sF (vertical coordinate of block)
               RETURN                              ; return from start subroutine

stay_in_gameover_state:
               RETURN                              ; return from start subroutine

;;============================================================================
;; Play - Play Subroutine
;;============================================================================

         play: INPUT s5, buttons                   ; get center button values
               CALL map                            ; draw the map using map subroutine

               INPUT s5, buttons                   ; get button values
               COMPARE s5, buttons_ct              ; check if center button is pressed
               CALL Z, move_heli_up                ; call subroutine that moves the helicopter up

			   
               CALL draw_helicopter                ; draw the helicopter
               CALL random_block_location          ; determines a random place for the block (y direction only)
               CALL draw_block                     ; draw the block using draw_block subroutine
               CALL check_collision                ; check if any collisions happen

               RETURN                              ; finished with play subroutine

;;============================================================================
;; Map - Draw Map Subroutine
;;============================================================================

         map: 
         
              ;;============================================================================
              ;; Draws Top Line of Map (Line 1)
              ;;============================================================================
              
              LOAD s0, 00                         ; load 00 into s0
              LOAD s1, 0F                         ; load 0F into s1
              LOAD s2, FF                         ; load FF into s2
              LOAD s3, 0F                         ; load 0F into s3
              CALL draw_line                      ; draws the line

              ;;============================================================================
              ;; Draws Bottom Line of Map (Line 2)
              ;;============================================================================

              LOAD s0, 00                         ; load 00 into s0
              LOAD s1, F0                         ; load 0F into s1
              LOAD s2, FF                         ; load FF into s2
              LOAD s3, F0                         ; load F0 into s3
              CALL draw_line                      ; draws the line
              
              RETURN                              ; go back from drawing map
              
;;============================================================================
;; Start Screen - Draw Start Screen Subroutine
;;============================================================================

 start_screen: 
          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
          ;; Code for PRESS START [START MENU] ;;
          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
              
          ;;;;;;;;;;;;;;;
          ;;BEGIN PRESS;;
          ;;;;;;;;;;;;;;;

              ;; LINE 1 (LEFT) FOR P
              LOAD s0, 41             ; stax 65
              LOAD s1, C8             ; stay 200
              LOAD s2, 41             ; endx 65
              LOAD s3, D2             ; endy 210
              CALL draw_line          ;

              ;; LINE 2 (TOP) FOR P
              LOAD s0, 41             ; stax 65
              LOAD s1, C8             ; stay 200
              LOAD s2, 46             ; endx 70
              LOAD s3, C8             ; endy 200
              CALL draw_line          ;

              ;; LINE 3 (RIGHT) FOR P
              LOAD s0, 46             ; stax 70
              LOAD s1, C8             ; stay 200
              LOAD s2, 46             ; endx 70
              LOAD s3, CD             ; endy 205
              CALL draw_line          ;

              ;; LINE 4 (MIDDLE) FOR P
              LOAD s0, 41             ; stax 65
              LOAD s1, CD             ; stay 205
              LOAD s2, 46             ; endx 70
              LOAD s3, CD             ; endy 205
              CALL draw_line          ;

              ;; LINE 1 (LEFT) FOR R
              LOAD s0, 4B             ; stax 75
              LOAD s1, C8             ; stay 200
              LOAD s2, 4B             ; endx 75
              LOAD s3, D2             ; endy 210
              CALL draw_line          ;

              ;; LINE 2 (TOP) FOR R
              LOAD s0, 4B             ; stax 75
              LOAD s1, C8             ; stay 200
              LOAD s2, 50             ; endx 80
              LOAD s3, C8             ; endy 200
              CALL draw_line          ;

              ;; LINE 3 (RIGHT) FOR R
              LOAD s0, 50             ; stax 80
              LOAD s1, C8             ; stay 200
              LOAD s2, 50             ; endx 80
              LOAD s3, CD             ; endy 205
              CALL draw_line          ;

              ;; LINE 4 (MIDDLE) FOR R
              LOAD s0, 4B             ; stax 75
              LOAD s1, CD             ; stay 205
              LOAD s2, 50             ; endx 80
              LOAD s3, CD             ; endy 205
              CALL draw_line          ;

              ;; LINE 5 (ANGLED) FOR R
              LOAD s0, 4B             ; stax 75
              LOAD s1, CD             ; stay 205
              LOAD s2, 50             ; endx 80
              LOAD s3, D2             ; endy 210
              CALL draw_line          ;
              

              ;; LINE 6 (ANGLED2) FOR R
              LOAD s0, 4B             ; stax 75
              LOAD s1, CE             ; stay 204
              LOAD s2, 4F             ; endx 79
              LOAD s3, D2             ; endy 210
              CALL draw_line          ;
              
              ;; LINE 1 (LEFT) FOR E
              LOAD s0, 55             ; stax 85
              LOAD s1, C8             ; stay 200
              LOAD s2, 55             ; endx 85
              LOAD s3, D2             ; endy 210
              CALL draw_line          ;

              ;; LINE 2 (TOP) FOR E
              LOAD s0, 55             ; stax 85
              LOAD s1, C8             ; stay 200
              LOAD s2, 5A             ; endx 90
              LOAD s3, C8             ; endy 200
              CALL draw_line          ;

              ;; LINE 3 (MIDDLE) FOR E
              LOAD s0, 55             ; stax 85
              LOAD s1, CD             ; stay 205
              LOAD s2, 5A             ; endx 90
              LOAD s3, CD             ; endy 205
              CALL draw_line          ;

              ;; LINE 4 (BOTTOM) FOR E
              LOAD s0, 55             ; stax 85
              LOAD s1, D2             ; stay 210
              LOAD s2, 5A             ; endx 90
              LOAD s3, D2             ; endy 210
              CALL draw_line          ;

              ;; LINE 1 (TOP) FOR S1
              LOAD s0, 5F             ; stax 95
              LOAD s1, C8             ; stay 200
              LOAD s2, 64             ; endx 100
              LOAD s3, C8             ; endy 200
              CALL draw_line          ;

              ;; LINE 2 (TOPLEFT) FOR S1
              LOAD s0, 5F             ; stax 95
              LOAD s1, C8             ; stay 200
              LOAD s2, 5F             ; endx 95
              LOAD s3, CD             ; endy 205
              CALL draw_line          ;

              ;; LINE 3 (MIDDLE) FOR S1
              LOAD s0, 5F             ; stax 95
              LOAD s1, CD             ; stay 205
              LOAD s2, 64             ; endx 100
              LOAD s3, CD             ; endy 205
              CALL draw_line          ;

              ;; LINE 4 (BOTTOMRIGHT) FOR S1
              LOAD s0, 64             ; stax 100
              LOAD s1, CD             ; stay 205
              LOAD s2, 64             ; endx 100
              LOAD s3, D2             ; endy 210
              CALL draw_line          ;

              ;; LINE 5 (BOTTOM) FOR S1
              LOAD s0, 5F             ; stax 95
              LOAD s1, D2             ; stay 210
              LOAD s2, 64             ; endx 100
              LOAD s3, D2             ; endy 210
              CALL draw_line          ;

              ;; LINE 1 (TOP) FOR S2
              LOAD s0, 69             ; stax 105
              LOAD s1, C8             ; stay 200
              LOAD s2, 6E             ; endx 110
              LOAD s3, C8             ; endy 200
              CALL draw_line          ;

              ;; LINE 2 (TOPLEFT) FOR S2
              LOAD s0, 69             ; stax 105
              LOAD s1, C8             ; stay 200
              LOAD s2, 69             ; endx 105
              LOAD s3, CD             ; endy 205
              CALL draw_line          ;

              ;; LINE 3 (MIDDLE) FOR S2
              LOAD s0, 69             ; stax 105
              LOAD s1, CD             ; stay 205
              LOAD s2, 6E             ; endx 110
              LOAD s3, CD             ; endy 205
              CALL draw_line          ;

              ;; LINE 4 (BOTTOMRIGHT) FOR S2
              LOAD s0, 6E             ; stax 110
              LOAD s1, CD             ; stay 205
              LOAD s2, 6E             ; endx 110
              LOAD s3, D2             ; endy 210
              CALL draw_line          ;

              ;; LINE 5 (BOTTOM) FOR S2
              LOAD s0, 69             ; stax 105
              LOAD s1, D2             ; stay 210
              LOAD s2, 6E             ; endx 110
              LOAD s3, D2             ; endy 210
              CALL draw_line          ;

              ;;;;;;;;;;;;;;;
              ;;BEGIN START;;
              ;;;;;;;;;;;;;;;
              
              ;; LINE 1 (TOP) FOR S
              LOAD s0, 82             ; stax 130
              LOAD s1, C8             ; stay 200
              LOAD s2, 88             ; endx 135
              LOAD s3, C8             ; endy 200
              CALL draw_line          ;

              ;; LINE 2 (TOPLEFT) FOR S
              LOAD s0, 82             ; stax 130
              LOAD s1, C8             ; stay 200
              LOAD s2, 82             ; endx 130
              LOAD s3, CD             ; endy 205
              CALL draw_line          ;

              ;; LINE 3 (MIDDLE) FOR S
              LOAD s0, 82             ; stax 130
              LOAD s1, CD             ; stay 205
              LOAD s2, 87             ; endx 135
              LOAD s3, CD             ; endy 205
              CALL draw_line          ;

              ;; LINE 4 (BOTTOMRIGHT) FOR S
              LOAD s0, 87             ; stax 135
              LOAD s1, CD             ; stay 205
              LOAD s2, 87             ; endx 135
              LOAD s3, D2             ; endy 210
              CALL draw_line          ;

              ;; LINE 5 (BOTTOM) FOR S
              LOAD s0, 82             ; stax 130
              LOAD s1, D2             ; stay 210
              LOAD s2, 87             ; endx 135
              LOAD s3, D2             ; endy 210
              CALL draw_line          ;

              ;; LINE 1 (TOP) FOR T1
              LOAD s0, 8C             ; stax 140
              LOAD s1, C8             ; stay 200
              LOAD s2, 93             ; endx 147
              LOAD s3, C8             ; endy 200
              CALL draw_line          ;

              ;; LINE 2 (MIDDLE) FOR T1
              LOAD s0, 8F             ; stax 143
              LOAD s1, C8             ; stay 200
              LOAD s2, 8F             ; endx 143
              LOAD s3, D2             ; endy 210
              CALL draw_line          ;

              ;; LINE 1 (LEFT) FOR A
              LOAD s0, 96             ; stax 150
              LOAD s1, C8             ; stay 200
              LOAD s2, 96             ; endx 150
              LOAD s3, D2             ; endy 210
              CALL draw_line          ;

              ;; LINE 2 (TOP) FOR A
              LOAD s0, 96             ; stax 150
              LOAD s1, C8             ; stay 200
              LOAD s2, 9B             ; endx 155
              LOAD s3, C8             ; endy 200
              CALL draw_line          ;

              ;; LINE 3 (MIDDLE) FOR A
              LOAD s0, 96             ; stax 150
              LOAD s1, CD             ; stay 205
              LOAD s2, 9B             ; endx 155
              LOAD s3, CD             ; endy 205
              CALL draw_line          ;

              ;; LINE 4 (RIGHT) FOR A
              LOAD s0, 9B             ; stax 155
              LOAD s1, C8             ; stay 200
              LOAD s2, 9B             ; endx 155
              LOAD s3, D2             ; endy 210
              CALL draw_line          ;

              ;; LINE 1 (LEFT) FOR R
              LOAD s0, A0             ; stax 160
              LOAD s1, C8             ; stay 200
              LOAD s2, A0             ; endx 160
              LOAD s3, D2             ; endy 210
              CALL draw_line          ;

              ;; LINE 2 (TOP) FOR R
              LOAD s0, A0             ; stax 160
              LOAD s1, C8             ; stay 200
              LOAD s2, A5             ; endx 165
              LOAD s3, C8             ; endy 200
              CALL draw_line          ;

              ;; LINE 3 (RIGHT) FOR R
              LOAD s0, A5             ; stax 165
              LOAD s1, C8             ; stay 200
              LOAD s2, A5             ; endx 165
              LOAD s3, CD             ; endy 205
              CALL draw_line          ;

              ;; LINE 4 (MIDDLE) FOR R
              LOAD s0, A0             ; stax 160
              LOAD s1, CD             ; stay 205
              LOAD s2, A5             ; endx 165
              LOAD s3, CD             ; endy 205
              CALL draw_line          ;

              ;; LINE 5 (ANGLED) FOR R
              LOAD s0, A0             ; stax 160
              LOAD s1, CD             ; stay 205
              LOAD s2, A5             ; endx 165
              LOAD s3, D2             ; endy 210
              CALL draw_line          ;

              ;; LINE 6 (ANGLED2) FOR R
              LOAD s0, A0             ; stax 160
              LOAD s1, CE             ; stay 206
              LOAD s2, A4             ; endx 164
              LOAD s3, D2             ; endy 210
              CALL draw_line          ;
              
              ;; LINE 1 (TOP) FOR T2
              LOAD s0, AA             ; stax 170
              LOAD s1, C8             ; stay 200
              LOAD s2, B1             ; endx 177
              LOAD s3, C8             ; endy 200
              CALL draw_line          ;

              ;; LINE 2 (MIDDLE) FOR T2
              LOAD s0, AD             ; stax 173
              LOAD s1, C8             ; stay 200
              LOAD s2, AD             ; endx 173
              LOAD s3, D2             ; endy 210
              CALL draw_line          ;
 
 

              ;;============================================================================
              ;; Draws Decoration (Line 1a)
              ;;============================================================================
              
              LOAD s0, 00                         ; load 00 into s0
              LOAD s1, 0A                         ; load 0A into s1
              LOAD s2, FF                         ; load FF into s2
              LOAD s3, 0A                         ; load 0A into s3
              CALL draw_line                      ; draws the line
 
              ;;===========================================================================
              ;; Draws Decoration (Line 2a)
              ;;============================================================================

              LOAD s0, 00                         ; load 00 into s0
              LOAD s1, 0C                         ; load 0C into s1
              LOAD s2, FF                         ; load FF into s2
              LOAD s3, 0C                         ; load 0C into s3
              CALL draw_line                      ; draws the line
              
              ;;===========================================================================
              ;; Draws Decoration (Line 3a)
              ;;============================================================================

              LOAD s0, 00                         ; load 00 into s0
              LOAD s1, 0E                         ; load 0E into s1
              LOAD s2, FF                         ; load FF into s2
              LOAD s3, 0E                         ; load 0E into s3
              CALL draw_line                      ; draws the line
              
              ;;============================================================================
              ;; Draws Decoration (Line 1b)
              ;;============================================================================

              LOAD s0, 00                         ; load 00 into s0
              LOAD s1, 88                         ; load 88 into s1
              LOAD s2, FF                         ; load FF into s2
              LOAD s3, 88                         ; load 88 into s3
              CALL draw_line                      ; draws the line
 
              ;;===========================================================================
              ;; Draws Decoration (Line 2b)
              ;;============================================================================

              LOAD s0, 00                         ; load 00 into s0
              LOAD s1, 8A                         ; load 8A into s1
              LOAD s2, FF                         ; load FF into s2
              LOAD s3, 8A                         ; load 8A into s3
              CALL draw_line                      ; draws the line

              ;;===========================================================================
              ;; Draws Decoration (Line 3b)
              ;;============================================================================

              LOAD s0, 00                         ; load 00 into s0
              LOAD s1, 8C                         ; load 8A into s1
              LOAD s2, FF                         ; load FF into s2
              LOAD s3, 8C                         ; load 8C into s3
              CALL draw_line                      ; draws the line

              ;;============================================================================
              ;; Draws the letter H (Line 1)
              ;;============================================================================

              ;; STARTING POINT
              LOAD s5, 0A                         ; load 10 into s5
              OUTPUT s5, stax                     ; set desired stax
              LOAD s6, 1E                         ; load 30 into s6
              OUTPUT s6, stay                     ; set desired stay

              ;; ENDING POINT
              OUTPUT s5, endx                     ; set desired endx
              LOAD s6, 3C                         ; load 60 into s6
              OUTPUT s6, endy                     ; set desired endy
              CALL old_draw_line                      ; draws a line (careful: this subroutine overwrites s5)
              
              ;;============================================================================
              ;; Draws the letter H (Line 2)
              ;;============================================================================
              
              ;; STARTING POINT
              LOAD s5, 0A                         ; load 10 into s5
              OUTPUT s5, stax                     ; set desired stax
              LOAD s6, 2D                         ; load 45 into s6
              OUTPUT s6, stay                     ; set desired stay

              ;; ENDING POINT
              LOAD s5, 1E                         ; load 30 into s5
              OUTPUT s5, endx                     ; set desired endx
              OUTPUT s6, endy                     ; set desired endy
              CALL old_draw_line                      ; draws a line (careful: this subroutine overwrites s5)

              ;;============================================================================
              ;; Draws the letter H (Line 3)
              ;;============================================================================
              
              ;; STARTING POINT
              LOAD s5, 1E                         ; load 30 into s5
              OUTPUT s5, stax                     ; set desired stax
              LOAD s6, 1E                         ; load 30 into s6
              OUTPUT s6, stay                     ; set desired stay

              ;; ENDING POINT
              OUTPUT s5, endx                     ; set desired endx
              LOAD s6, 3C                         ; load 60 into s6
              OUTPUT s6, endy                     ; set desired endy
              CALL old_draw_line                      ; draws a line (careful: this subroutine overwrites s5)

              ;;============================================================================
              ;; Draws the letter E (Line 1)
              ;;============================================================================
              
              ;; STARTING POINT
              LOAD s5, 28                         ; load 40 into s5
              OUTPUT s5, stax                     ; set desired stax
              LOAD s6, 1E                         ; load 30 into s6
              OUTPUT s6, stay                     ; set desired stay

              ;; ENDING POINT
              OUTPUT s5, endx                     ; set desired endx
              LOAD s6, 3C                         ; load 60 into s6
              OUTPUT s6, endy                     ; set desired endy
              CALL old_draw_line                      ; draws a line (careful: this subroutine overwrites s5)
              
              ;;============================================================================
              ;; Draws the letter E (Line 2)
              ;;============================================================================
              
              ;; STARTING POINT
              LOAD s5, 28                         ; load 40 into s5
              OUTPUT s5, stax                     ; set desired stax
              LOAD s6, 1E                         ; load 30 into s6
              OUTPUT s6, stay                     ; set desired stay

              ;; ENDING POINT
              LOAD s5, 3C                         ; load 60 into s5
              OUTPUT s5, endx                     ; set desired endx
              OUTPUT s6, endy                     ; set desired endy
              CALL old_draw_line                      ; draws a line (careful: this subroutine overwrites s5)

              ;;============================================================================
              ;; Draws the letter E (Line 3)
              ;;============================================================================
              
              ;; STARTING POINT
              LOAD s5, 28                         ; load 40 into s5
              OUTPUT s5, stax                     ; set desired stax
              LOAD s6, 2D                         ; load 45 into s6
              OUTPUT s6, stay                     ; set desired stay

              ;; ENDING POINT
              LOAD s5, 3C                         ; load 60 into s5
              OUTPUT s5, endx                     ; set desired endx
              OUTPUT s6, endy                     ; set desired endy
              CALL old_draw_line                      ; draws a line (careful: this subroutine overwrites s5)
              
              ;;============================================================================
              ;; Draws the letter E (Line 3)
              ;;============================================================================
              
              ;; STARTING POINT
              LOAD s5, 28                         ; load 40 into s5
              OUTPUT s5, stax                     ; set desired stax
              LOAD s6, 3C                         ; load 45 into s6
              OUTPUT s6, stay                     ; set desired stay

              ;; ENDING POINT
              LOAD s5, 3C                         ; load 60 into s5
              OUTPUT s5, endx                     ; set desired endx
              OUTPUT s6, endy                     ; set desired endy
              CALL old_draw_line                      ; draws a line (careful: this subroutine overwrites s5)

              ;;============================================================================
              ;; Draws the letter L (Line 1)
              ;;============================================================================
              
              ;; STARTING POINT
              LOAD s5, 46                         ; load 70 into s5
              OUTPUT s5, stax                     ; set desired stax
              LOAD s6, 1E                         ; load 30 into s6
              OUTPUT s6, stay                     ; set desired stay

              ;; ENDING POINT
              OUTPUT s5, endx                     ; set desired endx
              LOAD s6, 3C                         ; load 60 into s6
              OUTPUT s6, endy                     ; set desired endy
              CALL old_draw_line                      ; draws a line (careful: this subroutine overwrites s5)

              ;;============================================================================
              ;; Draws the letter L (Line 2)
              ;;============================================================================
              
              ;; STARTING POINT
              LOAD s5, 46                         ; load 70 into s5
              OUTPUT s5, stax                     ; set desired stax
              LOAD s6, 3C                         ; load 45 into s6
              OUTPUT s6, stay                     ; set desired stay

              ;; ENDING POINT
              LOAD s5, 5A                         ; load 90 into s5
              OUTPUT s5, endx                     ; set desired endx
              OUTPUT s6, endy                     ; set desired endy
              CALL old_draw_line                      ; draws a line (careful: this subroutine overwrites s5)

              ;;============================================================================
              ;; Draws the letter I (Line 1)
              ;;============================================================================
              
              ;; STARTING POINT
              LOAD s5, 64                         ; load 70 into s5
              OUTPUT s5, stax                     ; set desired stax
              LOAD s6, 1E                         ; load 30 into s6
              OUTPUT s6, stay                     ; set desired stay

              ;; ENDING POINT
              OUTPUT s5, endx                     ; set desired endx
              LOAD s6, 3C                         ; load 60 into s6
              OUTPUT s6, endy                     ; set desired endy
              CALL old_draw_line                      ; draws a line (careful: this subroutine overwrites s5)

              ;;============================================================================
              ;; Draws the letter C (Line 1)
              ;;============================================================================
              
              ;; STARTING POINT
              LOAD s5, 82                         ; load 130 into s5
              OUTPUT s5, stax                     ; set desired stax
              LOAD s6, 1E                         ; load 45 into s6
              OUTPUT s6, stay                     ; set desired stay

              ;; ENDING POINT
              LOAD s5, 73                         ; load 115 into s5
              OUTPUT s5, endx                     ; set desired endx
              OUTPUT s6, endy                     ; set desired endy
              CALL old_draw_line                      ; draws a line (careful: this subroutine overwrites s5)

              ;;============================================================================
              ;; Draws the letter C (Line 2)
              ;;============================================================================
              
              ;; STARTING POINT
              LOAD s5, 73                         ; load 115 into s5
              OUTPUT s5, stax                     ; set desired stax
              LOAD s6, 1E                         ; load 45 into s6
              OUTPUT s6, stay                     ; set desired stay

              ;; ENDING POINT
              LOAD s5, 6E                         ; load 110 into s5
              OUTPUT s5, endx                     ; set desired endx
              LOAD s6, 23                         ; load 35 into s6
              OUTPUT s6, endy                     ; set desired endy
              CALL old_draw_line                      ; draws a line (careful: this subroutine overwrites s5)

              ;;============================================================================
              ;; Draws the letter C (Line 3)
              ;;============================================================================
              
              ;; STARTING POINT
              LOAD s5, 6E                         ; load 110 into s5
              OUTPUT s5, stax                     ; set desired stax
              LOAD s6, 23                         ; load 35 into s6
              OUTPUT s6, stay                     ; set desired stay

              ;; ENDING POINT
              OUTPUT s5, endx                     ; set desired endx
              LOAD s6, 37                         ; load 55 into s6
              OUTPUT s6, endy                     ; set desired endy
              CALL old_draw_line                      ; draws a line (careful: this subroutine overwrites s5)
           
              ;;============================================================================
              ;; Draws the letter C (Line 4)
              ;;============================================================================
              
              ;; STARTING POINT
              LOAD s5, 6E                         ; load 110 into s5
              OUTPUT s5, stax                     ; set desired stax
              LOAD s6, 37                         ; load 55 into s6
              OUTPUT s6, stay                     ; set desired stay

              ;; ENDING POINT
              LOAD s5, 73                         ; load 130 into s5
              OUTPUT s5, endx                     ; set desired endx
              LOAD s6, 3B                         ; load 44 into s6
              OUTPUT s6, endy                     ; set desired endy
              CALL old_draw_line                      ; draws a line (careful: this subroutine overwrites s5)

              ;;============================================================================
              ;; Draws the letter C (Line 5)
              ;;============================================================================
              
              ;; STARTING POINT
              LOAD s5, 82                         ; load 130 into s5
              OUTPUT s5, stax                     ; set desired stax
              LOAD s6, 3C                         ; load 45 into s6
              OUTPUT s6, stay                     ; set desired stay

              ;; ENDING POINT
              LOAD s5, 73                         ; load 115 into s5
              OUTPUT s5, endx                     ; set desired endx
              OUTPUT s6, endy                     ; set desired endy
              CALL old_draw_line                      ; draws a line (careful: this subroutine overwrites s5)

              ;;============================================================================
              ;; Draws the letter O (Line 1)
              ;;============================================================================
              
              ;; STARTING POINT
              LOAD s5, 91                         ; load 145 into s5
              OUTPUT s5, stax                     ; set desired stax
              LOAD s6, 1E                         ; load 30 into s6
              OUTPUT s6, stay                     ; set desired stay

              ;; ENDING POINT
              LOAD s5, 9B                         ; load 155 into s5
              OUTPUT s5, endx                     ; set desired endx
              OUTPUT s6, endy                     ; set desired endy
              CALL old_draw_line                      ; draws a line (careful: this subroutine overwrites s5)

              ;;============================================================================
              ;; Draws the letter O (Line 2)
              ;;============================================================================
              
              ;; STARTING POINT
              LOAD s5, 91                         ; load 145 into s5
              OUTPUT s5, stax                     ; set desired stax
              LOAD s6, 1E                         ; load 45 into s6
              OUTPUT s6, stay                     ; set desired stay

              ;; ENDING POINT
              LOAD s5, 8C                         ; load 110 into s5
              OUTPUT s5, endx                     ; set desired endx
              LOAD s6, 1E                         ; load 35 into s6
              OUTPUT s6, endy                     ; set desired endy
              CALL old_draw_line                      ; draws a line (careful: this subroutine overwrites s5)

              ;;============================================================================
              ;; Draws the letter O (Line 3)
              ;;============================================================================
              
              ;; STARTING POINT
              LOAD s5, 8C                         ; load 140 into s5
              OUTPUT s5, stax                     ; set desired stax
              LOAD s6, 1E                         ; load 30 into s6
              OUTPUT s6, stay                     ; set desired stay

              ;; ENDING POINT
              OUTPUT s5, endx                     ; set desired endx
              LOAD s6, 3C                         ; load 60 into s6
              OUTPUT s6, endy                     ; set desired endy
              CALL old_draw_line                      ; draws a line (careful: this subroutine overwrites s5)
           
              ;;============================================================================
              ;; Draws the letter O (Line 4)
              ;;============================================================================
              
              ;; STARTING POINT
              LOAD s5, 8C                         ; load 110 into s5
              OUTPUT s5, stax                     ; set desired stax
              LOAD s6, 3C                         ; load 55 into s6
              OUTPUT s6, stay                     ; set desired stay

              ;; ENDING POINT
              LOAD s5, 91                         ; load 145 into s5
              OUTPUT s5, endx                     ; set desired endx
              LOAD s6, 3C                         ; load 30 into s6
              OUTPUT s6, endy                     ; set desired endy
              CALL old_draw_line                      ; draws a line (careful: this subroutine overwrites s5)

              ;;============================================================================
              ;; Draws the letter O (Line 5)
              ;;============================================================================
              
              ;; STARTING POINT
              LOAD s5, 91                         ; load 145 into s5
              OUTPUT s5, stax                     ; set desired stax
              LOAD s6, 3C                         ; load 30 into s6
              OUTPUT s6, stay                     ; set desired stay

              ;; ENDING POINT
              LOAD s5, 9B                         ; load 155 into s5
              OUTPUT s5, endx                     ; set desired endx
              OUTPUT s6, endy                     ; set desired endy
              CALL old_draw_line                      ; draws a line (careful: this subroutine overwrites s5)

              ;;============================================================================
              ;; Draws the letter O (Line 6)
              ;;============================================================================
              
              ;; STARTING POINT
              LOAD s5, 9B                         ; load 110 into s5
              OUTPUT s5, stax                     ; set desired stax
              LOAD s6, 3C                         ; load 55 into s6
              OUTPUT s6, stay                     ; set desired stay

              ;; ENDING POINT
              LOAD s5, A0                         ; load 160 into s5
              OUTPUT s5, endx                     ; set desired endx
              LOAD s6, 3C                         ; load 30 into s6
              OUTPUT s6, endy                     ; set desired endy
              CALL old_draw_line                      ; draws a line (careful: this subroutine overwrites s5)

              ;;============================================================================
              ;; Draws the letter O (Line 7)
              ;;============================================================================
              
              ;; STARTING POINT
              LOAD s5, A0                         ; load 160 into s5
              OUTPUT s5, stax                     ; set desired stax
              LOAD s6, 1E                         ; load 30 into s6
              OUTPUT s6, stay                     ; set desired stay

              ;; ENDING POINT
              OUTPUT s5, endx                     ; set desired endx
              LOAD s6, 3C                         ; load 60 into s6
              OUTPUT s6, endy                     ; set desired endy
              CALL old_draw_line                      ; draws a line (careful: this subroutine overwrites s5)

              ;;============================================================================
              ;; Draws the letter O (Line 8)
              ;;============================================================================
              
              ;; STARTING POINT
              LOAD s5, A0                         ; load 160 into s5
              OUTPUT s5, stax                     ; set desired stax
              LOAD s6, 1E                         ; load 30 into s6
              OUTPUT s6, stay                     ; set desired stay

              ;; ENDING POINT
              LOAD s5, 9B                         ; load 155 into s5
              OUTPUT s5, endx                     ; set desired endx
              LOAD s6, 1E                         ; load 30 into s6
              OUTPUT s6, endy                     ; set desired endy
              CALL old_draw_line                  ; draws a line (careful: this subroutine overwrites s5)
              
              ;;============================================================================
              ;; Draws the letter P (Line 1)
              ;;============================================================================
              LOAD s0, AA                        ; load 170 into s0
              LOAD s1, 1E                        ; load 30 into s1
              LOAD s2, BE                        ; load 190 into s2
              LOAD s3, 1E                        ; keep s3 set at 30
              CALL draw_line                     ; call the draw_line subroutine
              
              ;;============================================================================
              ;; Draws the letter P (Line 2)
              ;;============================================================================
              LOAD s0, AA                        ; load 170 into s0
              LOAD s1, 1E                        ; load 30 into s1
              LOAD s2, AA                        ; load 170 into s2
              LOAD s3, 3C                        ; load 60 into s3
              CALL draw_line                     ; call the draw_line subroutine

              ;;============================================================================
              ;; Draws the letter P (Line 3)
              ;;============================================================================
              LOAD s0, AA                        ; load 170 into s0
              LOAD s1, 2D                        ; load 45 into s1
              LOAD s2, BE                        ; load 190 into s2
              LOAD s3, 2D                        ; keep s0 set at 45
              CALL draw_line                     ; call the draw_line subroutine

              ;;============================================================================
              ;; Draws the letter P (Line 4)
              ;;============================================================================
              LOAD s0, BE                        ; load 190 into s0
              LOAD s1, 1E                        ; load 30 into s1
              LOAD s2, BE                        ; load 190 into s2
              LOAD s3, 2D                        ; load 45 to s3
              CALL draw_line                     ; call the draw_line subroutine

              ;;============================================================================
              ;; Draws the letter T (Line 1)
              ;;============================================================================
              LOAD s0, C8                        ; load 200 into s0
              LOAD s1, 1E                        ; load 30 into s1
              LOAD s2, DC                        ; load 220 into s2
              LOAD s3, 1E                        ; load 30 to s3
              CALL draw_line                     ; call the draw_line subroutine

              ;;============================================================================
              ;; Draws the letter T (Line 2)
              ;;============================================================================
              LOAD s0, D2                        ; load 200 into s0
              LOAD s1, 1E                        ; load 30 into s1
              LOAD s2, D2                        ; load 220 into s2
              LOAD s3, 3C                        ; load 60 to s3
              CALL draw_line                     ; call the draw_line subroutine
              
              ;;============================================================================
              ;; Draws the letter E (Line 1)
              ;;============================================================================
              LOAD s0, E6                        ; load 230 into s0
              LOAD s1, 1E                        ; load 30 into s1
              LOAD s2, E6                        ; load 230 into s2
              LOAD s3, 3C                        ; load 30 to s3
              CALL draw_line                     ; call the draw_line subroutine
              
              ;;============================================================================
              ;; Draws the letter E (Line 2)
              ;;============================================================================
              LOAD s0, E6                        ; load 230 into s0
              LOAD s1, 1E                        ; load 30 into s1
              LOAD s2, FA                        ; load 250 into s2
              LOAD s3, 1E                        ; load 30 to s3
              CALL draw_line                     ; call the draw_line subroutine

              ;;============================================================================
              ;; Draws the letter E (Line 3)
              ;;============================================================================
              LOAD s0, E6                        ; load 230 into s0
              LOAD s1, 2D                        ; load 30 into s1
              LOAD s2, FA                        ; load 250 into s2
              LOAD s3, 2D                        ; load 30 to s3
              CALL draw_line                     ; call the draw_line subroutine

              ;;============================================================================
              ;; Draws the letter E (Line 4)
              ;;============================================================================
              LOAD s0, E6                        ; load 230 into s0
              LOAD s1, 3C                        ; load 30 into s1
              LOAD s2, FA                        ; load 250 into s2
              LOAD s3, 3C                        ; load 30 to s3
              CALL draw_line                     ; call the draw_line subroutine

              ;;============================================================================
              ;; NEW LINE STARTS HERE (GAME)
              ;;============================================================================

              ;;============================================================================
              ;; Draws the letter G (Line 1)
              ;;============================================================================
              LOAD s0, 46                        ; load 70 into s0
              LOAD s1, 5A                        ; load 90 into s1
              LOAD s2, 5A                        ; load 90 into s2
              LOAD s3, 5A                        ; load 90 to s3
              CALL draw_line                     ; call the draw_line subroutine

              ;;============================================================================
              ;; Draws the letter G (Line 2)
              ;;============================================================================
              LOAD s0, 46                        ; load 70 into s0
              LOAD s1, 5A                        ; load 90 into s1
              LOAD s2, 46                        ; load 90 into s2
              LOAD s3, 78                        ; load 90 to s3
              CALL draw_line                     ; call the draw_line subroutine

              ;;============================================================================
              ;; Draws the letter G (Line 3)
              ;;============================================================================
              LOAD s0, 46                        ; load 70 into s0
              LOAD s1, 78                        ; load 90 into s1
              LOAD s2, 5A                        ; load 90 into s2
              LOAD s3, 78                        ; load 90 to s3
              CALL draw_line                     ; call the draw_line subroutine

              ;;============================================================================
              ;; Draws the letter G (Line 4)
              ;;============================================================================
              LOAD s0, 5A                        ; load 70 into s0
              LOAD s1, 69                        ; load 90 into s1
              LOAD s2, 5A                        ; load 90 into s2
              LOAD s3, 78                        ; load 90 to s3
              CALL draw_line                     ; call the draw_line subroutine

              ;;============================================================================
              ;; Draws the letter G (Line 5)
              ;;============================================================================
              LOAD s0, 5A                        ; load 70 into s0
              LOAD s1, 69                        ; load 90 into s1
              LOAD s2, 50                        ; load 90 into s2
              LOAD s3, 69                        ; load 90 to s3
              CALL draw_line                     ; call the draw_line subroutine

              ;;============================================================================
              ;; Draws the letter A (Line 1)
              ;;============================================================================
              LOAD s0, 64                        ; 100
              LOAD s1, 5A                        ; 90
              LOAD s2, 78                        ; 120
              LOAD s3, 5A                        ; 90
              CALL draw_line                     ; call the draw_line subroutine

              ;;============================================================================
              ;; Draws the letter A (Line 2)
              ;;============================================================================
              LOAD s0, 64                        ; 100
              LOAD s1, 69                        ; 105
              LOAD s2, 78                        ; 120
              LOAD s3, 69                        ; 105
              CALL draw_line                     ; call the draw_line subroutine

              ;;============================================================================
              ;; Draws the letter A (Line 3)
              ;;============================================================================
              LOAD s0, 64                        ; 100
              LOAD s1, 5A                        ; 90
              LOAD s2, 64                        ; 100
              LOAD s3, 78                        ; 120
              CALL draw_line                     ; call the draw_line subroutine

              ;;============================================================================
              ;; Draws the letter A (Line 4)
              ;;============================================================================
              LOAD s0, 78                        ; 120
              LOAD s1, 5A                        ; 90
              LOAD s2, 78                        ; 120
              LOAD s3, 78                        ; 120
              CALL draw_line                     ; call the draw_line subroutine

              ;;============================================================================
              ;; Draws the letter M (Line 1)
              ;;============================================================================
              LOAD s0, 82                        ; 130
              LOAD s1, 5A                        ; 90
              LOAD s2, 82                        ; 130
              LOAD s3, 78                        ; 120
              CALL draw_line                     ; call the draw_line subroutine

              ;;============================================================================
              ;; Draws the letter M (Line 2)
              ;;============================================================================
              LOAD s0, 96                        ; 150
              LOAD s1, 5A                        ; 90
              LOAD s2, 96                        ; 150
              LOAD s3, 78                        ; 120
              CALL draw_line                     ; call the draw_line subroutine

              ;;============================================================================
              ;; Draws the letter M (Line 3)
              ;;============================================================================
              LOAD s0, 96                        ; 150
              LOAD s1, 5A                        ; 90
              LOAD s2, 8C                        ; 140
              LOAD s3, 69                        ; 105
              CALL draw_line                     ; call the draw_line subroutine

              ;;============================================================================
              ;; Draws the letter M (Line 4)
              ;;============================================================================
              LOAD s0, 82                        ; 130
              LOAD s1, 5A                        ; 90
              LOAD s2, 8C                        ; 140
              LOAD s3, 69                        ; 105
              CALL draw_line                     ; call the draw_line subroutine

              ;;============================================================================
              ;; Draws the letter E (Line 1)
              ;;============================================================================
              LOAD s0, A0                        ; 160
              LOAD s1, 5A                        ; 90
              LOAD s2, A0                        ; 160
              LOAD s3, 78                        ; 120
              CALL draw_line                     ; call the draw_line subroutine

              ;;============================================================================
              ;; Draws the letter E (Line 2)
              ;;============================================================================
              LOAD s0, A0                        ; 160
              LOAD s1, 5A                        ; 90
              LOAD s2, B4                        ; 180
              LOAD s3, 5A                        ; 90
              CALL draw_line                     ; call the draw_line subroutine

             ;;============================================================================
              ;; Draws the letter E (Line 3)
              ;;============================================================================
              LOAD s0, A0                        ; 160
              LOAD s1, 69                        ; 105
              LOAD s2, B4                        ; 180
              LOAD s3, 69                        ; 105
              CALL draw_line                     ; call the draw_line subroutine

             ;;============================================================================
              ;; Draws the letter E (Line 4)
              ;;============================================================================
              LOAD s0, A0                        ; 160
              LOAD s1, 78                        ; 120
              LOAD s2, B4                        ; 180
              LOAD s3, 78                        ; 120
              CALL draw_line                     ; call the draw_line subroutine

              RETURN                              ; leave start_screen subroutine

              
;;============================================================================
;; Game Over - Draw Game Over Screen Subroutine
;;============================================================================

 draw_gameover: 
          ;;;;;;;;;;;;;;;;;;;;;;;;
          ;; Code for Game Over ;;
          ;;;;;;;;;;;;;;;;;;;;;;;;
              
              ;;;;;;;;;;;;;;;
              ;;BEGIN GAME;;
              ;;;;;;;;;;;;;;;
              
              ;; LINE 1 (TOP) FOR G
              LOAD s0, 0A             ; stax 10
              LOAD s1, 1E             ; stay 30
              LOAD s2, 1E             ; endx 30
              LOAD s3, 1E             ; endy 30
              CALL draw_line          ;
              
              ;; LINE 2 (LEFT) FOR G
              LOAD s0, 0A             ; stax 10
              LOAD s1, 1E             ; stay 30
              LOAD s2, 0A             ; endx 10
              LOAD s3, 3C             ; endy 60
              CALL draw_line          ;

              ;; LINE 3 (BOTTOM) FOR G
              LOAD s0, 0A             ; stax 10
              LOAD s1, 3C             ; stay 60
              LOAD s2, 1E             ; endx 30
              LOAD s3, 3C             ; endy 60
              CALL draw_line          ;

              ;; LINE 4 (RIGHT) FOR G
              LOAD s0, 1E             ; stax 30
              LOAD s1, 32             ; stay 50
              LOAD s2, 1E             ; endx 30
              LOAD s3, 3C             ; endy 60
              CALL draw_line          ;

              ;; LINE 5 (INNER MIDDLE) FOR G
              LOAD s0, 14             ; stax 20
              LOAD s1, 32             ; stay 50
              LOAD s2, 1E             ; endx 30
              LOAD s3, 32             ; endy 50
              CALL draw_line          ;

              ;; LINE 1 (LEFT) FOR A
              LOAD s0, 28             ; stax 40
              LOAD s1, 1E             ; stay 30
              LOAD s2, 28             ; endx 40
              LOAD s3, 3C             ; endy 60
              CALL draw_line          ;

              ;; LINE 2 (TOP) FOR A
              LOAD s0, 28             ; stax 40
              LOAD s1, 1E             ; stay 30
              LOAD s2, 3C             ; endx 60
              LOAD s3, 1E             ; endy 30
              CALL draw_line          ;

              ;; LINE 3 (MIDDLE) FOR A
              LOAD s0, 28             ; stax 40
              LOAD s1, 2D             ; stay 45
              LOAD s2, 3C             ; endx 60
              LOAD s3, 2D             ; endy 45
              CALL draw_line          ;

              ;; LINE 4 (RIGHT) FOR A
              LOAD s0, 3C             ; stax 60
              LOAD s1, 1E             ; stay 30
              LOAD s2, 3C             ; endx 60
              LOAD s3, 3C             ; endy 60
              CALL draw_line          ;

              ;; LINE 1 (LEFT) FOR M
              LOAD s0, 46             ; stax 70
              LOAD s1, 1E             ; stay 30
              LOAD s2, 46             ; endx 70
              LOAD s3, 3C             ; endy 60
              CALL draw_line          ;

              ;; LINE 2 (LEFT ANGLED) FOR M
              LOAD s0, 46             ; stax 70
              LOAD s1, 1E             ; stay 30
              LOAD s2, 50             ; endx 80
              LOAD s3, 32             ; endy 50
              CALL draw_line          ;

              ;; LINE 3 (RIGHT ANGLED) FOR M
              LOAD s0, 5A             ; stax 90
              LOAD s1, 1E             ; stay 30
              LOAD s2, 50             ; endx 80
              LOAD s3, 32             ; endy 50
              CALL draw_line          ;

              ;; LINE 4 (RIGHT) FOR M
              LOAD s0, 5A             ; stax 90
              LOAD s1, 1E             ; stay 30
              LOAD s2, 5A             ; endx 90
              LOAD s3, 3C             ; endy 60
              CALL draw_line          ;

              ;; LINE 1 (LEFT) FOR E1
              LOAD s0, 64             ; stax 100
              LOAD s1, 1E             ; stay 30
              LOAD s2, 64             ; endx 100
              LOAD s3, 3C             ; endy 60
              CALL draw_line          ;

              ;; LINE 2 (TOP) FOR E1
              LOAD s0, 64             ; stax 100
              LOAD s1, 1E             ; stay 30
              LOAD s2, 78             ; endx 120
              LOAD s3, 1E             ; endy 30
              CALL draw_line          ;

              ;; LINE 3 (MIDDLE) FOR E1
              LOAD s0, 64             ; stax 100
              LOAD s1, 2D             ; stay 45
              LOAD s2, 78             ; endx 120
              LOAD s3, 2D             ; endy 45
              CALL draw_line          ;

              ;; LINE 4 (BOTTOM) FOR E1
              LOAD s0, 64             ; stax 100
              LOAD s1, 3C             ; stay 60
              LOAD s2, 78             ; endx 120
              LOAD s3, 3C             ; endy 60
              CALL draw_line          ;

              ;; LINE 1 (LEFT) FOR O
              LOAD s0, 82             ; stax 130
              LOAD s1, 1E             ; stay 30
              LOAD s2, 82             ; endx 130
              LOAD s3, 3C             ; endy 60
              CALL draw_line          ;

              ;; LINE 2 (TOP) FOR O
              LOAD s0, 82             ; stax 130
              LOAD s1, 1E             ; stay 30
              LOAD s2, 96             ; endx 150
              LOAD s3, 1E             ; endy 30
              CALL draw_line          ;

              ;; LINE 3 (RIGHT) FOR O
              LOAD s0, 96             ; stax 150
              LOAD s1, 1E             ; stay 30
              LOAD s2, 96             ; endx 150
              LOAD s3, 3C             ; endy 60
              CALL draw_line          ;

              ;; LINE 4 (BOTTOM) FOR O
              LOAD s0, 82             ; stax 130
              LOAD s1, 3C             ; stay 60
              LOAD s2, 96             ; endx 150
              LOAD s3, 3C             ; endy 60
              CALL draw_line          ;

              ;; LINE 1 (LEFTANGLE) FOR V
              LOAD s0, A0             ; stax 160
              LOAD s1, 1E             ; stay 30
              LOAD s2, AA             ; endx 170
              LOAD s3, 3C             ; endy 60
              CALL draw_line          ;

              ;; LINE 2 (RIGHTANGLE) FOR V
              LOAD s0, B4             ; stax 180
              LOAD s1, 1E             ; stay 30
              LOAD s2, AA             ; endx 170
              LOAD s3, 3C             ; endy 60
              CALL draw_line          ;

              ;; LINE 1 (LEFT) FOR E
              LOAD s0, BE             ; stax 190
              LOAD s1, 1E             ; stay 30
              LOAD s2, BE             ; endx 190
              LOAD s3, 3C             ; endy 60
              CALL draw_line          ;

              ;; LINE 2 (TOP) FOR E
              LOAD s0, BE             ; stax 190
              LOAD s1, 1E             ; stay 30
              LOAD s2, D2             ; endx 210
              LOAD s3, 1E             ; endy 30
              CALL draw_line          ;

              ;; LINE 3 (MIDDLE) FOR E
              LOAD s0, BE             ; stax 190
              LOAD s1, 2D             ; stay 45
              LOAD s2, D2             ; endx 210
              LOAD s3, 2D             ; endy 45
              CALL draw_line          ;

              ;; LINE 4 (BOTTOM) FOR E
              LOAD s0, BE             ; stax 190
              LOAD s1, 3C             ; stay 60
              LOAD s2, D2             ; endx 210
              LOAD s3, 3C             ; endy 60
              CALL draw_line          ;

              ;; LINE 1 (LEFT) FOR R
              LOAD s0, DC             ; stax 220
              LOAD s1, 1E             ; stay 30
              LOAD s2, DC             ; endx 220
              LOAD s3, 3C             ; endy 60
              CALL draw_line          ;

              ;; LINE 2 (TOP) FOR R
              LOAD s0, DC             ; stax 220
              LOAD s1, 1E             ; stay 30
              LOAD s2, F0             ; endx 240
              LOAD s3, 1E             ; endy 30
              CALL draw_line          ;

              ;; LINE 3 (RIGHT) FOR R
              LOAD s0, F0             ; stax 240
              LOAD s1, 1E             ; stay 30
              LOAD s2, F0             ; endx 240
              LOAD s3, 2D             ; endy 45
              CALL draw_line          ;

              ;; LINE 4 (MIDDLE) FOR R
              LOAD s0, DC             ; stax 220
              LOAD s1, 2D             ; stay 45
              LOAD s2, F0             ; endx 240
              LOAD s3, 2D             ; endy 45
              CALL draw_line          ;

              ;; LINE 5 (ANGLED1) FOR R
              LOAD s0, DC             ; stax 220
              LOAD s1, 2D             ; stay 45
              LOAD s2, F0             ; endx 240
              LOAD s3, 3C             ; endy 60
              CALL draw_line          ;

              ;; LINE 6 (ANGLED2) FOR R
              LOAD s0, DC             ; stax 220
              LOAD s1, 2E             ; stay 46
              LOAD s2, EF             ; endx 239
              LOAD s3, 3C             ; endy 60
              CALL draw_line          ;


              RETURN                  ;
;;============================================================================
;; Credits - Draw Credits Screen Subroutine
;;============================================================================

draw_credits:
                ;; LINE 1 (TOP) FOR C
              LOAD s0, 23             ; stax 35
              LOAD s1, 1E             ; stay 30
              LOAD s2, 2D             ; endx 45
              LOAD s3, 1E             ; endy 30
              CALL draw_line          ;

              ;; LINE 2 (TOPLEFT ANGLED) FOR C
              LOAD s0, 23             ; stax 35
              LOAD s1, 1E             ; stay 30
              LOAD s2, 19             ; endx 25
              LOAD s3, 28             ; endy 40
              CALL draw_line          ;

              ;; LINE 3 (LEFT) FOR C
              LOAD s0, 19             ; stax 25
              LOAD s1, 28             ; stay 40
              LOAD s2, 19             ; endx 25
              LOAD s3, 32             ; endy 50
              CALL draw_line          ;

              ;; LINE 4 (BOTTOMLEFT ANGLED) FOR C
              LOAD s0, 19             ; stax 25
              LOAD s1, 32             ; stay 50
              LOAD s2, 23             ; endx 35
              LOAD s3, 3C             ; endy 60
              CALL draw_line          ;

              ;; LINE 5 (BOTTOM) FOR C
              LOAD s0, 23             ; stax 35
              LOAD s1, 3C             ; stay 60
              LOAD s2, 2D             ; endx 45
              LOAD s3, 3C             ; endy 60
              CALL draw_line          ;

              ;; LINE 1 (LEFT) FOR R
              LOAD s0, 37             ; stax 55
              LOAD s1, 1E             ; stay 30
              LOAD s2, 37             ; endx 55
              LOAD s3, 3C             ; endy 60
              CALL draw_line          ;

              ;; LINE 2 (TOP) FOR R
              LOAD s0, 37             ; stax 55
              LOAD s1, 1E             ; stay 30
              LOAD s2, 4B             ; endx 75
              LOAD s3, 1E             ; endy 30
              CALL draw_line          ;

              ;; LINE 3 (RIGHT) FOR R
              LOAD s0, 4B             ; stax 75
              LOAD s1, 1E             ; stay 30
              LOAD s2, 4B             ; endx 75
              LOAD s3, 2D             ; endy 45
              CALL draw_line          ;

              ;; LINE 4 (MIDDLE) FOR R
              LOAD s0, 37             ; stax 55
              LOAD s1, 2D             ; stay 45
              LOAD s2, 4B             ; endx 75
              LOAD s3, 2D             ; endy 45
              CALL draw_line          ;

              ;; LINE 5 (ANGLED) FOR R
              LOAD s0, 37             ; stax 55
              LOAD s1, 2D             ; stay 45
              LOAD s2, 4B             ; endx 75
              LOAD s3, 3C             ; endy 60
              CALL draw_line          ;

              ;; LINE 6 (ANGLED2) FOR R
              LOAD s0, 37             ; stax 55
              LOAD s1, 2E             ; stay 46
              LOAD s2, 4A             ; endx 74
              LOAD s3, 3C             ; endy 60
              CALL draw_line          ;

              ;; LINE 1 (LEFT) FOR E
              LOAD s0, 55             ; stax 85
              LOAD s1, 1E             ; stay 30
              LOAD s2, 55             ; endx 85
              LOAD s3, 3C             ; endy 60
              CALL draw_line          ;

              ;; LINE 2 (TOP) FOR E
              LOAD s0, 55             ; stax 85
              LOAD s1, 1E             ; stay 30
              LOAD s2, 69             ; endx 105
              LOAD s3, 1E             ; endy 30
              CALL draw_line          ;

              ;; LINE 3 (MIDDLE) FOR E
              LOAD s0, 55             ; stax 85
              LOAD s1, 2D             ; stay 45
              LOAD s2, 69             ; endx 105
              LOAD s3, 2D             ; endy 45
              CALL draw_line          ;

              ;; LINE 4 (BOTTOM) FOR E
              LOAD s0, 55             ; stax 85
              LOAD s1, 3C             ; stay 60
              LOAD s2, 69             ; endx 105
              LOAD s3, 3C             ; endy 60
              CALL draw_line          ;

              ;; LINE 1 (LEFT) FOR D
              LOAD s0, 73             ; stax 115
              LOAD s1, 1E             ; stay 30
              LOAD s2, 73             ; endx 115
              LOAD s3, 3C             ; endy 60
              CALL draw_line          ;

              ;; LINE 2 (TOP) FOR D
              LOAD s0, 73             ; stax 115
              LOAD s1, 1E             ; stay 30
              LOAD s2, 82             ; endx 130
              LOAD s3, 1E             ; endy 30
              CALL draw_line          ;

              ;; LINE 3 (TOPRIGHT ANGLED) FOR D
              LOAD s0, 82             ; stax 130
              LOAD s1, 1E             ; stay 30
              LOAD s2, 87             ; endx 135
              LOAD s3, 23             ; endy 35
              CALL draw_line          ;

              ;; LINE 4 (RIGHT) FOR D
              LOAD s0, 87             ; stax 135
              LOAD s1, 23             ; stay 35
              LOAD s2, 87             ; endx 135
              LOAD s3, 37             ; endy 55
              CALL draw_line          ;

	      ;; LINE 5 (BOTTOMRIGHT ANGLED) FOR D
              LOAD s0, 87             ; stax 135
              LOAD s1, 37             ; stay 55
              LOAD s2, 82             ; endx 130
              LOAD s3, 3C             ; endy 60
              CALL draw_line          ;

              ;; LINE 6 (BOTTOM) FOR D
              LOAD s0, 73             ; stax 115
              LOAD s1, 3C             ; stay 60
              LOAD s2, 82             ; endx 130
              LOAD s3, 3C             ; endy 60
              CALL draw_line          ;

              ;; LINE 1 (TOP) FOR I
              LOAD s0, 91             ; stax 145
              LOAD s1, 1E             ; stay 30
              LOAD s2, A5             ; endx 165
              LOAD s3, 1E             ; endy 30
              CALL draw_line          ;

              ;; LINE 2 (MIDDLE) FOR I
              LOAD s0, 9B             ; stax 155
              LOAD s1, 1E             ; stay 30
              LOAD s2, 9B             ; endx 155
              LOAD s3, 3C             ; endy 60
              CALL draw_line          ;

              ;; LINE 3 (BOTTOM) FOR I
              LOAD s0, 91             ; stax 145
              LOAD s1, 3C             ; stay 60
              LOAD s2, A5             ; endx 165
              LOAD s3, 3C             ; endy 60
              CALL draw_line          ;

              ;; LINE 1 (TOP) FOR T
              LOAD s0, AF             ; stax 175
              LOAD s1, 1E             ; stay 30
              LOAD s2, C3             ; endx 195
              LOAD s3, 1E             ; endy 30
              CALL draw_line          ;

              ;; LINE 2 (MIDDLE) FOR T
              LOAD s0, B9             ; stax 185
              LOAD s1, 1E             ; stay 30
              LOAD s2, B9             ; endx 185
              LOAD s3, 3C             ; endy 60
              CALL draw_line          ;

              ;; LINE 1 (TOP) FOR S
              LOAD s0, CD             ; stax 205
              LOAD s1, 1E             ; stay 30
              LOAD s2, E1             ; endx 225
              LOAD s3, 1E             ; endy 30
              CALL draw_line          ;

              ;; LINE 2 (LEFT) FOR S
              LOAD s0, CD             ; stax 205
              LOAD s1, 1E             ; stay 30
              LOAD s2, CD             ; endx 205
              LOAD s3, 2D             ; endy 45
              CALL draw_line          ;

              ;; LINE 3 (MIDDLE) FOR S
              LOAD s0, CD             ; stax 205
              LOAD s1, 2D             ; stay 45
              LOAD s2, E1             ; endx 225
              LOAD s3, 2D             ; endy 45
              CALL draw_line          ;

              ;; LINE 4 (RIGHT) FOR S
              LOAD s0, E1             ; stax 225
              LOAD s1, 2D             ; stay 45
              LOAD s2, E1             ; endx 225
              LOAD s3, 3C             ; endy 60
              CALL draw_line          ;

              ;; LINE 5 (BOTTOM) FOR S
              LOAD s0, CD             ; stax 205
              LOAD s1, 3C             ; stay 60
              LOAD s2, E1             ; endx 225
              LOAD s3, 3C             ; endy 60
              CALL draw_line          ;

              
              RETURN                  ;
;;============================================================================
;; Draw Helicopter - Draw Helicopter Subroutine
;;============================================================================

  draw_helicopter: 

              CALL draw_helicopter_cockpit       ; call the subroutine to draw the cockpit
              CALL draw_helicopter_blades        ; call the subroutine to draw the blades
              CALL draw_helicopter_tail          ; call the subroutine to draw the tail
              ;CALL draw_helicopter_smoke         ; call the subroutine to draw the smoke

			  
              RETURN                             ; go back from drawing helicopter


;;============================================================================
;; Draw Block - Draw Block Subroutine
;;============================================================================

  draw_block: 
              
              ;;============================================================================
              ;; Draws Top Line of Block 
              ;;============================================================================

              LOAD s5, sE                         ; load 255 into s5 (horizontal center of block)
              LOAD s6, E1                         ; load 245 into s6
              COMPARE s6, s5                      ; checking if the block is done "peaking out" from the right (initial compare: 245 ? 255)
              JUMP C, right_edge                  ; jump to right_edge
              LOAD s6, 0A                         ; load 10 into s6
              COMPARE s5, s6                      ; comparing s5 and s6
              JUMP C, left_edge                   ; jump to left_edge
              JUMP Z, left_edge                   ; jump to left_edge
              JUMP in_middle                      ; jump to in_middle

  right_edge: OUTPUT s5, stax                     ; set desired stax
              SUB s5, 0A;
              OUTPUT s5, endx                     ; set desired stax
              JUMP finished1                      ; jump to draw_ys

   left_edge: OUTPUT s5, stax                     ; set desired stax
              LOAD s6, 00                         ; put 255 into s5
              OUTPUT s6, endx                     ; set desired stax
              JUMP finished1                      ; jump to draw_ys

   in_middle:
              OUTPUT s5, stax                     ; set desired stax
              SUB s5, 0A                          ; subtract the width of block to get the other x coordinate
              OUTPUT s5, endx                     ; set desired endx

   finished1: OUTPUT sF, stay                     ; set desired stay
              OUTPUT sF, endy                     ; set desired endy
              CALL old_draw_line                      ; draws a line (careful: this subroutine overwrites s5)

              ;;============================================================================
              ;; Draws Bottom Line of Block 
              ;;============================================================================

              LOAD s5, sF                         ; load sF into s5
              ADD s5, 3C                          ; add 40 to s5
              OUTPUT s5, stay                     ; set desired stay
              OUTPUT s5, endy                     ; set desired endy
              CALL old_draw_line                      ; draws a line (careful: this subroutine overwrites s5)

              ;;============================================================================
              ;; Draws Right Vertical Line of Block 
              ;;============================================================================

              OUTPUT sE, stax                     ; set desired stax
              OUTPUT sE, endx                     ; set desired endx
              OUTPUT sF, stay                     ; set desired stay
              LOAD s5, sF                         ; load sF into s5
              ADD s5, 3C                          ; add 60 to y coordinate
              OUTPUT s5, endy                     ; set desired endy
              CALL old_draw_line                      ; draws a line (careful: this subroutine overwrites s5)

              ;;============================================================================
              ;; Draws Left Vertical Line of Block 
              ;;============================================================================

              LOAD s5, sE                         ; load sE into s5
              SUB s5, 0A                          ; subtract 10 from s5
              OUTPUT s5, stax                     ; set desired stax
              OUTPUT s5, endx                     ; set desired endx
              OUTPUT sF, stay                     ; set desired stay
              LOAD s5, sF                         ; load sF into s5
              ADD s5, 3C                          ; add 60 to y coordinate
              OUTPUT s5, endy                     ; set desired endy
              CALL old_draw_line                      ; draws a line (careful: this subroutine overwrites s5)
              RETURN                              ; finished with draw_block subroutine



;;============================================================================
;; Random Block Location - Random Block Location Subroutine
;;============================================================================

random_block_location: 
               COMPARE sE, 00                      ; is it time to create a new variable?
               JUMP Z, new_random                  ; jump to new random creator
               COMPARE sE, FF                      ; is it time to create a new variable?
               JUMP Z, new_random                  ; jump to new random creator
               JUMP NZ, skip_everything            ; goes back
               
skip_everything: RETURN                            ; returns back (no new rand. number)

   new_random: INPUT s5, prng                      ; create to new random number
               COMPARE s5, 0F                      ; check if it's in range
               JUMP NC, check_other_bound_range    ; check lower bound of map
               JUMP C, new_random                  ; get new variable
               
check_other_bound_range:
               COMPARE s5, B4                      ; compare s5 to 180
               JUMP NC, new_random                 ; get a new random number
               LOAD sF, s5                         ; a new y coordinate generated
               RETURN                              ; get out of subroutine
               
;;============================================================================
;; Move Helicopter Up - Move Helicopter Up Subroutine
;;============================================================================

move_heli_up:
               COMPARE sC, 15                      ; check if the helicopter is colliding with top wall
               JUMP NZ, decrement                  ; if not colliding, then move helicopter appropriately
               JUMP NC, decrement                  ; necessary as well
               RETURN                              ; do not increment if colliding with top wall
   decrement:
               SUB sC, 04                          ; move the helicopter up
               RETURN                              ; get out of subroutine

;;============================================================================
;; Draw Helicopter Cockpit - Draw Helicopter Cockpit Subroutine
;;============================================================================

draw_helicopter_cockpit:

              ;;============================================================================
              ;; Draws Cockpit of Helicopter (Line 1a)
              ;;============================================================================

              ;; STARTING POINT
              LOAD s5, 64                         ; load 100 into s5
              OUTPUT s5, stax                     ; set desired stax
              LOAD s6, sC                         ; load sC into s5
              OUTPUT s6, stay                     ; set desired stay

              ;; ENDING POINT
              SUB s5, 01                          ; subtract 7 from s5
              OUTPUT s5, endx                     ; set desired endx
              SUB s6, 03                          ; go up by 5
              OUTPUT s6, endy                     ; set desired endy
              CALL old_draw_line                      ; draws a line (careful: this subroutine overwrites s5)

              ;;============================================================================
              ;; Draws Cockpit of Helicopter (Line 1b)
              ;;============================================================================

              ;; STARTING POINT
              LOAD s5, 64                         ; load 100 into s5
              SUB s5, 01                          ; subtract 7 from s5
              OUTPUT s5, stax                     ; set desired stax
              LOAD s6, sC                         ; load sC into s5
              SUB s6, 03                          ; go up by 5
              OUTPUT s6, stay                     ; set desired stay

              ;; ENDING POINT
              SUB s5, 04                          ; subtract 7 from s5
              OUTPUT s5, endx                     ; set desired endx
              SUB s6, 02                          ; go up by 5
              OUTPUT s6, endy                     ; set desired endy
              CALL old_draw_line                      ; draws a line (careful: this subroutine overwrites s5)


              ;;============================================================================
              ;; Draws Cockpit of Helicopter (Line 2a)
              ;;============================================================================

              ;; STARTING POINT
              LOAD s5, 64                         ; load 100 into s5
              OUTPUT s5, stax                     ; set desired stax
              LOAD s6, sC                         ; load sC into s5
              OUTPUT s6, stay                     ; set desired stay

              ;; ENDING POINT
              SUB s5, 01                          ; subtract 1 from s5
              OUTPUT s5, endx                     ; set desired endx
              ADD s6, 03                          ; go down by 3
              OUTPUT s6, endy                     ; set desired endy
              CALL old_draw_line                      ; draws a line (careful: this subroutine overwrites s5)

              ;;============================================================================
              ;; Draws Cockpit of Helicopter (Line 2b)
              ;;============================================================================

              ;; STARTING POINT
              LOAD s5, 64                         ; load 100 into s5
              SUB s5, 01                          ; subtract 1 from s5
              OUTPUT s5, stax                     ; set desired stax
              LOAD s6, sC                         ; load sC into s5
              ADD s6, 03                          ; go down by 3
              OUTPUT s6, stay                     ; set desired stay

              ;; ENDING POINT
              SUB s5, 04                          ; subtract 7 from s5
              OUTPUT s5, endx                     ; set desired endx
              ADD s6, 02                          ; go down by 5
              OUTPUT s6, endy                     ; set desired endy
              CALL old_draw_line                      ; draws a line (careful: this subroutine overwrites s5)

              ;;============================================================================
              ;; Draws Cockpit of Helicopter (Line 3)
              ;;============================================================================

              ;; STARTING POINT
              LOAD s5, 64                         ; load 100 into s5
              SUB s5, 05                          ; load 7 into s5
              OUTPUT s5, stax                     ; set desired stax
              LOAD s6, sC                         ; load sC into s5
              SUB s6, 05                          ; go up by 5 using subtraction
              OUTPUT s6, stay                     ; set desired stay

              ;; ENDING POINT
              SUB s5, 07                          ; subtract 5 from s5
              OUTPUT s5, endx                     ; set desired endx
              ADD s6, 05                          ; go down by 5
              OUTPUT s6, endy                     ; set desired endy
              CALL old_draw_line                      ; draws a line (careful: this subroutine overwrites s5)

              ;;============================================================================
              ;; Draws Cockpit of Helicopter (Line 4)
              ;;============================================================================

              ;; STARTING POINT
              LOAD s5, 64                         ; load 100 into s5
              SUB s5, 05                          ; load 7 into s5
              OUTPUT s5, stax                     ; set desired stax
              LOAD s6, sC                         ; load sC into s5
              ADD s6, 05                          ; go down by 5 using addition
              OUTPUT s6, stay                     ; set desired stay

              ;; ENDING POINT
              SUB s5, 07                          ; subtract 5 from s5
              OUTPUT s5, endx                     ; set desired endx
              SUB s6, 05                          ; go back up by 5
              OUTPUT s6, endy                     ; set desired endy
              CALL old_draw_line                      ; draws a line (careful: this subroutine overwrites s5)

              RETURN                              ; go back from subroutine

;;============================================================================
;; Draw Helicopter Tail - Draw Helicopter Tail Subroutine
;;============================================================================

draw_helicopter_tail:

              ;;============================================================================
              ;; Draws Tail of Helicopter (Line 1)
              ;;============================================================================

              ;; STARTING POINT
              LOAD s5, 64                         ; load 100 into s5
              SUB s5, 0A                          ; subtract 0xA from s5
              OUTPUT s5, stax                     ; set desired stax
              LOAD s6, sC                         ; load sC into s5
              SUB s6, 02                          ; subtract 2 from s6
              OUTPUT s6, stay                     ; set desired stay

              ;; ENDING POINT
              SUB s5, 07                          ; subtract 7 from s5
              OUTPUT s5, endx                     ; set desired endx
              OUTPUT s6, endy                     ; set desired endy
              CALL old_draw_line                      ; draws a line (careful: this subroutine overwrites s5)

              ;;============================================================================
              ;; Draws Tail of Helicopter (Line 2)
              ;;============================================================================

              ;; STARTING POINT
              LOAD s5, 64                         ; load 100 into s5
              SUB s5, 0C                          ; subtract 0xC from s5
              OUTPUT s5, stax                     ; set desired stax
              LOAD s6, sC                         ; load sC into s5
              OUTPUT s6, stay                     ; set desired stay

              ;; ENDING POINT
              SUB s5, 08                          ; subtract 7 from s5
              OUTPUT s5, endx                     ; set desired endx
              OUTPUT s6, endy                     ; set desired endy
              CALL old_draw_line                      ; draws a line (careful: this subroutine overwrites s5)

              ;;============================================================================
              ;; Draws Tail of Helicopter (Line 3)
              ;;============================================================================

              ;; STARTING POINT
              LOAD s5, 64                         ; load 100 into s5
              SUB s5, 0A                          ; subtract 0x0A from s5
              SUB s5, 08                          ; subtract 0x10 from s5
              OUTPUT s5, stax                     ; set desired stax
              LOAD s6, sC                         ; load sC into s5
              SUB s6, 02                          ; subtract 2 from s6
              OUTPUT s6, stay                     ; set desired stay

              ;; ENDING POINT
              SUB s5, 02                          ; subtract 2 from s5
              OUTPUT s5, endx                     ; set desired endx
              SUB s6, 02                          ; subtract 2 from s6
              OUTPUT s6, endy                     ; set desired endy
              CALL old_draw_line                      ; draws a line (careful: this subroutine overwrites s5)

              ;;============================================================================
              ;; Draws Tail of Helicopter (Line 4)
              ;;============================================================================

              ;; STARTING POINT
              LOAD s5, 64                         ; load 100 into s5
              SUB s5, 0C                          ; subtract 0x0C from s5
              SUB s5, 09                          ; subtract 0x09 from s5
              OUTPUT s5, stax                     ; set desired stax
              LOAD s6, sC                         ; load sC into s5
              OUTPUT s6, stay                     ; set desired stay

              ;; ENDING POINT
              ;SUB s5, 01                          ; subtract 2 from s5
              OUTPUT s5, endx                     ; set desired endx
              ADD s6, 01                          ; add 1 to s6
              OUTPUT s6, endy                     ; set desired endy
              CALL old_draw_line                      ; draws a line (careful: this subroutine overwrites s5)

              ;;============================================================================
              ;; Draws Tail of Helicopter (Line 5)
              ;;============================================================================

              ;; STARTING POINT
              LOAD s5, 64                         ; load 100 into s5
              SUB s5, 0A                          ; subtract 0x0A from s5
              SUB s5, 0A                          ; subtract 0x0A from s5
              OUTPUT s5, stax                     ; set desired stax
              LOAD s6, sC                         ; load sC into s5
              SUB s6, 04                          ; subtract 4 from s6
              OUTPUT s6, stay                     ; set desired stay

              ;; ENDING POINT
              OUTPUT s5, endx                     ; set desired endx
              ADD s6, 05                          ; add 1 to s6
              OUTPUT s6, endy                     ; set desired endy
              CALL old_draw_line                      ; draws a line (careful: this subroutine overwrites s5)

              RETURN                              ; go back from subroutine

;;============================================================================
;; Draw Helicopter Blades - Draw Helicopter Blades Subroutine
;;============================================================================

draw_helicopter_blades:

              ;;============================================================================
              ;; Draws Blades of Helicopter (Line 1)
              ;;============================================================================

              ;; STARTING POINT
              LOAD s5, 64                         ; load 100 into s5
              SUB s5, 05                          ; subtract 0xA from s5
              OUTPUT s5, stax                     ; set desired stax
              LOAD s6, sC                         ; load sC into s5
              SUB s6, 05                          ; subtract 2 from s6
              OUTPUT s6, stay                     ; set desired stay

              ;; ENDING POINT
              OUTPUT s5, endx                     ; set desired endx
              SUB s6, 02                          ; subtract 2 from s6
              OUTPUT s6, endy                     ; set desired endy
              CALL old_draw_line                      ; draws a line (careful: this subroutine overwrites s5)

              ;;============================================================================
              ;; Draws Blades of Helicopter (Line 2)
              ;;============================================================================

              ;; STARTING POINT
              LOAD s5, 64                         ; load 100 into s5
              OUTPUT s5, stax                     ; set desired stax
              LOAD s6, sC                         ; load sC into s5
              SUB s6, 07                          ; subtract 2 from s6
              OUTPUT s6, stay                     ; set desired stay

              ;; ENDING POINT
              SUB s5, 0A                          ; subtract 10 from s5
              OUTPUT s5, endx                     ; set desired endx
              OUTPUT s6, endy                     ; set desired endy
              CALL old_draw_line                      ; draws a line (careful: this subroutine overwrites s5)

              RETURN                              ; go back from subroutine

;;============================================================================
;; Draw Helicopter Smoke - Draw Helicopter Smoke Subroutine
;;============================================================================

  draw_helicopter_smoke: 

              ;;============================================================================
              ;; Draws Smoke of Helicopter (Line 1)
              ;;============================================================================

              ;; Start Point
              LOAD s5, 64                          ; load 100 into s5
              SUB s5, 28                           ; position starting smoke right point of line 1
              OUTPUT s5, stax                      ; output to starting x position of line 1

              LOAD s6, sC                          ; load helicopter smoke vertical position for line 1
              OUTPUT s6, stay                      ; output to starting y position of line 1
              ;;

              ;; End Point
              SUB s5, 04                           ; position starting smoke left point of line 1
              OUTPUT s5, endx                      ; output to starting y position of line 1

              OUTPUT s6, endy                      ; output to ending y position of line 1, matching helicopter
              CALL old_draw_line                       ;draws a line (careful: this subroutine overwrites s5)
              ;;
             
              ;;============================================================================
              ;; Draws Smoke of Helicopter (Line 2)
              ;;============================================================================

              ;; Start Point
              LOAD s5, 64                          ; load 100 into s5
              SUB s5, 34                           ; position starting smoke right point of line 2
              OUTPUT s5, stax                      ; output to starting x position of line 2

              LOAD s6, sC                          ; load starting smoke vertical position for line 2
              ADD s6, 04                           ; add 4 to s6 (shift down by 4)
              OUTPUT s6, stay                      ; output to starting y position of line 2
              ;;

              ;; End Point
              SUB s5, 04                           ; subtract s5 by 4 for length of line
              OUTPUT s5, endx                      ; output to endx

              OUTPUT s6, endy                      ; outputs vertical locaton of smoke line 2
              CALL old_draw_line                       ;draws a line (careful: this subroutine overwrites s5)
              ;;

              ;;============================================================================
              ;; Draws Smoke of Helicopter (Line 3)
              ;;============================================================================
              
              ;; Start Point
              LOAD s5, 64                          ; load 100 into s5
              SUB s5, 40                           ; position starting smoke right point of line 3
              OUTPUT s5, stax                      ; output to starting x position of line 3

              LOAD s6, sC                          ; load starting smoke vertical position for line 3
              SUB s6, 04                           ; add 4 to s6 (shift down by 4)
              OUTPUT s6, stay                      ; output to starting y position of line 3
              ;;

              ;; End Point
              SUB s5, 04                           ; subtract s5 by 4 for length of line
              OUTPUT s5, endx                      ; output to endx

              OUTPUT s6, endy                      ; output same y position of line 3
              CALL old_draw_line                       ; draws a line (careful: this subroutine overwrites s5)
              ;;

              RETURN                               ; go back to subroutine



;;============================================================================
;; Draw Line - Draw Line Subroutine
;;============================================================================

   draw_line: OUTPUT s0, stax                     ; write stax
              OUTPUT s1, stay                     ; write stay
              OUTPUT s2, endx                     ; write endx
              OUTPUT s3, endy                     ; write endy
          LOAD s5, busy_go                    ; load go command
              OUTPUT s5, busy                     ; send go command
        wait: INPUT s5, busy                      ; read busy status
              COMPARE s5, busy_go                 ; check busy status
              JUMP Z, wait                        ; if busy, wait more
              RETURN                              ; leave line drawing subroutine

;;============================================================================
;; Old Draw Line - Old Draw Line Subroutine (WILL DELETE LATER)
;;============================================================================

old_draw_line:
              LOAD s5, busy_go                    ; load go command
              OUTPUT s5, busy                     ; send go command
       wait0: INPUT s5, busy                      ; read busy status
              COMPARE s5, busy_go                 ; check busy status
              JUMP Z, wait0                        ; if busy, wait more
              RETURN                              ; leave line drawing subroutine

;;============================================================================
;; Check Collisions - Check Collisions Subroutine
;;============================================================================

check_collision:
          ;;============================================================================
          ;; Check Collisions with Map (top wall)
          ;;============================================================================
          LOAD s5, 60                         ; position of heli/wall collision
          LOAD s8, 0F                         ; top wall vertical coordinate (15)
          LOAD s6, sC                         ; get vertical position of helicopter
          SUB s6, 0A                          ; the helicopter's blades 10 pixels higher
          LOAD s7, s6                         ; used later for drawing the "spark"
          COMPARE s8, s6                      ; check if the two intersect
          JUMP Z, collision_occurred          ; jump to collision occurred
          JUMP NC, collision_occurred         ; jump to collision occurred (necessary)
          
          ;;============================================================================
          ;; Check Collisions with Map (bottom wall)
          ;;============================================================================
          LOAD s8, F0                         ; bottom wall vertical coordinate (240)
          LOAD s6, sC                         ; get vertical position of helicopter
          ADD s6, 05                          ; the helicopter's bottom is 5 pixels below
          LOAD s7, s6                         ; used later for drawing the "spark"
          COMPARE s8, s6                      ; check if the two intersect
          JUMP Z, collision_occurred          ; jump to collision occurred
          
          LOAD s8, F1                         ; bottom wall vertical coordinate (241)
          LOAD s6, sC                         ; get vertical position of helicopter
          ADD s6, 05                          ; the helicopter's bottom is 5 pixels below
          LOAD s7, s6                         ; used later for drawing the "spark"
          COMPARE s8, s6                      ; check if the two intersect
          JUMP Z, collision_occurred          ; jump to collision occurred

          LOAD s8, F2                         ; bottom wall vertical coordinate (242)
          LOAD s6, sC                         ; get vertical position of helicopter
          ADD s6, 05                          ; the helicopter's bottom is 5 pixels below
          LOAD s7, s6                         ; used later for drawing the "spark"
          COMPARE s8, s6                      ; check if the two intersect
          JUMP Z, collision_occurred          ; jump to collision occurred

          LOAD s8, F3                         ; bottom wall vertical coordinate (243)
          LOAD s6, sC                         ; get vertical position of helicopter
          ADD s6, 05                          ; the helicopter's bottom is 5 pixels below
          LOAD s7, s6                         ; used later for drawing the "spark"
          COMPARE s8, s6                      ; check if the two intersect
          JUMP Z, collision_occurred          ; jump to collision occurred

          LOAD s8, F4                         ; bottom wall vertical coordinate (244)
          LOAD s6, sC                         ; get vertical position of helicopter
          ADD s6, 05                          ; the helicopter's bottom is 5 pixels below
          LOAD s7, s6                         ; used later for drawing the "spark"
          COMPARE s8, s6                      ; check if the two intersect
          JUMP Z, collision_occurred          ; jump to collision occurred

          LOAD s8, F5                         ; bottom wall vertical coordinate (245)
          LOAD s6, sC                         ; get vertical position of helicopter
          ADD s6, 05                          ; the helicopter's bottom is 5 pixels below
          LOAD s7, s6                         ; used later for drawing the "spark"
          COMPARE s8, s6                      ; check if the two intersect
          JUMP Z, collision_occurred          ; jump to collision occurred

          LOAD s8, F6                         ; bottom wall vertical coordinate (246)
          LOAD s6, sC                         ; get vertical position of helicopter
          ADD s6, 05                          ; the helicopter's bottom is 5 pixels below
          LOAD s7, s6                         ; used later for drawing the "spark"
          COMPARE s8, s6                      ; check if the two intersect
          JUMP Z, collision_occurred          ; jump to collision occurred

          ;;============================================================================
          ;; Check Collisions with Block
          ;;============================================================================

              LOAD s5, sE                         ; get current horizontal position of block
              SUB s5, 0A                          ; actual block is 10 pixels back
              COMPARE s5, 64                      ; check if s5 coincides with heli (horizontal check)
              JUMP Z, check_vertical              ; jump to check vertical positioning
              COMPARE s5, 63                      ; check if s5 coincides with heli (horizontal check)
              JUMP Z, check_vertical              ; jump to check vertical positioning
              COMPARE s5, 62                      ; check if s5 coincides with heli (horizontal check)
              JUMP Z, check_vertical              ; jump to check vertical positioning
              COMPARE s5, 61                      ; check if s5 coincides with heli (horizontal check)
              JUMP Z, check_vertical              ; jump to check vertical positioning
              COMPARE s5, 60                      ; check if s5 coincides with heli (horizontal check)
              JUMP Z, check_vertical              ; jump to check vertical positioning
              COMPARE s5, 59                      ; check if s5 coincides with heli (horizontal check)
              JUMP Z, check_vertical              ; jump to check vertical positioning
              COMPARE s5, 58                      ; check if s5 coincides with heli (horizontal check)
              JUMP Z, check_vertical              ; jump to check vertical positioning
              COMPARE s5, 57                      ; check if s5 coincides with heli (horizontal check)
              JUMP Z, check_vertical              ; jump to check vertical positioning
              COMPARE s5, 56                      ; check if s5 coincides with heli (horizontal check)
              JUMP Z, check_vertical              ; jump to check vertical positioning              
              COMPARE s5, 55                      ; check if s5 coincides with heli (horizontal check)
              JUMP Z, check_vertical              ; jump to check vertical positioning
              COMPARE s5, 54                      ; check if s5 coincides with heli (horizontal check)
              JUMP Z, check_vertical              ; jump to check vertical positioning
              JUMP NZ, no_collision               ; jump to no_collision routine

check_vertical:
              LOAD s6, sF                         ; get current vertical position of block
              LOAD s7, sC                         ; load helicopter front position
        loop: COMPARE s7, s6                      ; compare s7 and s6
              JUMP Z, collision_occurred          ; jump to collision_occured
              ADD s6, 01                          ; add one to s6
              LOAD s8, sF                         ; load original value for reference only
              ADD s8, 3c                          ; add 60 to s8
              COMPARE s6, s8                      ; compare s6 to bottom of block (s8)
              JUMP Z, no_collision                ; jump to no_collision routine
              JUMP NZ, loop                       ; keep looping

no_collision: SUB sE, 01                          ; move block forwards
              COMPARE sA, 01                      ; check if score is above 500
              CALL NC, stage2_check               ; call second stage check

              ADD sC, 02                          ; increment sC
              CALL distance                       ; used for keeping the score (increments distance)
              RETURN                              ; leave, since no collisions occurred
       
stage2_check:
             SUB sE, 01                           ; subtract 1 from sE
             COMPARE sA, 05                       ; check if score is above 1000
             CALL NC, stage3_check                ; call speed2
             RETURN                               ; leave routine

speed2:
              ;SUB sE, 01                          ; decrement by 2
          RETURN                              ; go back 
                
stage3_check:
             SUB sE, 01                          ; decrement by 3
             COMPARE sA, 08                       ; check if score is above 1000
             CALL NC, stage4_check                ; call speed2
         RETURN                              ; go back

stage4_check:
             SUB sE, 01                          ; decrement by 3
             COMPARE sA, 10                       ; check if score is above 1000
             CALL NC, stage5_check                ; call speed2
         RETURN   

stage5_check:
             SUB sE, 01                          ; decrement by 3
         RETURN   

collision_occurred: 
               OUTPUT s5, stax                     ; set desired stax
               OUTPUT s7, stay                     ; set desired stay
               INPUT s8, prng                      ; load random endx
               OUTPUT s8, endx                     ; set random endx
               INPUT s8, prng                      ; load random endy
               OUTPUT s8, endy                     ; set random endy
               CALL draw_line                      ; draw random line
               
               LOAD s9, GAMEOVER_STATE             ; should go to gameover state instead
           RETURN                              ; return from routine without any increments

;;============================================================================
;; Distance - Distance Subroutine
;;============================================================================

    distance: OUTPUT sB, qssd_lo                  ; put distance value to qssd
              COMPARE sB, FF                      ; check if max (FF) was reached
              JUMP Z, distance2                   ; jump to distance2
              ADD sB, one                         ; increment distance value
              RETURN                              ; finished with distance subroutine
              
   distance2: ADD sA, one                         ; add one to the next degree
              LOAD sB, zero                       ; reset sB
          OUTPUT sB, qssd_lo                  ; put distance value to qssd
          OUTPUT sA, qssd_hi                  ; put distance value to qssd
          RETURN                              ; finished with distance subroutine

;;============================================================================
;; Interrupt - Vector.
;;============================================================================

               ADDRESS 7FF                         ; must be located here
   isr_vector: JUMP isr                            ; always jump to isr

;;============================================================================
;;
;;============================================================================

